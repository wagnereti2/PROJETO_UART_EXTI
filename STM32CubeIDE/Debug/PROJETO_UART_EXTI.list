
PROJETO_UART_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bafc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800bd9c  0800bd9c  0000cd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be18  0800be18  0000ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be20  0800be20  0000ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800be24  0800be24  0000ce24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800be28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800be8c  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800beec  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  24000124  0800bf4c  0000d124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000a04  0800bf4c  0000da04  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b41  00000000  00000000  0000d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc8  00000000  00000000  00026c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00029960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c97  00000000  00000000  0002a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037f8c  00000000  00000000  0002b63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c9e  00000000  00000000  000635cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016164c  00000000  00000000  0007b269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dc8b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a1c  00000000  00000000  001dc8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001e1314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bd84 	.word	0x0800bd84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800bd84 	.word	0x0800bd84

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 ff41 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f939 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 faa9 	bl	8000be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000692:	f000 fa7f 	bl	8000b94 <MX_DMA_Init>
  MX_ETH_Init();
 8000696:	f000 f9b3 	bl	8000a00 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069a:	f000 f9fd 	bl	8000a98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069e:	f000 fa47 	bl	8000b30 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3, rx_buffer, sizeof(rx_buffer));
 80006a2:	220a      	movs	r2, #10
 80006a4:	498d      	ldr	r1, [pc, #564]	@ (80008dc <main+0x25c>)
 80006a6:	488e      	ldr	r0, [pc, #568]	@ (80008e0 <main+0x260>)
 80006a8:	f007 fe2c 	bl	8008304 <HAL_UART_Receive_DMA>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_DMA(&huart3, rx_buffer, sizeof(rx_buffer));
 80006ac:	220a      	movs	r2, #10
 80006ae:	498b      	ldr	r1, [pc, #556]	@ (80008dc <main+0x25c>)
 80006b0:	488b      	ldr	r0, [pc, #556]	@ (80008e0 <main+0x260>)
 80006b2:	f007 fe27 	bl	8008304 <HAL_UART_Receive_DMA>

	  if (rx_buffer [0] != 0) { //realiza a leitura do buffer e compara cada caractere
 80006b6:	4b89      	ldr	r3, [pc, #548]	@ (80008dc <main+0x25c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f6      	beq.n	80006ac <main+0x2c>

	  if (rx_buffer[0] == 'L' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '_' && rx_buffer[4] == 'G') {
 80006be:	4b87      	ldr	r3, [pc, #540]	@ (80008dc <main+0x25c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b4c      	cmp	r3, #76	@ 0x4c
 80006c4:	d116      	bne.n	80006f4 <main+0x74>
 80006c6:	4b85      	ldr	r3, [pc, #532]	@ (80008dc <main+0x25c>)
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b65      	cmp	r3, #101	@ 0x65
 80006cc:	d112      	bne.n	80006f4 <main+0x74>
 80006ce:	4b83      	ldr	r3, [pc, #524]	@ (80008dc <main+0x25c>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	2b64      	cmp	r3, #100	@ 0x64
 80006d4:	d10e      	bne.n	80006f4 <main+0x74>
 80006d6:	4b81      	ldr	r3, [pc, #516]	@ (80008dc <main+0x25c>)
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	2b5f      	cmp	r3, #95	@ 0x5f
 80006dc:	d10a      	bne.n	80006f4 <main+0x74>
 80006de:	4b7f      	ldr	r3, [pc, #508]	@ (80008dc <main+0x25c>)
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	2b47      	cmp	r3, #71	@ 0x47
 80006e4:	d106      	bne.n	80006f4 <main+0x74>
	    	rx_buffer[0] = 0;	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  } //led verde
 80006e6:	4b7d      	ldr	r3, [pc, #500]	@ (80008dc <main+0x25c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	2101      	movs	r1, #1
 80006ee:	487d      	ldr	r0, [pc, #500]	@ (80008e4 <main+0x264>)
 80006f0:	f004 fd2b 	bl	800514a <HAL_GPIO_TogglePin>

	  if (rx_buffer[0] == 'L' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '_' && rx_buffer[4] == 'R') {
 80006f4:	4b79      	ldr	r3, [pc, #484]	@ (80008dc <main+0x25c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b4c      	cmp	r3, #76	@ 0x4c
 80006fa:	d117      	bne.n	800072c <main+0xac>
 80006fc:	4b77      	ldr	r3, [pc, #476]	@ (80008dc <main+0x25c>)
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	2b65      	cmp	r3, #101	@ 0x65
 8000702:	d113      	bne.n	800072c <main+0xac>
 8000704:	4b75      	ldr	r3, [pc, #468]	@ (80008dc <main+0x25c>)
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	2b64      	cmp	r3, #100	@ 0x64
 800070a:	d10f      	bne.n	800072c <main+0xac>
 800070c:	4b73      	ldr	r3, [pc, #460]	@ (80008dc <main+0x25c>)
 800070e:	78db      	ldrb	r3, [r3, #3]
 8000710:	2b5f      	cmp	r3, #95	@ 0x5f
 8000712:	d10b      	bne.n	800072c <main+0xac>
 8000714:	4b71      	ldr	r3, [pc, #452]	@ (80008dc <main+0x25c>)
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	2b52      	cmp	r3, #82	@ 0x52
 800071a:	d107      	bne.n	800072c <main+0xac>
	  	    	rx_buffer[0] = 0;	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  } //led vermelho
 800071c:	4b6f      	ldr	r3, [pc, #444]	@ (80008dc <main+0x25c>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000726:	486f      	ldr	r0, [pc, #444]	@ (80008e4 <main+0x264>)
 8000728:	f004 fd0f 	bl	800514a <HAL_GPIO_TogglePin>

	  if (rx_buffer[0] == 'L' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '_' && rx_buffer[4] == 'Y') {
 800072c:	4b6b      	ldr	r3, [pc, #428]	@ (80008dc <main+0x25c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b4c      	cmp	r3, #76	@ 0x4c
 8000732:	d116      	bne.n	8000762 <main+0xe2>
 8000734:	4b69      	ldr	r3, [pc, #420]	@ (80008dc <main+0x25c>)
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	2b65      	cmp	r3, #101	@ 0x65
 800073a:	d112      	bne.n	8000762 <main+0xe2>
 800073c:	4b67      	ldr	r3, [pc, #412]	@ (80008dc <main+0x25c>)
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	2b64      	cmp	r3, #100	@ 0x64
 8000742:	d10e      	bne.n	8000762 <main+0xe2>
 8000744:	4b65      	ldr	r3, [pc, #404]	@ (80008dc <main+0x25c>)
 8000746:	78db      	ldrb	r3, [r3, #3]
 8000748:	2b5f      	cmp	r3, #95	@ 0x5f
 800074a:	d10a      	bne.n	8000762 <main+0xe2>
 800074c:	4b63      	ldr	r3, [pc, #396]	@ (80008dc <main+0x25c>)
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	2b59      	cmp	r3, #89	@ 0x59
 8000752:	d106      	bne.n	8000762 <main+0xe2>
	  	    	rx_buffer[0] = 0;	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);  } //led amarelo
 8000754:	4b61      	ldr	r3, [pc, #388]	@ (80008dc <main+0x25c>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	2102      	movs	r1, #2
 800075c:	4862      	ldr	r0, [pc, #392]	@ (80008e8 <main+0x268>)
 800075e:	f004 fcf4 	bl	800514a <HAL_GPIO_TogglePin>

	  if (rx_buffer[0] == 'C' && rx_buffer[1] == 'l' && rx_buffer[2] == 'e' && rx_buffer[3] == 'a' && rx_buffer[4] == 'r' && rx_buffer[4] == '_' && rx_buffer[4] == 'C' && rx_buffer[4] == 'o' && rx_buffer[4] == 'u' && rx_buffer[4] == 'n' && rx_buffer[4] == 't') {
 8000762:	4b5e      	ldr	r3, [pc, #376]	@ (80008dc <main+0x25c>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b43      	cmp	r3, #67	@ 0x43
 8000768:	d12d      	bne.n	80007c6 <main+0x146>
 800076a:	4b5c      	ldr	r3, [pc, #368]	@ (80008dc <main+0x25c>)
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	2b6c      	cmp	r3, #108	@ 0x6c
 8000770:	d129      	bne.n	80007c6 <main+0x146>
 8000772:	4b5a      	ldr	r3, [pc, #360]	@ (80008dc <main+0x25c>)
 8000774:	789b      	ldrb	r3, [r3, #2]
 8000776:	2b65      	cmp	r3, #101	@ 0x65
 8000778:	d125      	bne.n	80007c6 <main+0x146>
 800077a:	4b58      	ldr	r3, [pc, #352]	@ (80008dc <main+0x25c>)
 800077c:	78db      	ldrb	r3, [r3, #3]
 800077e:	2b61      	cmp	r3, #97	@ 0x61
 8000780:	d121      	bne.n	80007c6 <main+0x146>
 8000782:	4b56      	ldr	r3, [pc, #344]	@ (80008dc <main+0x25c>)
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	2b72      	cmp	r3, #114	@ 0x72
 8000788:	d11d      	bne.n	80007c6 <main+0x146>
 800078a:	4b54      	ldr	r3, [pc, #336]	@ (80008dc <main+0x25c>)
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000790:	d119      	bne.n	80007c6 <main+0x146>
 8000792:	4b52      	ldr	r3, [pc, #328]	@ (80008dc <main+0x25c>)
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	2b43      	cmp	r3, #67	@ 0x43
 8000798:	d115      	bne.n	80007c6 <main+0x146>
 800079a:	4b50      	ldr	r3, [pc, #320]	@ (80008dc <main+0x25c>)
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	2b6f      	cmp	r3, #111	@ 0x6f
 80007a0:	d111      	bne.n	80007c6 <main+0x146>
 80007a2:	4b4e      	ldr	r3, [pc, #312]	@ (80008dc <main+0x25c>)
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	2b75      	cmp	r3, #117	@ 0x75
 80007a8:	d10d      	bne.n	80007c6 <main+0x146>
 80007aa:	4b4c      	ldr	r3, [pc, #304]	@ (80008dc <main+0x25c>)
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	2b6e      	cmp	r3, #110	@ 0x6e
 80007b0:	d109      	bne.n	80007c6 <main+0x146>
 80007b2:	4b4a      	ldr	r3, [pc, #296]	@ (80008dc <main+0x25c>)
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	2b74      	cmp	r3, #116	@ 0x74
 80007b8:	d105      	bne.n	80007c6 <main+0x146>
	  	  	    	rx_buffer[0] = 0;	contador = 0;	  } //zerar contador
 80007ba:	4b48      	ldr	r3, [pc, #288]	@ (80008dc <main+0x25c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	4b4a      	ldr	r3, [pc, #296]	@ (80008ec <main+0x26c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]

	  if (rx_buffer[0] == 'T' && rx_buffer[1] == 'a' && rx_buffer[2] == 'b' && rx_buffer[3] == 'l' && rx_buffer[4] == 'e') {
 80007c6:	4b45      	ldr	r3, [pc, #276]	@ (80008dc <main+0x25c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b54      	cmp	r3, #84	@ 0x54
 80007cc:	d12c      	bne.n	8000828 <main+0x1a8>
 80007ce:	4b43      	ldr	r3, [pc, #268]	@ (80008dc <main+0x25c>)
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	2b61      	cmp	r3, #97	@ 0x61
 80007d4:	d128      	bne.n	8000828 <main+0x1a8>
 80007d6:	4b41      	ldr	r3, [pc, #260]	@ (80008dc <main+0x25c>)
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	2b62      	cmp	r3, #98	@ 0x62
 80007dc:	d124      	bne.n	8000828 <main+0x1a8>
 80007de:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <main+0x25c>)
 80007e0:	78db      	ldrb	r3, [r3, #3]
 80007e2:	2b6c      	cmp	r3, #108	@ 0x6c
 80007e4:	d120      	bne.n	8000828 <main+0x1a8>
 80007e6:	4b3d      	ldr	r3, [pc, #244]	@ (80008dc <main+0x25c>)
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	2b65      	cmp	r3, #101	@ 0x65
 80007ec:	d11c      	bne.n	8000828 <main+0x1a8>
	  	  	  	    	rx_buffer[0] = 0;
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <main+0x25c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]

	  	   //sprintf(message, "%s", tabela);  //converte o valor inteiro para char e envia pela serial

	  	   HAL_UART_Transmit_DMA(&huart3, (uint8_t)message, strlen(message)); 	  HAL_Delay(500);
 80007f4:	4b3e      	ldr	r3, [pc, #248]	@ (80008f0 <main+0x270>)
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461c      	mov	r4, r3
 80007fa:	483d      	ldr	r0, [pc, #244]	@ (80008f0 <main+0x270>)
 80007fc:	f7ff fd70 	bl	80002e0 <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	b29b      	uxth	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	4621      	mov	r1, r4
 8000808:	4835      	ldr	r0, [pc, #212]	@ (80008e0 <main+0x260>)
 800080a:	f007 fcfb 	bl	8008204 <HAL_UART_Transmit_DMA>
 800080e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000812:	f000 ff0d 	bl	8001630 <HAL_Delay>
	  	   if (Rx_flag == '1')  {Rx_flag = '0'; } else {  __NOP(); 	  }	  } //exibir tabela
 8000816:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <main+0x274>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b31      	cmp	r3, #49	@ 0x31
 800081c:	d103      	bne.n	8000826 <main+0x1a6>
 800081e:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <main+0x274>)
 8000820:	2230      	movs	r2, #48	@ 0x30
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e000      	b.n	8000828 <main+0x1a8>
 8000826:	bf00      	nop

	  if (rx_buffer[0] == 'S' && rx_buffer[1] == 'e' && rx_buffer[2] == 'n' && rx_buffer[3] == 'd' && rx_buffer[4] == '_' && rx_buffer[5] == 'C' && rx_buffer[6] == 'o' && rx_buffer[7] == 'u' && rx_buffer[8] == 'n' && rx_buffer[9] == 't') {
 8000828:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <main+0x25c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b53      	cmp	r3, #83	@ 0x53
 800082e:	f47f af3d 	bne.w	80006ac <main+0x2c>
 8000832:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <main+0x25c>)
 8000834:	785b      	ldrb	r3, [r3, #1]
 8000836:	2b65      	cmp	r3, #101	@ 0x65
 8000838:	f47f af38 	bne.w	80006ac <main+0x2c>
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <main+0x25c>)
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	2b6e      	cmp	r3, #110	@ 0x6e
 8000842:	f47f af33 	bne.w	80006ac <main+0x2c>
 8000846:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <main+0x25c>)
 8000848:	78db      	ldrb	r3, [r3, #3]
 800084a:	2b64      	cmp	r3, #100	@ 0x64
 800084c:	f47f af2e 	bne.w	80006ac <main+0x2c>
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <main+0x25c>)
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	2b5f      	cmp	r3, #95	@ 0x5f
 8000856:	f47f af29 	bne.w	80006ac <main+0x2c>
 800085a:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <main+0x25c>)
 800085c:	795b      	ldrb	r3, [r3, #5]
 800085e:	2b43      	cmp	r3, #67	@ 0x43
 8000860:	f47f af24 	bne.w	80006ac <main+0x2c>
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <main+0x25c>)
 8000866:	799b      	ldrb	r3, [r3, #6]
 8000868:	2b6f      	cmp	r3, #111	@ 0x6f
 800086a:	f47f af1f 	bne.w	80006ac <main+0x2c>
 800086e:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <main+0x25c>)
 8000870:	79db      	ldrb	r3, [r3, #7]
 8000872:	2b75      	cmp	r3, #117	@ 0x75
 8000874:	f47f af1a 	bne.w	80006ac <main+0x2c>
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <main+0x25c>)
 800087a:	7a1b      	ldrb	r3, [r3, #8]
 800087c:	2b6e      	cmp	r3, #110	@ 0x6e
 800087e:	f47f af15 	bne.w	80006ac <main+0x2c>
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <main+0x25c>)
 8000884:	7a5b      	ldrb	r3, [r3, #9]
 8000886:	2b74      	cmp	r3, #116	@ 0x74
 8000888:	f47f af10 	bne.w	80006ac <main+0x2c>
		      rx_buffer[0] = 0;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <main+0x25c>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]

           sprintf(message, "%s", contador);  //converte o valor inteiro para char e envia pela serial
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <main+0x26c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	4917      	ldr	r1, [pc, #92]	@ (80008f8 <main+0x278>)
 800089a:	4815      	ldr	r0, [pc, #84]	@ (80008f0 <main+0x270>)
 800089c:	f00a fdd2 	bl	800b444 <siprintf>
           char message = "1";
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <main+0x27c>)
 80008a2:	71fb      	strb	r3, [r7, #7]
           HAL_UART_Transmit_DMA(&huart3, (uint8_t)message, strlen(message)); 	  HAL_Delay(500);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	461c      	mov	r4, r3
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fd18 	bl	80002e0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	4621      	mov	r1, r4
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <main+0x260>)
 80008ba:	f007 fca3 	bl	8008204 <HAL_UART_Transmit_DMA>
 80008be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008c2:	f000 feb5 	bl	8001630 <HAL_Delay>
		   if (Rx_flag == '1')  {Rx_flag = '0'; } else {  __NOP(); 	  }	  } //ler o contador
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <main+0x274>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b31      	cmp	r3, #49	@ 0x31
 80008cc:	d103      	bne.n	80008d6 <main+0x256>
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <main+0x274>)
 80008d0:	2230      	movs	r2, #48	@ 0x30
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e6ea      	b.n	80006ac <main+0x2c>
 80008d6:	bf00      	nop
	  HAL_UART_Receive_DMA(&huart3, rx_buffer, sizeof(rx_buffer));
 80008d8:	e6e8      	b.n	80006ac <main+0x2c>
 80008da:	bf00      	nop
 80008dc:	24000144 	.word	0x24000144
 80008e0:	24000244 	.word	0x24000244
 80008e4:	58020400 	.word	0x58020400
 80008e8:	58021000 	.word	0x58021000
 80008ec:	24000140 	.word	0x24000140
 80008f0:	24000150 	.word	0x24000150
 80008f4:	24000000 	.word	0x24000000
 80008f8:	0800bd9c 	.word	0x0800bd9c
 80008fc:	0800bda0 	.word	0x0800bda0

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	@ 0x70
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	224c      	movs	r2, #76	@ 0x4c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f00a fdb8 	bl	800b484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2220      	movs	r2, #32
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f00a fdb2 	bl	800b484 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000920:	2002      	movs	r0, #2
 8000922:	f004 fd77 	bl	8005414 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b33      	ldr	r3, [pc, #204]	@ (80009f8 <SystemClock_Config+0xf8>)
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	4a32      	ldr	r2, [pc, #200]	@ (80009f8 <SystemClock_Config+0xf8>)
 8000930:	f023 0301 	bic.w	r3, r3, #1
 8000934:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000936:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <SystemClock_Config+0xf8>)
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <SystemClock_Config+0xfc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000948:	4a2c      	ldr	r2, [pc, #176]	@ (80009fc <SystemClock_Config+0xfc>)
 800094a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <SystemClock_Config+0xfc>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095c:	bf00      	nop
 800095e:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <SystemClock_Config+0xfc>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800096a:	d1f8      	bne.n	800095e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800096c:	2303      	movs	r3, #3
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000970:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000976:	2301      	movs	r3, #1
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2340      	movs	r3, #64	@ 0x40
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	2302      	movs	r3, #2
 8000984:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000986:	2301      	movs	r3, #1
 8000988:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800098a:	2318      	movs	r3, #24
 800098c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000992:	2304      	movs	r3, #4
 8000994:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800099a:	230c      	movs	r3, #12
 800099c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099e:	2300      	movs	r3, #0
 80009a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fd7c 	bl	80054a8 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009b6:	f000 fa2b 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	233f      	movs	r3, #63	@ 0x3f
 80009bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 f9bc 	bl	8005d5c <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009ea:	f000 fa11 	bl	8000e10 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	@ 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800

08000a00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a06:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <MX_ETH_Init+0x84>)
 8000a08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a12:	2280      	movs	r2, #128	@ 0x80
 8000a14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a18:	22e1      	movs	r2, #225	@ 0xe1
 8000a1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a30:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a3c:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <MX_ETH_Init+0x8c>)
 8000a3e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a42:	4a13      	ldr	r2, [pc, #76]	@ (8000a90 <MX_ETH_Init+0x90>)
 8000a44:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a48:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a4c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a4e:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a50:	f003 fd7e 	bl	8004550 <HAL_ETH_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a5a:	f000 f9d9 	bl	8000e10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a5e:	2238      	movs	r2, #56	@ 0x38
 8000a60:	2100      	movs	r1, #0
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a64:	f00a fd0e 	bl	800b484 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a6a:	2221      	movs	r2, #33	@ 0x21
 8000a6c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a74:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000194 	.word	0x24000194
 8000a84:	40028000 	.word	0x40028000
 8000a88:	240008ac 	.word	0x240008ac
 8000a8c:	240000c4 	.word	0x240000c4
 8000a90:	24000064 	.word	0x24000064
 8000a94:	2400015c 	.word	0x2400015c

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	@ (8000b2c <MX_USART3_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae0:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f007 faf3 	bl	80080cc <HAL_UART_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aec:	f000 f990 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000af4:	f00a f8d3 	bl	800ac9e <HAL_UARTEx_SetTxFifoThreshold>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000afe:	f000 f987 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b06:	f00a f908 	bl	800ad1a <HAL_UARTEx_SetRxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b10:	f000 f97e 	bl	8000e10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b16:	f00a f889 	bl	800ac2c <HAL_UARTEx_DisableFifoMode>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b20:	f000 f976 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	24000244 	.word	0x24000244
 8000b2c:	40004800 	.word	0x40004800

08000b30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	4a16      	ldr	r2, [pc, #88]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2209      	movs	r2, #9
 8000b3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b78:	f004 fb1b 	bl	80051b2 <HAL_PCD_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b82:	f000 f945 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	240003c8 	.word	0x240003c8
 8000b90:	40080000 	.word	0x40080000

08000b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_DMA_Init+0x4c>)
 8000b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <MX_DMA_Init+0x4c>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <MX_DMA_Init+0x4c>)
 8000bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	200b      	movs	r0, #11
 8000bbe:	f000 fe56 	bl	800186e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bc2:	200b      	movs	r0, #11
 8000bc4:	f000 fe6d 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	200c      	movs	r0, #12
 8000bce:	f000 fe4e 	bl	800186e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bd2:	200c      	movs	r0, #12
 8000bd4:	f000 fe65 	bl	80018a2 <HAL_NVIC_EnableIRQ>

}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58024400 	.word	0x58024400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	@ 0x30
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b66      	ldr	r3, [pc, #408]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	4a64      	ldr	r2, [pc, #400]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0a:	4b62      	ldr	r3, [pc, #392]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c18:	4b5e      	ldr	r3, [pc, #376]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c28:	4b5a      	ldr	r3, [pc, #360]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b57      	ldr	r3, [pc, #348]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a55      	ldr	r2, [pc, #340]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b53      	ldr	r3, [pc, #332]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a4e      	ldr	r2, [pc, #312]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b4b      	ldr	r3, [pc, #300]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b48      	ldr	r3, [pc, #288]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a46      	ldr	r2, [pc, #280]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c90:	4b40      	ldr	r3, [pc, #256]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a3f      	ldr	r2, [pc, #252]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	4b39      	ldr	r3, [pc, #228]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	4a37      	ldr	r2, [pc, #220]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <MX_GPIO_Init+0x1b0>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000cd2:	4831      	ldr	r0, [pc, #196]	@ (8000d98 <MX_GPIO_Init+0x1b4>)
 8000cd4:	f004 fa20 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cde:	482f      	ldr	r0, [pc, #188]	@ (8000d9c <MX_GPIO_Init+0x1b8>)
 8000ce0:	f004 fa1a 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	482d      	ldr	r0, [pc, #180]	@ (8000da0 <MX_GPIO_Init+0x1bc>)
 8000cea:	f004 fa15 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : b1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4827      	ldr	r0, [pc, #156]	@ (8000da4 <MX_GPIO_Init+0x1c0>)
 8000d06:	f004 f857 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d0a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481d      	ldr	r0, [pc, #116]	@ (8000d98 <MX_GPIO_Init+0x1b4>)
 8000d24:	f004 f848 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4816      	ldr	r0, [pc, #88]	@ (8000d9c <MX_GPIO_Init+0x1b8>)
 8000d42:	f004 f839 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d46:	2380      	movs	r3, #128	@ 0x80
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4813      	ldr	r0, [pc, #76]	@ (8000da8 <MX_GPIO_Init+0x1c4>)
 8000d5c:	f004 f82c 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <MX_GPIO_Init+0x1bc>)
 8000d78:	f004 f81e 	bl	8004db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2028      	movs	r0, #40	@ 0x28
 8000d82:	f000 fd74 	bl	800186e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f000 fd8b 	bl	80018a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	@ 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020400 	.word	0x58020400
 8000d9c:	58020c00 	.word	0x58020c00
 8000da0:	58021000 	.word	0x58021000
 8000da4:	58020800 	.word	0x58020800
 8000da8:	58021800 	.word	0x58021800

08000dac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dbc:	d109      	bne.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //led verde
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x30>)
 8000dc2:	f004 f9c2 	bl	800514a <HAL_GPIO_TogglePin>
		contador = contador + 1;  //incrementa o valor da variavel contador quando houver interrupção
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000dce:	6013      	str	r3, [r2, #0]

	}  else {__NOP();}
}
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x28>
	}  else {__NOP();}
 8000dd2:	bf00      	nop
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	24000140 	.word	0x24000140

08000de4 <HAL_UART_RxCpltCallback>:

	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	Rx_flag = '1';	HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));    }
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_UART_RxCpltCallback+0x20>)
 8000dee:	2231      	movs	r2, #49	@ 0x31
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	220a      	movs	r2, #10
 8000df4:	4904      	ldr	r1, [pc, #16]	@ (8000e08 <HAL_UART_RxCpltCallback+0x24>)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <HAL_UART_RxCpltCallback+0x28>)
 8000df8:	f007 f9b8 	bl	800816c <HAL_UART_Receive_IT>
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24000000 	.word	0x24000000
 8000e08:	24000144 	.word	0x24000144
 8000e0c:	24000244 	.word	0x24000244

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <Error_Handler+0x8>

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_MspInit+0x30>)
 8000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e28:	4a08      	ldr	r2, [pc, #32]	@ (8000e4c <HAL_MspInit+0x30>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_MspInit+0x30>)
 8000e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	58024400 	.word	0x58024400

08000e50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a59      	ldr	r2, [pc, #356]	@ (8000fd4 <HAL_ETH_MspInit+0x184>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	f040 80ab 	bne.w	8000fca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e74:	4b58      	ldr	r3, [pc, #352]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e7a:	4a57      	ldr	r2, [pc, #348]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e80:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e84:	4b54      	ldr	r3, [pc, #336]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e92:	4b51      	ldr	r3, [pc, #324]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e98:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000eb0:	4b49      	ldr	r3, [pc, #292]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eb6:	4a48      	ldr	r2, [pc, #288]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ec0:	4b45      	ldr	r3, [pc, #276]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b42      	ldr	r3, [pc, #264]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	4a40      	ldr	r2, [pc, #256]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ede:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	4a39      	ldr	r2, [pc, #228]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efc:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b33      	ldr	r3, [pc, #204]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	4a31      	ldr	r2, [pc, #196]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f28:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f38:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f46:	2332      	movs	r3, #50	@ 0x32
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f56:	230b      	movs	r3, #11
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481e      	ldr	r0, [pc, #120]	@ (8000fdc <HAL_ETH_MspInit+0x18c>)
 8000f62:	f003 ff29 	bl	8004db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f66:	2386      	movs	r3, #134	@ 0x86
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f76:	230b      	movs	r3, #11
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4817      	ldr	r0, [pc, #92]	@ (8000fe0 <HAL_ETH_MspInit+0x190>)
 8000f82:	f003 ff19 	bl	8004db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4810      	ldr	r0, [pc, #64]	@ (8000fe4 <HAL_ETH_MspInit+0x194>)
 8000fa4:	f003 ff08 	bl	8004db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fa8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fba:	230b      	movs	r3, #11
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4808      	ldr	r0, [pc, #32]	@ (8000fe8 <HAL_ETH_MspInit+0x198>)
 8000fc6:	f003 fef7 	bl	8004db8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	3738      	adds	r7, #56	@ 0x38
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40028000 	.word	0x40028000
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020800 	.word	0x58020800
 8000fe0:	58020000 	.word	0x58020000
 8000fe4:	58020400 	.word	0x58020400
 8000fe8:	58021800 	.word	0x58021800

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	22c0      	movs	r2, #192	@ 0xc0
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f00a fa39 	bl	800b484 <memset>
  if(huart->Instance==USART3)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a59      	ldr	r2, [pc, #356]	@ (800117c <HAL_UART_MspInit+0x190>)
 8001018:	4293      	cmp	r3, r2
 800101a:	f040 80aa 	bne.w	8001172 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800101e:	f04f 0202 	mov.w	r2, #2
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4618      	mov	r0, r3
 8001036:	f005 fa1d 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001040:	f7ff fee6 	bl	8000e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001044:	4b4e      	ldr	r3, [pc, #312]	@ (8001180 <HAL_UART_MspInit+0x194>)
 8001046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800104a:	4a4d      	ldr	r2, [pc, #308]	@ (8001180 <HAL_UART_MspInit+0x194>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001050:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001054:	4b4a      	ldr	r3, [pc, #296]	@ (8001180 <HAL_UART_MspInit+0x194>)
 8001056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	4b47      	ldr	r3, [pc, #284]	@ (8001180 <HAL_UART_MspInit+0x194>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	4a45      	ldr	r2, [pc, #276]	@ (8001180 <HAL_UART_MspInit+0x194>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001072:	4b43      	ldr	r3, [pc, #268]	@ (8001180 <HAL_UART_MspInit+0x194>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001080:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001084:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800109a:	2307      	movs	r3, #7
 800109c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4837      	ldr	r0, [pc, #220]	@ (8001184 <HAL_UART_MspInit+0x198>)
 80010a8:	f003 fe86 	bl	8004db8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010ae:	4a37      	ldr	r2, [pc, #220]	@ (800118c <HAL_UART_MspInit+0x1a0>)
 80010b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010b4:	222d      	movs	r2, #45	@ 0x2d
 80010b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b8:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e4:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80010ea:	4827      	ldr	r0, [pc, #156]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010ec:	f000 fbf4 	bl	80018d8 <HAL_DMA_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80010f6:	f7ff fe8b 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a22      	ldr	r2, [pc, #136]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 80010fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <HAL_UART_MspInit+0x19c>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001108:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 800110a:	4a22      	ldr	r2, [pc, #136]	@ (8001194 <HAL_UART_MspInit+0x1a8>)
 800110c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 8001110:	222e      	movs	r2, #46	@ 0x2e
 8001112:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 8001116:	2240      	movs	r2, #64	@ 0x40
 8001118:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 8001122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001126:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 8001148:	f000 fbc6 	bl	80018d8 <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001152:	f7ff fe5d 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 800115a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_UART_MspInit+0x1a4>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2027      	movs	r0, #39	@ 0x27
 8001168:	f000 fb81 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800116c:	2027      	movs	r0, #39	@ 0x27
 800116e:	f000 fb98 	bl	80018a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001172:	bf00      	nop
 8001174:	37e8      	adds	r7, #232	@ 0xe8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40004800 	.word	0x40004800
 8001180:	58024400 	.word	0x58024400
 8001184:	58020c00 	.word	0x58020c00
 8001188:	240002d8 	.word	0x240002d8
 800118c:	40020010 	.word	0x40020010
 8001190:	24000350 	.word	0x24000350
 8001194:	40020028 	.word	0x40020028

08001198 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0ba      	sub	sp, #232	@ 0xe8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	22c0      	movs	r2, #192	@ 0xc0
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00a f963 	bl	800b484 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a30      	ldr	r2, [pc, #192]	@ (8001284 <HAL_PCD_MspInit+0xec>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d159      	bne.n	800127c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 f947 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80011ec:	f7ff fe10 	bl	8000e10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011f0:	f004 f94a 	bl	8005488 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <HAL_PCD_MspInit+0xf0>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <HAL_PCD_MspInit+0xf0>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_PCD_MspInit+0xf0>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001212:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800122c:	230a      	movs	r3, #10
 800122e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001236:	4619      	mov	r1, r3
 8001238:	4814      	ldr	r0, [pc, #80]	@ (800128c <HAL_PCD_MspInit+0xf4>)
 800123a:	f003 fdbd 	bl	8004db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <HAL_PCD_MspInit+0xf4>)
 800125a:	f003 fdad 	bl	8004db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_PCD_MspInit+0xf0>)
 8001260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001264:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <HAL_PCD_MspInit+0xf0>)
 8001266:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800126a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_PCD_MspInit+0xf0>)
 8001270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800127c:	bf00      	nop
 800127e:	37e8      	adds	r7, #232	@ 0xe8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40080000 	.word	0x40080000
 8001288:	58024400 	.word	0x58024400
 800128c:	58020000 	.word	0x58020000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f983 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <DMA1_Stream0_IRQHandler+0x10>)
 80012f6:	f001 fe19 	bl	8002f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	240002d8 	.word	0x240002d8

08001304 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <DMA1_Stream1_IRQHandler+0x10>)
 800130a:	f001 fe0f 	bl	8002f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	24000350 	.word	0x24000350

08001318 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <USART3_IRQHandler+0x10>)
 800131e:	f007 f83d 	bl	800839c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	24000244 	.word	0x24000244

0800132c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001330:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001334:	f003 ff23 	bl	800517e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f00a f892 	bl	800b494 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	24080000 	.word	0x24080000
 800139c:	00000400 	.word	0x00000400
 80013a0:	240008b4 	.word	0x240008b4
 80013a4:	24000a08 	.word	0x24000a08

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013ac:	f000 f826 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f00a f863 	bl	800b4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff f951 	bl	8000680 <main>
  bx  lr
 80013de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013e8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80013ec:	0800be28 	.word	0x0800be28
  ldr r2, =_sbss
 80013f0:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80013f4:	24000a04 	.word	0x24000a04

080013f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC3_IRQHandler>
	...

080013fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001400:	4b37      	ldr	r3, [pc, #220]	@ (80014e0 <SystemInit+0xe4>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001406:	4a36      	ldr	r2, [pc, #216]	@ (80014e0 <SystemInit+0xe4>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001410:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <SystemInit+0xe8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	2b06      	cmp	r3, #6
 800141a:	d807      	bhi.n	800142c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800141c:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <SystemInit+0xe8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 030f 	bic.w	r3, r3, #15
 8001424:	4a2f      	ldr	r2, [pc, #188]	@ (80014e4 <SystemInit+0xe8>)
 8001426:	f043 0307 	orr.w	r3, r3, #7
 800142a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <SystemInit+0xec>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a2d      	ldr	r2, [pc, #180]	@ (80014e8 <SystemInit+0xec>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <SystemInit+0xec>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <SystemInit+0xec>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4929      	ldr	r1, [pc, #164]	@ (80014e8 <SystemInit+0xec>)
 8001444:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <SystemInit+0xf0>)
 8001446:	4013      	ands	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800144a:	4b26      	ldr	r3, [pc, #152]	@ (80014e4 <SystemInit+0xe8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <SystemInit+0xe8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 030f 	bic.w	r3, r3, #15
 800145e:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <SystemInit+0xe8>)
 8001460:	f043 0307 	orr.w	r3, r3, #7
 8001464:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <SystemInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800146c:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <SystemInit+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001472:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <SystemInit+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <SystemInit+0xec>)
 800147a:	4a1d      	ldr	r2, [pc, #116]	@ (80014f0 <SystemInit+0xf4>)
 800147c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <SystemInit+0xec>)
 8001480:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <SystemInit+0xf8>)
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <SystemInit+0xec>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <SystemInit+0xfc>)
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <SystemInit+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001490:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <SystemInit+0xec>)
 8001492:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <SystemInit+0xfc>)
 8001494:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <SystemInit+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <SystemInit+0xec>)
 800149e:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <SystemInit+0xfc>)
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <SystemInit+0xec>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <SystemInit+0xec>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0e      	ldr	r2, [pc, #56]	@ (80014e8 <SystemInit+0xec>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <SystemInit+0xec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <SystemInit+0x100>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <SystemInit+0x104>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014c6:	d202      	bcs.n	80014ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <SystemInit+0x108>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <SystemInit+0x10c>)
 80014d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	52002000 	.word	0x52002000
 80014e8:	58024400 	.word	0x58024400
 80014ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80014f0:	02020200 	.word	0x02020200
 80014f4:	01ff0000 	.word	0x01ff0000
 80014f8:	01010280 	.word	0x01010280
 80014fc:	5c001000 	.word	0x5c001000
 8001500:	ffff0000 	.word	0xffff0000
 8001504:	51008108 	.word	0x51008108
 8001508:	52004000 	.word	0x52004000

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001512:	2003      	movs	r0, #3
 8001514:	f000 f9a0 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001518:	f004 fdd6 	bl	80060c8 <HAL_RCC_GetSysClockFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_Init+0x68>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4913      	ldr	r1, [pc, #76]	@ (8001578 <HAL_Init+0x6c>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_Init+0x68>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <HAL_Init+0x6c>)
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	4a0b      	ldr	r2, [pc, #44]	@ (800157c <HAL_Init+0x70>)
 800154e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_Init+0x74>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f814 	bl	8001584 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e002      	b.n	800156c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001566:	f7ff fc59 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024400 	.word	0x58024400
 8001578:	0800bda4 	.word	0x0800bda4
 800157c:	24000008 	.word	0x24000008
 8001580:	24000004 	.word	0x24000004

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_InitTick+0x60>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e021      	b.n	80015dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_InitTick+0x64>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_InitTick+0x60>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f985 	bl	80018be <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f94f 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <HAL_InitTick+0x68>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	24000010 	.word	0x24000010
 80015e8:	24000004 	.word	0x24000004
 80015ec:	2400000c 	.word	0x2400000c

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	24000010 	.word	0x24000010
 8001614:	240008b8 	.word	0x240008b8

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	240008b8 	.word	0x240008b8

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000010 	.word	0x24000010

08001678 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <HAL_GetREVID+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0c1b      	lsrs	r3, r3, #16
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	5c001000 	.word	0x5c001000

08001690 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80016a0:	4904      	ldr	r1, [pc, #16]	@ (80016b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	58000400 	.word	0x58000400

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x40>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x40>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	05fa0000 	.word	0x05fa0000

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4907      	ldr	r1, [pc, #28]	@ (8001754 <__NVIC_EnableIRQ+0x38>)
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff8e 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff29 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff40 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff90 	bl	80017ac <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5f 	bl	8001758 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff33 	bl	800171c <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa4 	bl	8001814 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fe9a 	bl	8001618 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e316      	b.n	8001f1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a66      	ldr	r2, [pc, #408]	@ (8001a90 <HAL_DMA_Init+0x1b8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d04a      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a65      	ldr	r2, [pc, #404]	@ (8001a94 <HAL_DMA_Init+0x1bc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d045      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a63      	ldr	r2, [pc, #396]	@ (8001a98 <HAL_DMA_Init+0x1c0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d040      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a62      	ldr	r2, [pc, #392]	@ (8001a9c <HAL_DMA_Init+0x1c4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d03b      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a60      	ldr	r2, [pc, #384]	@ (8001aa0 <HAL_DMA_Init+0x1c8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d036      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa4 <HAL_DMA_Init+0x1cc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d031      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a5d      	ldr	r2, [pc, #372]	@ (8001aa8 <HAL_DMA_Init+0x1d0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d02c      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5c      	ldr	r2, [pc, #368]	@ (8001aac <HAL_DMA_Init+0x1d4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d027      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab0 <HAL_DMA_Init+0x1d8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d022      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a59      	ldr	r2, [pc, #356]	@ (8001ab4 <HAL_DMA_Init+0x1dc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d01d      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a57      	ldr	r2, [pc, #348]	@ (8001ab8 <HAL_DMA_Init+0x1e0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d018      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a56      	ldr	r2, [pc, #344]	@ (8001abc <HAL_DMA_Init+0x1e4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a54      	ldr	r2, [pc, #336]	@ (8001ac0 <HAL_DMA_Init+0x1e8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00e      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a53      	ldr	r2, [pc, #332]	@ (8001ac4 <HAL_DMA_Init+0x1ec>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d009      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a51      	ldr	r2, [pc, #324]	@ (8001ac8 <HAL_DMA_Init+0x1f0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d004      	beq.n	8001990 <HAL_DMA_Init+0xb8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a50      	ldr	r2, [pc, #320]	@ (8001acc <HAL_DMA_Init+0x1f4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_DMA_Init+0xbc>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_DMA_Init+0xbe>
 8001994:	2300      	movs	r3, #0
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 813b 	beq.w	8001c12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a37      	ldr	r2, [pc, #220]	@ (8001a90 <HAL_DMA_Init+0x1b8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d04a      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a36      	ldr	r2, [pc, #216]	@ (8001a94 <HAL_DMA_Init+0x1bc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d045      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a34      	ldr	r2, [pc, #208]	@ (8001a98 <HAL_DMA_Init+0x1c0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a33      	ldr	r2, [pc, #204]	@ (8001a9c <HAL_DMA_Init+0x1c4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d03b      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a31      	ldr	r2, [pc, #196]	@ (8001aa0 <HAL_DMA_Init+0x1c8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d036      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a30      	ldr	r2, [pc, #192]	@ (8001aa4 <HAL_DMA_Init+0x1cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d031      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa8 <HAL_DMA_Init+0x1d0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02c      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a2d      	ldr	r2, [pc, #180]	@ (8001aac <HAL_DMA_Init+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d027      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab0 <HAL_DMA_Init+0x1d8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab4 <HAL_DMA_Init+0x1dc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d01d      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a28      	ldr	r2, [pc, #160]	@ (8001ab8 <HAL_DMA_Init+0x1e0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <HAL_DMA_Init+0x1e4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a25      	ldr	r2, [pc, #148]	@ (8001ac0 <HAL_DMA_Init+0x1e8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <HAL_DMA_Init+0x1ec>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	@ (8001ac8 <HAL_DMA_Init+0x1f0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_DMA_Init+0x174>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a21      	ldr	r2, [pc, #132]	@ (8001acc <HAL_DMA_Init+0x1f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d108      	bne.n	8001a5e <HAL_DMA_Init+0x186>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e007      	b.n	8001a6e <HAL_DMA_Init+0x196>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a6e:	e02f      	b.n	8001ad0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a70:	f7ff fdd2 	bl	8001618 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d928      	bls.n	8001ad0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2203      	movs	r2, #3
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e246      	b.n	8001f1e <HAL_DMA_Init+0x646>
 8001a90:	40020010 	.word	0x40020010
 8001a94:	40020028 	.word	0x40020028
 8001a98:	40020040 	.word	0x40020040
 8001a9c:	40020058 	.word	0x40020058
 8001aa0:	40020070 	.word	0x40020070
 8001aa4:	40020088 	.word	0x40020088
 8001aa8:	400200a0 	.word	0x400200a0
 8001aac:	400200b8 	.word	0x400200b8
 8001ab0:	40020410 	.word	0x40020410
 8001ab4:	40020428 	.word	0x40020428
 8001ab8:	40020440 	.word	0x40020440
 8001abc:	40020458 	.word	0x40020458
 8001ac0:	40020470 	.word	0x40020470
 8001ac4:	40020488 	.word	0x40020488
 8001ac8:	400204a0 	.word	0x400204a0
 8001acc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1c8      	bne.n	8001a70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4b83      	ldr	r3, [pc, #524]	@ (8001cf8 <HAL_DMA_Init+0x420>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001af6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d107      	bne.n	8001b34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b34:	4b71      	ldr	r3, [pc, #452]	@ (8001cfc <HAL_DMA_Init+0x424>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b71      	ldr	r3, [pc, #452]	@ (8001d00 <HAL_DMA_Init+0x428>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b40:	d328      	bcc.n	8001b94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b28      	cmp	r3, #40	@ 0x28
 8001b48:	d903      	bls.n	8001b52 <HAL_DMA_Init+0x27a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b50:	d917      	bls.n	8001b82 <HAL_DMA_Init+0x2aa>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b58:	d903      	bls.n	8001b62 <HAL_DMA_Init+0x28a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b42      	cmp	r3, #66	@ 0x42
 8001b60:	d90f      	bls.n	8001b82 <HAL_DMA_Init+0x2aa>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b46      	cmp	r3, #70	@ 0x46
 8001b68:	d903      	bls.n	8001b72 <HAL_DMA_Init+0x29a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b48      	cmp	r3, #72	@ 0x48
 8001b70:	d907      	bls.n	8001b82 <HAL_DMA_Init+0x2aa>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b4e      	cmp	r3, #78	@ 0x4e
 8001b78:	d905      	bls.n	8001b86 <HAL_DMA_Init+0x2ae>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b52      	cmp	r3, #82	@ 0x52
 8001b80:	d801      	bhi.n	8001b86 <HAL_DMA_Init+0x2ae>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_DMA_Init+0x2b0>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0307 	bic.w	r3, r3, #7
 8001baa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d117      	bne.n	8001bee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f002 fb33 	bl	800423c <DMA_CheckFifoParam>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	@ 0x40
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e197      	b.n	8001f1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f002 fa6e 	bl	80040d8 <DMA_CalcBaseAndBitshift>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	223f      	movs	r2, #63	@ 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	e0cd      	b.n	8001dae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a3b      	ldr	r2, [pc, #236]	@ (8001d04 <HAL_DMA_Init+0x42c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_Init+0x38a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a39      	ldr	r2, [pc, #228]	@ (8001d08 <HAL_DMA_Init+0x430>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01d      	beq.n	8001c62 <HAL_DMA_Init+0x38a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a38      	ldr	r2, [pc, #224]	@ (8001d0c <HAL_DMA_Init+0x434>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_Init+0x38a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <HAL_DMA_Init+0x438>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_DMA_Init+0x38a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a35      	ldr	r2, [pc, #212]	@ (8001d14 <HAL_DMA_Init+0x43c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Init+0x38a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a33      	ldr	r2, [pc, #204]	@ (8001d18 <HAL_DMA_Init+0x440>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d009      	beq.n	8001c62 <HAL_DMA_Init+0x38a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a32      	ldr	r2, [pc, #200]	@ (8001d1c <HAL_DMA_Init+0x444>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_Init+0x38a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a30      	ldr	r2, [pc, #192]	@ (8001d20 <HAL_DMA_Init+0x448>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_Init+0x38e>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_DMA_Init+0x390>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a24      	ldr	r2, [pc, #144]	@ (8001d04 <HAL_DMA_Init+0x42c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d021      	beq.n	8001cbc <HAL_DMA_Init+0x3e4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <HAL_DMA_Init+0x430>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01c      	beq.n	8001cbc <HAL_DMA_Init+0x3e4>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a21      	ldr	r2, [pc, #132]	@ (8001d0c <HAL_DMA_Init+0x434>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d017      	beq.n	8001cbc <HAL_DMA_Init+0x3e4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	@ (8001d10 <HAL_DMA_Init+0x438>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d012      	beq.n	8001cbc <HAL_DMA_Init+0x3e4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d14 <HAL_DMA_Init+0x43c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_DMA_Init+0x3e4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <HAL_DMA_Init+0x440>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d008      	beq.n	8001cbc <HAL_DMA_Init+0x3e4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <HAL_DMA_Init+0x444>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d003      	beq.n	8001cbc <HAL_DMA_Init+0x3e4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <HAL_DMA_Init+0x448>)
 8001cba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <HAL_DMA_Init+0x44c>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b40      	cmp	r3, #64	@ 0x40
 8001ce2:	d021      	beq.n	8001d28 <HAL_DMA_Init+0x450>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b80      	cmp	r3, #128	@ 0x80
 8001cea:	d102      	bne.n	8001cf2 <HAL_DMA_Init+0x41a>
 8001cec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cf0:	e01b      	b.n	8001d2a <HAL_DMA_Init+0x452>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e019      	b.n	8001d2a <HAL_DMA_Init+0x452>
 8001cf6:	bf00      	nop
 8001cf8:	fe10803f 	.word	0xfe10803f
 8001cfc:	5c001000 	.word	0x5c001000
 8001d00:	ffff0000 	.word	0xffff0000
 8001d04:	58025408 	.word	0x58025408
 8001d08:	5802541c 	.word	0x5802541c
 8001d0c:	58025430 	.word	0x58025430
 8001d10:	58025444 	.word	0x58025444
 8001d14:	58025458 	.word	0x58025458
 8001d18:	5802546c 	.word	0x5802546c
 8001d1c:	58025480 	.word	0x58025480
 8001d20:	58025494 	.word	0x58025494
 8001d24:	fffe000f 	.word	0xfffe000f
 8001d28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68d2      	ldr	r2, [r2, #12]
 8001d2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f28 <HAL_DMA_Init+0x650>)
 8001d70:	4413      	add	r3, r2
 8001d72:	4a6e      	ldr	r2, [pc, #440]	@ (8001f2c <HAL_DMA_Init+0x654>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	009a      	lsls	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f002 f9a9 	bl	80040d8 <DMA_CalcBaseAndBitshift>
 8001d86:	4603      	mov	r3, r0
 8001d88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	2201      	movs	r2, #1
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e008      	b.n	8001dae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2240      	movs	r2, #64	@ 0x40
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0b7      	b.n	8001f1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f30 <HAL_DMA_Init+0x658>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d072      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f34 <HAL_DMA_Init+0x65c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d06d      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f38 <HAL_DMA_Init+0x660>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d068      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f3c <HAL_DMA_Init+0x664>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d063      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a59      	ldr	r2, [pc, #356]	@ (8001f40 <HAL_DMA_Init+0x668>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d05e      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a57      	ldr	r2, [pc, #348]	@ (8001f44 <HAL_DMA_Init+0x66c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d059      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a56      	ldr	r2, [pc, #344]	@ (8001f48 <HAL_DMA_Init+0x670>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d054      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a54      	ldr	r2, [pc, #336]	@ (8001f4c <HAL_DMA_Init+0x674>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d04f      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a53      	ldr	r2, [pc, #332]	@ (8001f50 <HAL_DMA_Init+0x678>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d04a      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a51      	ldr	r2, [pc, #324]	@ (8001f54 <HAL_DMA_Init+0x67c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d045      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a50      	ldr	r2, [pc, #320]	@ (8001f58 <HAL_DMA_Init+0x680>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d040      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a4e      	ldr	r2, [pc, #312]	@ (8001f5c <HAL_DMA_Init+0x684>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d03b      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f60 <HAL_DMA_Init+0x688>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d036      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a4b      	ldr	r2, [pc, #300]	@ (8001f64 <HAL_DMA_Init+0x68c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d031      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f68 <HAL_DMA_Init+0x690>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d02c      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a48      	ldr	r2, [pc, #288]	@ (8001f6c <HAL_DMA_Init+0x694>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d027      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a47      	ldr	r2, [pc, #284]	@ (8001f70 <HAL_DMA_Init+0x698>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a45      	ldr	r2, [pc, #276]	@ (8001f74 <HAL_DMA_Init+0x69c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a44      	ldr	r2, [pc, #272]	@ (8001f78 <HAL_DMA_Init+0x6a0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d018      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a42      	ldr	r2, [pc, #264]	@ (8001f7c <HAL_DMA_Init+0x6a4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a41      	ldr	r2, [pc, #260]	@ (8001f80 <HAL_DMA_Init+0x6a8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00e      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a3f      	ldr	r2, [pc, #252]	@ (8001f84 <HAL_DMA_Init+0x6ac>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f88 <HAL_DMA_Init+0x6b0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d004      	beq.n	8001e9e <HAL_DMA_Init+0x5c6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a3c      	ldr	r2, [pc, #240]	@ (8001f8c <HAL_DMA_Init+0x6b4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DMA_Init+0x5ca>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_DMA_Init+0x5cc>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d032      	beq.n	8001f0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f002 fa43 	bl	8004334 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b80      	cmp	r3, #128	@ 0x80
 8001eb4:	d102      	bne.n	8001ebc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ed0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d010      	beq.n	8001efc <HAL_DMA_Init+0x624>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d80c      	bhi.n	8001efc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f002 fac0 	bl	8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	e008      	b.n	8001f0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	a7fdabf8 	.word	0xa7fdabf8
 8001f2c:	cccccccd 	.word	0xcccccccd
 8001f30:	40020010 	.word	0x40020010
 8001f34:	40020028 	.word	0x40020028
 8001f38:	40020040 	.word	0x40020040
 8001f3c:	40020058 	.word	0x40020058
 8001f40:	40020070 	.word	0x40020070
 8001f44:	40020088 	.word	0x40020088
 8001f48:	400200a0 	.word	0x400200a0
 8001f4c:	400200b8 	.word	0x400200b8
 8001f50:	40020410 	.word	0x40020410
 8001f54:	40020428 	.word	0x40020428
 8001f58:	40020440 	.word	0x40020440
 8001f5c:	40020458 	.word	0x40020458
 8001f60:	40020470 	.word	0x40020470
 8001f64:	40020488 	.word	0x40020488
 8001f68:	400204a0 	.word	0x400204a0
 8001f6c:	400204b8 	.word	0x400204b8
 8001f70:	58025408 	.word	0x58025408
 8001f74:	5802541c 	.word	0x5802541c
 8001f78:	58025430 	.word	0x58025430
 8001f7c:	58025444 	.word	0x58025444
 8001f80:	58025458 	.word	0x58025458
 8001f84:	5802546c 	.word	0x5802546c
 8001f88:	58025480 	.word	0x58025480
 8001f8c:	58025494 	.word	0x58025494

08001f90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e226      	b.n	80023fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_Start_IT+0x2a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e21f      	b.n	80023fa <HAL_DMA_Start_IT+0x46a>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	f040 820a 	bne.w	80023e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a68      	ldr	r2, [pc, #416]	@ (8002184 <HAL_DMA_Start_IT+0x1f4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d04a      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a66      	ldr	r2, [pc, #408]	@ (8002188 <HAL_DMA_Start_IT+0x1f8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d045      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_DMA_Start_IT+0x1fc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d040      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a63      	ldr	r2, [pc, #396]	@ (8002190 <HAL_DMA_Start_IT+0x200>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d03b      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a62      	ldr	r2, [pc, #392]	@ (8002194 <HAL_DMA_Start_IT+0x204>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d036      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a60      	ldr	r2, [pc, #384]	@ (8002198 <HAL_DMA_Start_IT+0x208>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d031      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a5f      	ldr	r2, [pc, #380]	@ (800219c <HAL_DMA_Start_IT+0x20c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d02c      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5d      	ldr	r2, [pc, #372]	@ (80021a0 <HAL_DMA_Start_IT+0x210>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d027      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5c      	ldr	r2, [pc, #368]	@ (80021a4 <HAL_DMA_Start_IT+0x214>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5a      	ldr	r2, [pc, #360]	@ (80021a8 <HAL_DMA_Start_IT+0x218>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01d      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a59      	ldr	r2, [pc, #356]	@ (80021ac <HAL_DMA_Start_IT+0x21c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d018      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a57      	ldr	r2, [pc, #348]	@ (80021b0 <HAL_DMA_Start_IT+0x220>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a56      	ldr	r2, [pc, #344]	@ (80021b4 <HAL_DMA_Start_IT+0x224>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00e      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a54      	ldr	r2, [pc, #336]	@ (80021b8 <HAL_DMA_Start_IT+0x228>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a53      	ldr	r2, [pc, #332]	@ (80021bc <HAL_DMA_Start_IT+0x22c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_DMA_Start_IT+0xee>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a51      	ldr	r2, [pc, #324]	@ (80021c0 <HAL_DMA_Start_IT+0x230>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d108      	bne.n	8002090 <HAL_DMA_Start_IT+0x100>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e007      	b.n	80020a0 <HAL_DMA_Start_IT+0x110>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f001 fe6a 	bl	8003d80 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a34      	ldr	r2, [pc, #208]	@ (8002184 <HAL_DMA_Start_IT+0x1f4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d04a      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a33      	ldr	r2, [pc, #204]	@ (8002188 <HAL_DMA_Start_IT+0x1f8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d045      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a31      	ldr	r2, [pc, #196]	@ (800218c <HAL_DMA_Start_IT+0x1fc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d040      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a30      	ldr	r2, [pc, #192]	@ (8002190 <HAL_DMA_Start_IT+0x200>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d03b      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002194 <HAL_DMA_Start_IT+0x204>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d036      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002198 <HAL_DMA_Start_IT+0x208>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d031      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	@ (800219c <HAL_DMA_Start_IT+0x20c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02c      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2a      	ldr	r2, [pc, #168]	@ (80021a0 <HAL_DMA_Start_IT+0x210>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d027      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a28      	ldr	r2, [pc, #160]	@ (80021a4 <HAL_DMA_Start_IT+0x214>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d022      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a27      	ldr	r2, [pc, #156]	@ (80021a8 <HAL_DMA_Start_IT+0x218>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d01d      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a25      	ldr	r2, [pc, #148]	@ (80021ac <HAL_DMA_Start_IT+0x21c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d018      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <HAL_DMA_Start_IT+0x220>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a22      	ldr	r2, [pc, #136]	@ (80021b4 <HAL_DMA_Start_IT+0x224>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00e      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a21      	ldr	r2, [pc, #132]	@ (80021b8 <HAL_DMA_Start_IT+0x228>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d009      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1f      	ldr	r2, [pc, #124]	@ (80021bc <HAL_DMA_Start_IT+0x22c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d004      	beq.n	800214c <HAL_DMA_Start_IT+0x1bc>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1e      	ldr	r2, [pc, #120]	@ (80021c0 <HAL_DMA_Start_IT+0x230>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_DMA_Start_IT+0x1c0>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_DMA_Start_IT+0x1c2>
 8002150:	2300      	movs	r3, #0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d036      	beq.n	80021c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 021e 	bic.w	r2, r3, #30
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0216 	orr.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03e      	beq.n	80021f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0208 	orr.w	r2, r2, #8
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e035      	b.n	80021f0 <HAL_DMA_Start_IT+0x260>
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 020e 	bic.w	r2, r3, #14
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 020a 	orr.w	r2, r2, #10
 80021d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0204 	orr.w	r2, r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a83      	ldr	r2, [pc, #524]	@ (8002404 <HAL_DMA_Start_IT+0x474>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d072      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a82      	ldr	r2, [pc, #520]	@ (8002408 <HAL_DMA_Start_IT+0x478>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d06d      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a80      	ldr	r2, [pc, #512]	@ (800240c <HAL_DMA_Start_IT+0x47c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d068      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7f      	ldr	r2, [pc, #508]	@ (8002410 <HAL_DMA_Start_IT+0x480>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d063      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a7d      	ldr	r2, [pc, #500]	@ (8002414 <HAL_DMA_Start_IT+0x484>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d05e      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7c      	ldr	r2, [pc, #496]	@ (8002418 <HAL_DMA_Start_IT+0x488>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d059      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a7a      	ldr	r2, [pc, #488]	@ (800241c <HAL_DMA_Start_IT+0x48c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d054      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a79      	ldr	r2, [pc, #484]	@ (8002420 <HAL_DMA_Start_IT+0x490>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04f      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a77      	ldr	r2, [pc, #476]	@ (8002424 <HAL_DMA_Start_IT+0x494>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04a      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a76      	ldr	r2, [pc, #472]	@ (8002428 <HAL_DMA_Start_IT+0x498>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d045      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a74      	ldr	r2, [pc, #464]	@ (800242c <HAL_DMA_Start_IT+0x49c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d040      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a73      	ldr	r2, [pc, #460]	@ (8002430 <HAL_DMA_Start_IT+0x4a0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d03b      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a71      	ldr	r2, [pc, #452]	@ (8002434 <HAL_DMA_Start_IT+0x4a4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d036      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a70      	ldr	r2, [pc, #448]	@ (8002438 <HAL_DMA_Start_IT+0x4a8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d031      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6e      	ldr	r2, [pc, #440]	@ (800243c <HAL_DMA_Start_IT+0x4ac>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02c      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6d      	ldr	r2, [pc, #436]	@ (8002440 <HAL_DMA_Start_IT+0x4b0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d027      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6b      	ldr	r2, [pc, #428]	@ (8002444 <HAL_DMA_Start_IT+0x4b4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d022      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6a      	ldr	r2, [pc, #424]	@ (8002448 <HAL_DMA_Start_IT+0x4b8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d01d      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a68      	ldr	r2, [pc, #416]	@ (800244c <HAL_DMA_Start_IT+0x4bc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d018      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a67      	ldr	r2, [pc, #412]	@ (8002450 <HAL_DMA_Start_IT+0x4c0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a65      	ldr	r2, [pc, #404]	@ (8002454 <HAL_DMA_Start_IT+0x4c4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00e      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a64      	ldr	r2, [pc, #400]	@ (8002458 <HAL_DMA_Start_IT+0x4c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a62      	ldr	r2, [pc, #392]	@ (800245c <HAL_DMA_Start_IT+0x4cc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_DMA_Start_IT+0x350>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a61      	ldr	r2, [pc, #388]	@ (8002460 <HAL_DMA_Start_IT+0x4d0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Start_IT+0x354>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_DMA_Start_IT+0x356>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01a      	beq.n	8002320 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002306:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800231a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800231e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a37      	ldr	r2, [pc, #220]	@ (8002404 <HAL_DMA_Start_IT+0x474>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04a      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a36      	ldr	r2, [pc, #216]	@ (8002408 <HAL_DMA_Start_IT+0x478>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d045      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a34      	ldr	r2, [pc, #208]	@ (800240c <HAL_DMA_Start_IT+0x47c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d040      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <HAL_DMA_Start_IT+0x480>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d03b      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a31      	ldr	r2, [pc, #196]	@ (8002414 <HAL_DMA_Start_IT+0x484>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a30      	ldr	r2, [pc, #192]	@ (8002418 <HAL_DMA_Start_IT+0x488>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d031      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2e      	ldr	r2, [pc, #184]	@ (800241c <HAL_DMA_Start_IT+0x48c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02c      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2d      	ldr	r2, [pc, #180]	@ (8002420 <HAL_DMA_Start_IT+0x490>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d027      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2b      	ldr	r2, [pc, #172]	@ (8002424 <HAL_DMA_Start_IT+0x494>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d022      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a2a      	ldr	r2, [pc, #168]	@ (8002428 <HAL_DMA_Start_IT+0x498>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d01d      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a28      	ldr	r2, [pc, #160]	@ (800242c <HAL_DMA_Start_IT+0x49c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d018      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a27      	ldr	r2, [pc, #156]	@ (8002430 <HAL_DMA_Start_IT+0x4a0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a25      	ldr	r2, [pc, #148]	@ (8002434 <HAL_DMA_Start_IT+0x4a4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a24      	ldr	r2, [pc, #144]	@ (8002438 <HAL_DMA_Start_IT+0x4a8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a22      	ldr	r2, [pc, #136]	@ (800243c <HAL_DMA_Start_IT+0x4ac>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_DMA_Start_IT+0x430>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <HAL_DMA_Start_IT+0x4b0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d108      	bne.n	80023d2 <HAL_DMA_Start_IT+0x442>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e012      	b.n	80023f8 <HAL_DMA_Start_IT+0x468>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e009      	b.n	80023f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020010 	.word	0x40020010
 8002408:	40020028 	.word	0x40020028
 800240c:	40020040 	.word	0x40020040
 8002410:	40020058 	.word	0x40020058
 8002414:	40020070 	.word	0x40020070
 8002418:	40020088 	.word	0x40020088
 800241c:	400200a0 	.word	0x400200a0
 8002420:	400200b8 	.word	0x400200b8
 8002424:	40020410 	.word	0x40020410
 8002428:	40020428 	.word	0x40020428
 800242c:	40020440 	.word	0x40020440
 8002430:	40020458 	.word	0x40020458
 8002434:	40020470 	.word	0x40020470
 8002438:	40020488 	.word	0x40020488
 800243c:	400204a0 	.word	0x400204a0
 8002440:	400204b8 	.word	0x400204b8
 8002444:	58025408 	.word	0x58025408
 8002448:	5802541c 	.word	0x5802541c
 800244c:	58025430 	.word	0x58025430
 8002450:	58025444 	.word	0x58025444
 8002454:	58025458 	.word	0x58025458
 8002458:	5802546c 	.word	0x5802546c
 800245c:	58025480 	.word	0x58025480
 8002460:	58025494 	.word	0x58025494

08002464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff f8d4 	bl	8001618 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e2dc      	b.n	8002a36 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d008      	beq.n	800249a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2280      	movs	r2, #128	@ 0x80
 800248c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e2cd      	b.n	8002a36 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a76      	ldr	r2, [pc, #472]	@ (8002678 <HAL_DMA_Abort+0x214>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d04a      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a74      	ldr	r2, [pc, #464]	@ (800267c <HAL_DMA_Abort+0x218>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d045      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a73      	ldr	r2, [pc, #460]	@ (8002680 <HAL_DMA_Abort+0x21c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d040      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a71      	ldr	r2, [pc, #452]	@ (8002684 <HAL_DMA_Abort+0x220>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d03b      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a70      	ldr	r2, [pc, #448]	@ (8002688 <HAL_DMA_Abort+0x224>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d036      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6e      	ldr	r2, [pc, #440]	@ (800268c <HAL_DMA_Abort+0x228>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d031      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6d      	ldr	r2, [pc, #436]	@ (8002690 <HAL_DMA_Abort+0x22c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d02c      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002694 <HAL_DMA_Abort+0x230>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d027      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6a      	ldr	r2, [pc, #424]	@ (8002698 <HAL_DMA_Abort+0x234>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a68      	ldr	r2, [pc, #416]	@ (800269c <HAL_DMA_Abort+0x238>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01d      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a67      	ldr	r2, [pc, #412]	@ (80026a0 <HAL_DMA_Abort+0x23c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d018      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a65      	ldr	r2, [pc, #404]	@ (80026a4 <HAL_DMA_Abort+0x240>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a64      	ldr	r2, [pc, #400]	@ (80026a8 <HAL_DMA_Abort+0x244>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00e      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a62      	ldr	r2, [pc, #392]	@ (80026ac <HAL_DMA_Abort+0x248>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a61      	ldr	r2, [pc, #388]	@ (80026b0 <HAL_DMA_Abort+0x24c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_DMA_Abort+0xd6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5f      	ldr	r2, [pc, #380]	@ (80026b4 <HAL_DMA_Abort+0x250>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_DMA_Abort+0xda>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_DMA_Abort+0xdc>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 021e 	bic.w	r2, r2, #30
 8002552:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002562:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e00a      	b.n	8002582 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020e 	bic.w	r2, r2, #14
 800257a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a3c      	ldr	r2, [pc, #240]	@ (8002678 <HAL_DMA_Abort+0x214>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d072      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a3a      	ldr	r2, [pc, #232]	@ (800267c <HAL_DMA_Abort+0x218>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d06d      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a39      	ldr	r2, [pc, #228]	@ (8002680 <HAL_DMA_Abort+0x21c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d068      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a37      	ldr	r2, [pc, #220]	@ (8002684 <HAL_DMA_Abort+0x220>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d063      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a36      	ldr	r2, [pc, #216]	@ (8002688 <HAL_DMA_Abort+0x224>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d05e      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a34      	ldr	r2, [pc, #208]	@ (800268c <HAL_DMA_Abort+0x228>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d059      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a33      	ldr	r2, [pc, #204]	@ (8002690 <HAL_DMA_Abort+0x22c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d054      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a31      	ldr	r2, [pc, #196]	@ (8002694 <HAL_DMA_Abort+0x230>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d04f      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a30      	ldr	r2, [pc, #192]	@ (8002698 <HAL_DMA_Abort+0x234>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04a      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2e      	ldr	r2, [pc, #184]	@ (800269c <HAL_DMA_Abort+0x238>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d045      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2d      	ldr	r2, [pc, #180]	@ (80026a0 <HAL_DMA_Abort+0x23c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d040      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <HAL_DMA_Abort+0x240>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d03b      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2a      	ldr	r2, [pc, #168]	@ (80026a8 <HAL_DMA_Abort+0x244>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d036      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a28      	ldr	r2, [pc, #160]	@ (80026ac <HAL_DMA_Abort+0x248>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d031      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a27      	ldr	r2, [pc, #156]	@ (80026b0 <HAL_DMA_Abort+0x24c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d02c      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a25      	ldr	r2, [pc, #148]	@ (80026b4 <HAL_DMA_Abort+0x250>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d027      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a24      	ldr	r2, [pc, #144]	@ (80026b8 <HAL_DMA_Abort+0x254>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a22      	ldr	r2, [pc, #136]	@ (80026bc <HAL_DMA_Abort+0x258>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01d      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <HAL_DMA_Abort+0x25c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d018      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1f      	ldr	r2, [pc, #124]	@ (80026c4 <HAL_DMA_Abort+0x260>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <HAL_DMA_Abort+0x264>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_DMA_Abort+0x268>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	@ (80026d0 <HAL_DMA_Abort+0x26c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_DMA_Abort+0x20e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	@ (80026d4 <HAL_DMA_Abort+0x270>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d132      	bne.n	80026d8 <HAL_DMA_Abort+0x274>
 8002672:	2301      	movs	r3, #1
 8002674:	e031      	b.n	80026da <HAL_DMA_Abort+0x276>
 8002676:	bf00      	nop
 8002678:	40020010 	.word	0x40020010
 800267c:	40020028 	.word	0x40020028
 8002680:	40020040 	.word	0x40020040
 8002684:	40020058 	.word	0x40020058
 8002688:	40020070 	.word	0x40020070
 800268c:	40020088 	.word	0x40020088
 8002690:	400200a0 	.word	0x400200a0
 8002694:	400200b8 	.word	0x400200b8
 8002698:	40020410 	.word	0x40020410
 800269c:	40020428 	.word	0x40020428
 80026a0:	40020440 	.word	0x40020440
 80026a4:	40020458 	.word	0x40020458
 80026a8:	40020470 	.word	0x40020470
 80026ac:	40020488 	.word	0x40020488
 80026b0:	400204a0 	.word	0x400204a0
 80026b4:	400204b8 	.word	0x400204b8
 80026b8:	58025408 	.word	0x58025408
 80026bc:	5802541c 	.word	0x5802541c
 80026c0:	58025430 	.word	0x58025430
 80026c4:	58025444 	.word	0x58025444
 80026c8:	58025458 	.word	0x58025458
 80026cc:	5802546c 	.word	0x5802546c
 80026d0:	58025480 	.word	0x58025480
 80026d4:	58025494 	.word	0x58025494
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6d      	ldr	r2, [pc, #436]	@ (80028a8 <HAL_DMA_Abort+0x444>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04a      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6b      	ldr	r2, [pc, #428]	@ (80028ac <HAL_DMA_Abort+0x448>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d045      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6a      	ldr	r2, [pc, #424]	@ (80028b0 <HAL_DMA_Abort+0x44c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d040      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a68      	ldr	r2, [pc, #416]	@ (80028b4 <HAL_DMA_Abort+0x450>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d03b      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a67      	ldr	r2, [pc, #412]	@ (80028b8 <HAL_DMA_Abort+0x454>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d036      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a65      	ldr	r2, [pc, #404]	@ (80028bc <HAL_DMA_Abort+0x458>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a64      	ldr	r2, [pc, #400]	@ (80028c0 <HAL_DMA_Abort+0x45c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d02c      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a62      	ldr	r2, [pc, #392]	@ (80028c4 <HAL_DMA_Abort+0x460>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a61      	ldr	r2, [pc, #388]	@ (80028c8 <HAL_DMA_Abort+0x464>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a5f      	ldr	r2, [pc, #380]	@ (80028cc <HAL_DMA_Abort+0x468>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a5e      	ldr	r2, [pc, #376]	@ (80028d0 <HAL_DMA_Abort+0x46c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a5c      	ldr	r2, [pc, #368]	@ (80028d4 <HAL_DMA_Abort+0x470>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5b      	ldr	r2, [pc, #364]	@ (80028d8 <HAL_DMA_Abort+0x474>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a59      	ldr	r2, [pc, #356]	@ (80028dc <HAL_DMA_Abort+0x478>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a58      	ldr	r2, [pc, #352]	@ (80028e0 <HAL_DMA_Abort+0x47c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_DMA_Abort+0x32a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a56      	ldr	r2, [pc, #344]	@ (80028e4 <HAL_DMA_Abort+0x480>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <HAL_DMA_Abort+0x33c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e007      	b.n	80027b0 <HAL_DMA_Abort+0x34c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027b0:	e013      	b.n	80027da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b2:	f7fe ff31 	bl	8001618 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d90c      	bls.n	80027da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e12d      	b.n	8002a36 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1e5      	bne.n	80027b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2f      	ldr	r2, [pc, #188]	@ (80028a8 <HAL_DMA_Abort+0x444>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d04a      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2d      	ldr	r2, [pc, #180]	@ (80028ac <HAL_DMA_Abort+0x448>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d045      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2c      	ldr	r2, [pc, #176]	@ (80028b0 <HAL_DMA_Abort+0x44c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d040      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2a      	ldr	r2, [pc, #168]	@ (80028b4 <HAL_DMA_Abort+0x450>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d03b      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a29      	ldr	r2, [pc, #164]	@ (80028b8 <HAL_DMA_Abort+0x454>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d036      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a27      	ldr	r2, [pc, #156]	@ (80028bc <HAL_DMA_Abort+0x458>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d031      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a26      	ldr	r2, [pc, #152]	@ (80028c0 <HAL_DMA_Abort+0x45c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d02c      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a24      	ldr	r2, [pc, #144]	@ (80028c4 <HAL_DMA_Abort+0x460>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d027      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a23      	ldr	r2, [pc, #140]	@ (80028c8 <HAL_DMA_Abort+0x464>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a21      	ldr	r2, [pc, #132]	@ (80028cc <HAL_DMA_Abort+0x468>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a20      	ldr	r2, [pc, #128]	@ (80028d0 <HAL_DMA_Abort+0x46c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d018      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1e      	ldr	r2, [pc, #120]	@ (80028d4 <HAL_DMA_Abort+0x470>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <HAL_DMA_Abort+0x474>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00e      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1b      	ldr	r2, [pc, #108]	@ (80028dc <HAL_DMA_Abort+0x478>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1a      	ldr	r2, [pc, #104]	@ (80028e0 <HAL_DMA_Abort+0x47c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_DMA_Abort+0x422>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a18      	ldr	r2, [pc, #96]	@ (80028e4 <HAL_DMA_Abort+0x480>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_DMA_Abort+0x426>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_DMA_Abort+0x428>
 800288a:	2300      	movs	r3, #0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d02b      	beq.n	80028e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	223f      	movs	r2, #63	@ 0x3f
 80028a0:	409a      	lsls	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	e02a      	b.n	80028fe <HAL_DMA_Abort+0x49a>
 80028a8:	40020010 	.word	0x40020010
 80028ac:	40020028 	.word	0x40020028
 80028b0:	40020040 	.word	0x40020040
 80028b4:	40020058 	.word	0x40020058
 80028b8:	40020070 	.word	0x40020070
 80028bc:	40020088 	.word	0x40020088
 80028c0:	400200a0 	.word	0x400200a0
 80028c4:	400200b8 	.word	0x400200b8
 80028c8:	40020410 	.word	0x40020410
 80028cc:	40020428 	.word	0x40020428
 80028d0:	40020440 	.word	0x40020440
 80028d4:	40020458 	.word	0x40020458
 80028d8:	40020470 	.word	0x40020470
 80028dc:	40020488 	.word	0x40020488
 80028e0:	400204a0 	.word	0x400204a0
 80028e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2201      	movs	r2, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a4f      	ldr	r2, [pc, #316]	@ (8002a40 <HAL_DMA_Abort+0x5dc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d072      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a44 <HAL_DMA_Abort+0x5e0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d06d      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a4c      	ldr	r2, [pc, #304]	@ (8002a48 <HAL_DMA_Abort+0x5e4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d068      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4a      	ldr	r2, [pc, #296]	@ (8002a4c <HAL_DMA_Abort+0x5e8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d063      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a49      	ldr	r2, [pc, #292]	@ (8002a50 <HAL_DMA_Abort+0x5ec>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d05e      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a47      	ldr	r2, [pc, #284]	@ (8002a54 <HAL_DMA_Abort+0x5f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d059      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a46      	ldr	r2, [pc, #280]	@ (8002a58 <HAL_DMA_Abort+0x5f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d054      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a44      	ldr	r2, [pc, #272]	@ (8002a5c <HAL_DMA_Abort+0x5f8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d04f      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a43      	ldr	r2, [pc, #268]	@ (8002a60 <HAL_DMA_Abort+0x5fc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d04a      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a41      	ldr	r2, [pc, #260]	@ (8002a64 <HAL_DMA_Abort+0x600>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d045      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a40      	ldr	r2, [pc, #256]	@ (8002a68 <HAL_DMA_Abort+0x604>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d040      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a3e      	ldr	r2, [pc, #248]	@ (8002a6c <HAL_DMA_Abort+0x608>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d03b      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a70 <HAL_DMA_Abort+0x60c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d036      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3b      	ldr	r2, [pc, #236]	@ (8002a74 <HAL_DMA_Abort+0x610>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d031      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a78 <HAL_DMA_Abort+0x614>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d02c      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a38      	ldr	r2, [pc, #224]	@ (8002a7c <HAL_DMA_Abort+0x618>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d027      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a37      	ldr	r2, [pc, #220]	@ (8002a80 <HAL_DMA_Abort+0x61c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a35      	ldr	r2, [pc, #212]	@ (8002a84 <HAL_DMA_Abort+0x620>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01d      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a34      	ldr	r2, [pc, #208]	@ (8002a88 <HAL_DMA_Abort+0x624>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d018      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a32      	ldr	r2, [pc, #200]	@ (8002a8c <HAL_DMA_Abort+0x628>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a31      	ldr	r2, [pc, #196]	@ (8002a90 <HAL_DMA_Abort+0x62c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a94 <HAL_DMA_Abort+0x630>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d009      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2e      	ldr	r2, [pc, #184]	@ (8002a98 <HAL_DMA_Abort+0x634>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_DMA_Abort+0x58a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a9c <HAL_DMA_Abort+0x638>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_DMA_Abort+0x58e>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_DMA_Abort+0x590>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a00:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00c      	beq.n	8002a24 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a18:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a22:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40020010 	.word	0x40020010
 8002a44:	40020028 	.word	0x40020028
 8002a48:	40020040 	.word	0x40020040
 8002a4c:	40020058 	.word	0x40020058
 8002a50:	40020070 	.word	0x40020070
 8002a54:	40020088 	.word	0x40020088
 8002a58:	400200a0 	.word	0x400200a0
 8002a5c:	400200b8 	.word	0x400200b8
 8002a60:	40020410 	.word	0x40020410
 8002a64:	40020428 	.word	0x40020428
 8002a68:	40020440 	.word	0x40020440
 8002a6c:	40020458 	.word	0x40020458
 8002a70:	40020470 	.word	0x40020470
 8002a74:	40020488 	.word	0x40020488
 8002a78:	400204a0 	.word	0x400204a0
 8002a7c:	400204b8 	.word	0x400204b8
 8002a80:	58025408 	.word	0x58025408
 8002a84:	5802541c 	.word	0x5802541c
 8002a88:	58025430 	.word	0x58025430
 8002a8c:	58025444 	.word	0x58025444
 8002a90:	58025458 	.word	0x58025458
 8002a94:	5802546c 	.word	0x5802546c
 8002a98:	58025480 	.word	0x58025480
 8002a9c:	58025494 	.word	0x58025494

08002aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e237      	b.n	8002f22 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d004      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2280      	movs	r2, #128	@ 0x80
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e22c      	b.n	8002f22 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5c      	ldr	r2, [pc, #368]	@ (8002c40 <HAL_DMA_Abort_IT+0x1a0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d04a      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c44 <HAL_DMA_Abort_IT+0x1a4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d045      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a59      	ldr	r2, [pc, #356]	@ (8002c48 <HAL_DMA_Abort_IT+0x1a8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d040      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_DMA_Abort_IT+0x1ac>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d03b      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a56      	ldr	r2, [pc, #344]	@ (8002c50 <HAL_DMA_Abort_IT+0x1b0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d036      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a55      	ldr	r2, [pc, #340]	@ (8002c54 <HAL_DMA_Abort_IT+0x1b4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d031      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a53      	ldr	r2, [pc, #332]	@ (8002c58 <HAL_DMA_Abort_IT+0x1b8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d02c      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a52      	ldr	r2, [pc, #328]	@ (8002c5c <HAL_DMA_Abort_IT+0x1bc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d027      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <HAL_DMA_Abort_IT+0x1c0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d022      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a4f      	ldr	r2, [pc, #316]	@ (8002c64 <HAL_DMA_Abort_IT+0x1c4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d01d      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a4d      	ldr	r2, [pc, #308]	@ (8002c68 <HAL_DMA_Abort_IT+0x1c8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d018      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c6c <HAL_DMA_Abort_IT+0x1cc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_DMA_Abort_IT+0x1d0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00e      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a49      	ldr	r2, [pc, #292]	@ (8002c74 <HAL_DMA_Abort_IT+0x1d4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a47      	ldr	r2, [pc, #284]	@ (8002c78 <HAL_DMA_Abort_IT+0x1d8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a46      	ldr	r2, [pc, #280]	@ (8002c7c <HAL_DMA_Abort_IT+0x1dc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_DMA_Abort_IT+0xcc>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_DMA_Abort_IT+0xce>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8086 	beq.w	8002c80 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2204      	movs	r2, #4
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2f      	ldr	r2, [pc, #188]	@ (8002c40 <HAL_DMA_Abort_IT+0x1a0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d04a      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8002c44 <HAL_DMA_Abort_IT+0x1a4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d045      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2c      	ldr	r2, [pc, #176]	@ (8002c48 <HAL_DMA_Abort_IT+0x1a8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d040      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c4c <HAL_DMA_Abort_IT+0x1ac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d03b      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a29      	ldr	r2, [pc, #164]	@ (8002c50 <HAL_DMA_Abort_IT+0x1b0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d036      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a28      	ldr	r2, [pc, #160]	@ (8002c54 <HAL_DMA_Abort_IT+0x1b4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d031      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a26      	ldr	r2, [pc, #152]	@ (8002c58 <HAL_DMA_Abort_IT+0x1b8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02c      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a25      	ldr	r2, [pc, #148]	@ (8002c5c <HAL_DMA_Abort_IT+0x1bc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d027      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a23      	ldr	r2, [pc, #140]	@ (8002c60 <HAL_DMA_Abort_IT+0x1c0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d022      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a22      	ldr	r2, [pc, #136]	@ (8002c64 <HAL_DMA_Abort_IT+0x1c4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d01d      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a20      	ldr	r2, [pc, #128]	@ (8002c68 <HAL_DMA_Abort_IT+0x1c8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d018      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1f      	ldr	r2, [pc, #124]	@ (8002c6c <HAL_DMA_Abort_IT+0x1cc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_DMA_Abort_IT+0x1d0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00e      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1c      	ldr	r2, [pc, #112]	@ (8002c74 <HAL_DMA_Abort_IT+0x1d4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d009      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c78 <HAL_DMA_Abort_IT+0x1d8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x17c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a19      	ldr	r2, [pc, #100]	@ (8002c7c <HAL_DMA_Abort_IT+0x1dc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <HAL_DMA_Abort_IT+0x18e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e178      	b.n	8002f20 <HAL_DMA_Abort_IT+0x480>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e16f      	b.n	8002f20 <HAL_DMA_Abort_IT+0x480>
 8002c40:	40020010 	.word	0x40020010
 8002c44:	40020028 	.word	0x40020028
 8002c48:	40020040 	.word	0x40020040
 8002c4c:	40020058 	.word	0x40020058
 8002c50:	40020070 	.word	0x40020070
 8002c54:	40020088 	.word	0x40020088
 8002c58:	400200a0 	.word	0x400200a0
 8002c5c:	400200b8 	.word	0x400200b8
 8002c60:	40020410 	.word	0x40020410
 8002c64:	40020428 	.word	0x40020428
 8002c68:	40020440 	.word	0x40020440
 8002c6c:	40020458 	.word	0x40020458
 8002c70:	40020470 	.word	0x40020470
 8002c74:	40020488 	.word	0x40020488
 8002c78:	400204a0 	.word	0x400204a0
 8002c7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 020e 	bic.w	r2, r2, #14
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6c      	ldr	r2, [pc, #432]	@ (8002e48 <HAL_DMA_Abort_IT+0x3a8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d04a      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002e4c <HAL_DMA_Abort_IT+0x3ac>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d045      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a69      	ldr	r2, [pc, #420]	@ (8002e50 <HAL_DMA_Abort_IT+0x3b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d040      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a68      	ldr	r2, [pc, #416]	@ (8002e54 <HAL_DMA_Abort_IT+0x3b4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d03b      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a66      	ldr	r2, [pc, #408]	@ (8002e58 <HAL_DMA_Abort_IT+0x3b8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d036      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a65      	ldr	r2, [pc, #404]	@ (8002e5c <HAL_DMA_Abort_IT+0x3bc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d031      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a63      	ldr	r2, [pc, #396]	@ (8002e60 <HAL_DMA_Abort_IT+0x3c0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02c      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a62      	ldr	r2, [pc, #392]	@ (8002e64 <HAL_DMA_Abort_IT+0x3c4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d027      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a60      	ldr	r2, [pc, #384]	@ (8002e68 <HAL_DMA_Abort_IT+0x3c8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d022      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a5f      	ldr	r2, [pc, #380]	@ (8002e6c <HAL_DMA_Abort_IT+0x3cc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d01d      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e70 <HAL_DMA_Abort_IT+0x3d0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d018      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a5c      	ldr	r2, [pc, #368]	@ (8002e74 <HAL_DMA_Abort_IT+0x3d4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002e78 <HAL_DMA_Abort_IT+0x3d8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a59      	ldr	r2, [pc, #356]	@ (8002e7c <HAL_DMA_Abort_IT+0x3dc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a57      	ldr	r2, [pc, #348]	@ (8002e80 <HAL_DMA_Abort_IT+0x3e0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x290>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a56      	ldr	r2, [pc, #344]	@ (8002e84 <HAL_DMA_Abort_IT+0x3e4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <HAL_DMA_Abort_IT+0x2a2>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e007      	b.n	8002d52 <HAL_DMA_Abort_IT+0x2b2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a3c      	ldr	r2, [pc, #240]	@ (8002e48 <HAL_DMA_Abort_IT+0x3a8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d072      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3a      	ldr	r2, [pc, #232]	@ (8002e4c <HAL_DMA_Abort_IT+0x3ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d06d      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a39      	ldr	r2, [pc, #228]	@ (8002e50 <HAL_DMA_Abort_IT+0x3b0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d068      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a37      	ldr	r2, [pc, #220]	@ (8002e54 <HAL_DMA_Abort_IT+0x3b4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d063      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a36      	ldr	r2, [pc, #216]	@ (8002e58 <HAL_DMA_Abort_IT+0x3b8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d05e      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a34      	ldr	r2, [pc, #208]	@ (8002e5c <HAL_DMA_Abort_IT+0x3bc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d059      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a33      	ldr	r2, [pc, #204]	@ (8002e60 <HAL_DMA_Abort_IT+0x3c0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d054      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a31      	ldr	r2, [pc, #196]	@ (8002e64 <HAL_DMA_Abort_IT+0x3c4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d04f      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a30      	ldr	r2, [pc, #192]	@ (8002e68 <HAL_DMA_Abort_IT+0x3c8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04a      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e6c <HAL_DMA_Abort_IT+0x3cc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d045      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2d      	ldr	r2, [pc, #180]	@ (8002e70 <HAL_DMA_Abort_IT+0x3d0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d040      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e74 <HAL_DMA_Abort_IT+0x3d4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d03b      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2a      	ldr	r2, [pc, #168]	@ (8002e78 <HAL_DMA_Abort_IT+0x3d8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d036      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a28      	ldr	r2, [pc, #160]	@ (8002e7c <HAL_DMA_Abort_IT+0x3dc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a27      	ldr	r2, [pc, #156]	@ (8002e80 <HAL_DMA_Abort_IT+0x3e0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d02c      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a25      	ldr	r2, [pc, #148]	@ (8002e84 <HAL_DMA_Abort_IT+0x3e4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a24      	ldr	r2, [pc, #144]	@ (8002e88 <HAL_DMA_Abort_IT+0x3e8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a22      	ldr	r2, [pc, #136]	@ (8002e8c <HAL_DMA_Abort_IT+0x3ec>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a21      	ldr	r2, [pc, #132]	@ (8002e90 <HAL_DMA_Abort_IT+0x3f0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	@ (8002e94 <HAL_DMA_Abort_IT+0x3f4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e98 <HAL_DMA_Abort_IT+0x3f8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1c      	ldr	r2, [pc, #112]	@ (8002e9c <HAL_DMA_Abort_IT+0x3fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea0 <HAL_DMA_Abort_IT+0x400>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x3a2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_DMA_Abort_IT+0x404>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d132      	bne.n	8002ea8 <HAL_DMA_Abort_IT+0x408>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e031      	b.n	8002eaa <HAL_DMA_Abort_IT+0x40a>
 8002e46:	bf00      	nop
 8002e48:	40020010 	.word	0x40020010
 8002e4c:	40020028 	.word	0x40020028
 8002e50:	40020040 	.word	0x40020040
 8002e54:	40020058 	.word	0x40020058
 8002e58:	40020070 	.word	0x40020070
 8002e5c:	40020088 	.word	0x40020088
 8002e60:	400200a0 	.word	0x400200a0
 8002e64:	400200b8 	.word	0x400200b8
 8002e68:	40020410 	.word	0x40020410
 8002e6c:	40020428 	.word	0x40020428
 8002e70:	40020440 	.word	0x40020440
 8002e74:	40020458 	.word	0x40020458
 8002e78:	40020470 	.word	0x40020470
 8002e7c:	40020488 	.word	0x40020488
 8002e80:	400204a0 	.word	0x400204a0
 8002e84:	400204b8 	.word	0x400204b8
 8002e88:	58025408 	.word	0x58025408
 8002e8c:	5802541c 	.word	0x5802541c
 8002e90:	58025430 	.word	0x58025430
 8002e94:	58025444 	.word	0x58025444
 8002e98:	58025458 	.word	0x58025458
 8002e9c:	5802546c 	.word	0x5802546c
 8002ea0:	58025480 	.word	0x58025480
 8002ea4:	58025494 	.word	0x58025494
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d028      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2201      	movs	r2, #1
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002edc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002efe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop

08002f2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	@ 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f38:	4b67      	ldr	r3, [pc, #412]	@ (80030d8 <HAL_DMA_IRQHandler+0x1ac>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a67      	ldr	r2, [pc, #412]	@ (80030dc <HAL_DMA_IRQHandler+0x1b0>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0a9b      	lsrs	r3, r3, #10
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5f      	ldr	r2, [pc, #380]	@ (80030e0 <HAL_DMA_IRQHandler+0x1b4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d04a      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80030e4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d045      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5c      	ldr	r2, [pc, #368]	@ (80030e8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d040      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5a      	ldr	r2, [pc, #360]	@ (80030ec <HAL_DMA_IRQHandler+0x1c0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d03b      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a59      	ldr	r2, [pc, #356]	@ (80030f0 <HAL_DMA_IRQHandler+0x1c4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d036      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a57      	ldr	r2, [pc, #348]	@ (80030f4 <HAL_DMA_IRQHandler+0x1c8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d031      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a56      	ldr	r2, [pc, #344]	@ (80030f8 <HAL_DMA_IRQHandler+0x1cc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d02c      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a54      	ldr	r2, [pc, #336]	@ (80030fc <HAL_DMA_IRQHandler+0x1d0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d027      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a53      	ldr	r2, [pc, #332]	@ (8003100 <HAL_DMA_IRQHandler+0x1d4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d022      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a51      	ldr	r2, [pc, #324]	@ (8003104 <HAL_DMA_IRQHandler+0x1d8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01d      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a50      	ldr	r2, [pc, #320]	@ (8003108 <HAL_DMA_IRQHandler+0x1dc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d018      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4e      	ldr	r2, [pc, #312]	@ (800310c <HAL_DMA_IRQHandler+0x1e0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4d      	ldr	r2, [pc, #308]	@ (8003110 <HAL_DMA_IRQHandler+0x1e4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8003114 <HAL_DMA_IRQHandler+0x1e8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a4a      	ldr	r2, [pc, #296]	@ (8003118 <HAL_DMA_IRQHandler+0x1ec>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xd2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a48      	ldr	r2, [pc, #288]	@ (800311c <HAL_DMA_IRQHandler+0x1f0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_DMA_IRQHandler+0xd6>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_DMA_IRQHandler+0xd8>
 8003002:	2300      	movs	r3, #0
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 842b 	beq.w	8003860 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2208      	movs	r2, #8
 8003014:	409a      	lsls	r2, r3
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80a2 	beq.w	8003164 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2e      	ldr	r2, [pc, #184]	@ (80030e0 <HAL_DMA_IRQHandler+0x1b4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d04a      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2d      	ldr	r2, [pc, #180]	@ (80030e4 <HAL_DMA_IRQHandler+0x1b8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d045      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2b      	ldr	r2, [pc, #172]	@ (80030e8 <HAL_DMA_IRQHandler+0x1bc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d040      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2a      	ldr	r2, [pc, #168]	@ (80030ec <HAL_DMA_IRQHandler+0x1c0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d03b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a28      	ldr	r2, [pc, #160]	@ (80030f0 <HAL_DMA_IRQHandler+0x1c4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d036      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a27      	ldr	r2, [pc, #156]	@ (80030f4 <HAL_DMA_IRQHandler+0x1c8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a25      	ldr	r2, [pc, #148]	@ (80030f8 <HAL_DMA_IRQHandler+0x1cc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02c      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <HAL_DMA_IRQHandler+0x1d0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d027      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a22      	ldr	r2, [pc, #136]	@ (8003100 <HAL_DMA_IRQHandler+0x1d4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_DMA_IRQHandler+0x1d8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01d      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1f      	ldr	r2, [pc, #124]	@ (8003108 <HAL_DMA_IRQHandler+0x1dc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1e      	ldr	r2, [pc, #120]	@ (800310c <HAL_DMA_IRQHandler+0x1e0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <HAL_DMA_IRQHandler+0x1e4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_DMA_IRQHandler+0x1e8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <HAL_DMA_IRQHandler+0x1ec>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x194>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	@ (800311c <HAL_DMA_IRQHandler+0x1f0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d12f      	bne.n	8003120 <HAL_DMA_IRQHandler+0x1f4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e02e      	b.n	8003134 <HAL_DMA_IRQHandler+0x208>
 80030d6:	bf00      	nop
 80030d8:	24000004 	.word	0x24000004
 80030dc:	1b4e81b5 	.word	0x1b4e81b5
 80030e0:	40020010 	.word	0x40020010
 80030e4:	40020028 	.word	0x40020028
 80030e8:	40020040 	.word	0x40020040
 80030ec:	40020058 	.word	0x40020058
 80030f0:	40020070 	.word	0x40020070
 80030f4:	40020088 	.word	0x40020088
 80030f8:	400200a0 	.word	0x400200a0
 80030fc:	400200b8 	.word	0x400200b8
 8003100:	40020410 	.word	0x40020410
 8003104:	40020428 	.word	0x40020428
 8003108:	40020440 	.word	0x40020440
 800310c:	40020458 	.word	0x40020458
 8003110:	40020470 	.word	0x40020470
 8003114:	40020488 	.word	0x40020488
 8003118:	400204a0 	.word	0x400204a0
 800311c:	400204b8 	.word	0x400204b8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	bf14      	ite	ne
 800312e:	2301      	movne	r3, #1
 8003130:	2300      	moveq	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d015      	beq.n	8003164 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0204 	bic.w	r2, r2, #4
 8003146:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2208      	movs	r2, #8
 8003152:	409a      	lsls	r2, r3
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d06e      	beq.n	8003258 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a69      	ldr	r2, [pc, #420]	@ (8003324 <HAL_DMA_IRQHandler+0x3f8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d04a      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a67      	ldr	r2, [pc, #412]	@ (8003328 <HAL_DMA_IRQHandler+0x3fc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d045      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a66      	ldr	r2, [pc, #408]	@ (800332c <HAL_DMA_IRQHandler+0x400>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a64      	ldr	r2, [pc, #400]	@ (8003330 <HAL_DMA_IRQHandler+0x404>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a63      	ldr	r2, [pc, #396]	@ (8003334 <HAL_DMA_IRQHandler+0x408>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d036      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a61      	ldr	r2, [pc, #388]	@ (8003338 <HAL_DMA_IRQHandler+0x40c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a60      	ldr	r2, [pc, #384]	@ (800333c <HAL_DMA_IRQHandler+0x410>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02c      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003340 <HAL_DMA_IRQHandler+0x414>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d027      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003344 <HAL_DMA_IRQHandler+0x418>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003348 <HAL_DMA_IRQHandler+0x41c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5a      	ldr	r2, [pc, #360]	@ (800334c <HAL_DMA_IRQHandler+0x420>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_DMA_IRQHandler+0x424>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <HAL_DMA_IRQHandler+0x428>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a55      	ldr	r2, [pc, #340]	@ (8003358 <HAL_DMA_IRQHandler+0x42c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a54      	ldr	r2, [pc, #336]	@ (800335c <HAL_DMA_IRQHandler+0x430>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_DMA_IRQHandler+0x2ee>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a52      	ldr	r2, [pc, #328]	@ (8003360 <HAL_DMA_IRQHandler+0x434>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10a      	bne.n	8003230 <HAL_DMA_IRQHandler+0x304>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e003      	b.n	8003238 <HAL_DMA_IRQHandler+0x30c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2201      	movs	r2, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003250:	f043 0202 	orr.w	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2204      	movs	r2, #4
 8003262:	409a      	lsls	r2, r3
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 808f 	beq.w	800338c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2c      	ldr	r2, [pc, #176]	@ (8003324 <HAL_DMA_IRQHandler+0x3f8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04a      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2a      	ldr	r2, [pc, #168]	@ (8003328 <HAL_DMA_IRQHandler+0x3fc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d045      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a29      	ldr	r2, [pc, #164]	@ (800332c <HAL_DMA_IRQHandler+0x400>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d040      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a27      	ldr	r2, [pc, #156]	@ (8003330 <HAL_DMA_IRQHandler+0x404>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d03b      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a26      	ldr	r2, [pc, #152]	@ (8003334 <HAL_DMA_IRQHandler+0x408>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d036      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a24      	ldr	r2, [pc, #144]	@ (8003338 <HAL_DMA_IRQHandler+0x40c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a23      	ldr	r2, [pc, #140]	@ (800333c <HAL_DMA_IRQHandler+0x410>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02c      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a21      	ldr	r2, [pc, #132]	@ (8003340 <HAL_DMA_IRQHandler+0x414>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d027      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a20      	ldr	r2, [pc, #128]	@ (8003344 <HAL_DMA_IRQHandler+0x418>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <HAL_DMA_IRQHandler+0x41c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1d      	ldr	r2, [pc, #116]	@ (800334c <HAL_DMA_IRQHandler+0x420>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003350 <HAL_DMA_IRQHandler+0x424>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003354 <HAL_DMA_IRQHandler+0x428>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <HAL_DMA_IRQHandler+0x42c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a17      	ldr	r2, [pc, #92]	@ (800335c <HAL_DMA_IRQHandler+0x430>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_DMA_IRQHandler+0x3e2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <HAL_DMA_IRQHandler+0x434>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d12a      	bne.n	8003364 <HAL_DMA_IRQHandler+0x438>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e023      	b.n	800336c <HAL_DMA_IRQHandler+0x440>
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2204      	movs	r2, #4
 800337a:	409a      	lsls	r2, r3
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2210      	movs	r2, #16
 8003396:	409a      	lsls	r2, r3
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a6 	beq.w	80034ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a85      	ldr	r2, [pc, #532]	@ (80035bc <HAL_DMA_IRQHandler+0x690>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d04a      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a83      	ldr	r2, [pc, #524]	@ (80035c0 <HAL_DMA_IRQHandler+0x694>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d045      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a82      	ldr	r2, [pc, #520]	@ (80035c4 <HAL_DMA_IRQHandler+0x698>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d040      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a80      	ldr	r2, [pc, #512]	@ (80035c8 <HAL_DMA_IRQHandler+0x69c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d03b      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7f      	ldr	r2, [pc, #508]	@ (80035cc <HAL_DMA_IRQHandler+0x6a0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d036      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7d      	ldr	r2, [pc, #500]	@ (80035d0 <HAL_DMA_IRQHandler+0x6a4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d031      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7c      	ldr	r2, [pc, #496]	@ (80035d4 <HAL_DMA_IRQHandler+0x6a8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d02c      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a7a      	ldr	r2, [pc, #488]	@ (80035d8 <HAL_DMA_IRQHandler+0x6ac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d027      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a79      	ldr	r2, [pc, #484]	@ (80035dc <HAL_DMA_IRQHandler+0x6b0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d022      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a77      	ldr	r2, [pc, #476]	@ (80035e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a76      	ldr	r2, [pc, #472]	@ (80035e4 <HAL_DMA_IRQHandler+0x6b8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d018      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a74      	ldr	r2, [pc, #464]	@ (80035e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a73      	ldr	r2, [pc, #460]	@ (80035ec <HAL_DMA_IRQHandler+0x6c0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a71      	ldr	r2, [pc, #452]	@ (80035f0 <HAL_DMA_IRQHandler+0x6c4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a70      	ldr	r2, [pc, #448]	@ (80035f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_IRQHandler+0x516>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6e      	ldr	r2, [pc, #440]	@ (80035f8 <HAL_DMA_IRQHandler+0x6cc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10a      	bne.n	8003458 <HAL_DMA_IRQHandler+0x52c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e009      	b.n	800346c <HAL_DMA_IRQHandler+0x540>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d03e      	beq.n	80034ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2210      	movs	r2, #16
 800347a:	409a      	lsls	r2, r3
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d018      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d108      	bne.n	80034ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d024      	beq.n	80034ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
 80034ac:	e01f      	b.n	80034ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01b      	beq.n	80034ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
 80034be:	e016      	b.n	80034ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0208 	bic.w	r2, r2, #8
 80034dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2220      	movs	r2, #32
 80034f8:	409a      	lsls	r2, r3
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8110 	beq.w	8003724 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2c      	ldr	r2, [pc, #176]	@ (80035bc <HAL_DMA_IRQHandler+0x690>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d04a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2b      	ldr	r2, [pc, #172]	@ (80035c0 <HAL_DMA_IRQHandler+0x694>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d045      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <HAL_DMA_IRQHandler+0x698>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d040      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a28      	ldr	r2, [pc, #160]	@ (80035c8 <HAL_DMA_IRQHandler+0x69c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d03b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a26      	ldr	r2, [pc, #152]	@ (80035cc <HAL_DMA_IRQHandler+0x6a0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d036      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a25      	ldr	r2, [pc, #148]	@ (80035d0 <HAL_DMA_IRQHandler+0x6a4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a23      	ldr	r2, [pc, #140]	@ (80035d4 <HAL_DMA_IRQHandler+0x6a8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a22      	ldr	r2, [pc, #136]	@ (80035d8 <HAL_DMA_IRQHandler+0x6ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d027      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a20      	ldr	r2, [pc, #128]	@ (80035dc <HAL_DMA_IRQHandler+0x6b0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1f      	ldr	r2, [pc, #124]	@ (80035e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <HAL_DMA_IRQHandler+0x6b8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <HAL_DMA_IRQHandler+0x6c0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <HAL_DMA_IRQHandler+0x6c4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x678>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a16      	ldr	r2, [pc, #88]	@ (80035f8 <HAL_DMA_IRQHandler+0x6cc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d12b      	bne.n	80035fc <HAL_DMA_IRQHandler+0x6d0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e02a      	b.n	8003610 <HAL_DMA_IRQHandler+0x6e4>
 80035ba:	bf00      	nop
 80035bc:	40020010 	.word	0x40020010
 80035c0:	40020028 	.word	0x40020028
 80035c4:	40020040 	.word	0x40020040
 80035c8:	40020058 	.word	0x40020058
 80035cc:	40020070 	.word	0x40020070
 80035d0:	40020088 	.word	0x40020088
 80035d4:	400200a0 	.word	0x400200a0
 80035d8:	400200b8 	.word	0x400200b8
 80035dc:	40020410 	.word	0x40020410
 80035e0:	40020428 	.word	0x40020428
 80035e4:	40020440 	.word	0x40020440
 80035e8:	40020458 	.word	0x40020458
 80035ec:	40020470 	.word	0x40020470
 80035f0:	40020488 	.word	0x40020488
 80035f4:	400204a0 	.word	0x400204a0
 80035f8:	400204b8 	.word	0x400204b8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	bf14      	ite	ne
 800360a:	2301      	movne	r3, #1
 800360c:	2300      	moveq	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8087 	beq.w	8003724 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2220      	movs	r2, #32
 8003620:	409a      	lsls	r2, r3
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b04      	cmp	r3, #4
 8003630:	d139      	bne.n	80036a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0216 	bic.w	r2, r2, #22
 8003640:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003650:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <HAL_DMA_IRQHandler+0x736>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0208 	bic.w	r2, r2, #8
 8003670:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	223f      	movs	r2, #63	@ 0x3f
 800367c:	409a      	lsls	r2, r3
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 834a 	beq.w	8003d30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	4798      	blx	r3
          }
          return;
 80036a4:	e344      	b.n	8003d30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d018      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d02c      	beq.n	8003724 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
 80036d2:	e027      	b.n	8003724 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d023      	beq.n	8003724 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
 80036e4:	e01e      	b.n	8003724 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10f      	bne.n	8003714 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0210 	bic.w	r2, r2, #16
 8003702:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8306 	beq.w	8003d3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8088 	beq.w	800384c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2204      	movs	r2, #4
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a7a      	ldr	r2, [pc, #488]	@ (8003934 <HAL_DMA_IRQHandler+0xa08>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d04a      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a79      	ldr	r2, [pc, #484]	@ (8003938 <HAL_DMA_IRQHandler+0xa0c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d045      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a77      	ldr	r2, [pc, #476]	@ (800393c <HAL_DMA_IRQHandler+0xa10>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d040      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a76      	ldr	r2, [pc, #472]	@ (8003940 <HAL_DMA_IRQHandler+0xa14>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d03b      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a74      	ldr	r2, [pc, #464]	@ (8003944 <HAL_DMA_IRQHandler+0xa18>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d036      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a73      	ldr	r2, [pc, #460]	@ (8003948 <HAL_DMA_IRQHandler+0xa1c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d031      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a71      	ldr	r2, [pc, #452]	@ (800394c <HAL_DMA_IRQHandler+0xa20>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02c      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a70      	ldr	r2, [pc, #448]	@ (8003950 <HAL_DMA_IRQHandler+0xa24>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d027      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6e      	ldr	r2, [pc, #440]	@ (8003954 <HAL_DMA_IRQHandler+0xa28>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d022      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6d      	ldr	r2, [pc, #436]	@ (8003958 <HAL_DMA_IRQHandler+0xa2c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d01d      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6b      	ldr	r2, [pc, #428]	@ (800395c <HAL_DMA_IRQHandler+0xa30>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6a      	ldr	r2, [pc, #424]	@ (8003960 <HAL_DMA_IRQHandler+0xa34>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a68      	ldr	r2, [pc, #416]	@ (8003964 <HAL_DMA_IRQHandler+0xa38>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a67      	ldr	r2, [pc, #412]	@ (8003968 <HAL_DMA_IRQHandler+0xa3c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_DMA_IRQHandler+0xa40>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x8b8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a64      	ldr	r2, [pc, #400]	@ (8003970 <HAL_DMA_IRQHandler+0xa44>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d108      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x8ca>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e007      	b.n	8003806 <HAL_DMA_IRQHandler+0x8da>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3301      	adds	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380e:	429a      	cmp	r2, r3
 8003810:	d307      	bcc.n	8003822 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f2      	bne.n	8003806 <HAL_DMA_IRQHandler+0x8da>
 8003820:	e000      	b.n	8003824 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003822:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2203      	movs	r2, #3
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800383a:	e003      	b.n	8003844 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8272 	beq.w	8003d3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
 800385e:	e26c      	b.n	8003d3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a43      	ldr	r2, [pc, #268]	@ (8003974 <HAL_DMA_IRQHandler+0xa48>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d022      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x984>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a42      	ldr	r2, [pc, #264]	@ (8003978 <HAL_DMA_IRQHandler+0xa4c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d01d      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x984>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a40      	ldr	r2, [pc, #256]	@ (800397c <HAL_DMA_IRQHandler+0xa50>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d018      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x984>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a3f      	ldr	r2, [pc, #252]	@ (8003980 <HAL_DMA_IRQHandler+0xa54>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x984>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3d      	ldr	r2, [pc, #244]	@ (8003984 <HAL_DMA_IRQHandler+0xa58>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00e      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x984>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3c      	ldr	r2, [pc, #240]	@ (8003988 <HAL_DMA_IRQHandler+0xa5c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d009      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x984>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3a      	ldr	r2, [pc, #232]	@ (800398c <HAL_DMA_IRQHandler+0xa60>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x984>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a39      	ldr	r2, [pc, #228]	@ (8003990 <HAL_DMA_IRQHandler+0xa64>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x988>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_DMA_IRQHandler+0x98a>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 823f 	beq.w	8003d3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2204      	movs	r2, #4
 80038ce:	409a      	lsls	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80cd 	beq.w	8003a74 <HAL_DMA_IRQHandler+0xb48>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80c7 	beq.w	8003a74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2204      	movs	r2, #4
 80038f0:	409a      	lsls	r2, r3
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d049      	beq.n	8003994 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8210 	beq.w	8003d34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800391c:	e20a      	b.n	8003d34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8206 	beq.w	8003d34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003930:	e200      	b.n	8003d34 <HAL_DMA_IRQHandler+0xe08>
 8003932:	bf00      	nop
 8003934:	40020010 	.word	0x40020010
 8003938:	40020028 	.word	0x40020028
 800393c:	40020040 	.word	0x40020040
 8003940:	40020058 	.word	0x40020058
 8003944:	40020070 	.word	0x40020070
 8003948:	40020088 	.word	0x40020088
 800394c:	400200a0 	.word	0x400200a0
 8003950:	400200b8 	.word	0x400200b8
 8003954:	40020410 	.word	0x40020410
 8003958:	40020428 	.word	0x40020428
 800395c:	40020440 	.word	0x40020440
 8003960:	40020458 	.word	0x40020458
 8003964:	40020470 	.word	0x40020470
 8003968:	40020488 	.word	0x40020488
 800396c:	400204a0 	.word	0x400204a0
 8003970:	400204b8 	.word	0x400204b8
 8003974:	58025408 	.word	0x58025408
 8003978:	5802541c 	.word	0x5802541c
 800397c:	58025430 	.word	0x58025430
 8003980:	58025444 	.word	0x58025444
 8003984:	58025458 	.word	0x58025458
 8003988:	5802546c 	.word	0x5802546c
 800398c:	58025480 	.word	0x58025480
 8003990:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d160      	bne.n	8003a60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ba0 <HAL_DMA_IRQHandler+0xc74>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d04a      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba4 <HAL_DMA_IRQHandler+0xc78>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d045      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ba8 <HAL_DMA_IRQHandler+0xc7c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d040      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a7a      	ldr	r2, [pc, #488]	@ (8003bac <HAL_DMA_IRQHandler+0xc80>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d03b      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a79      	ldr	r2, [pc, #484]	@ (8003bb0 <HAL_DMA_IRQHandler+0xc84>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d036      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a77      	ldr	r2, [pc, #476]	@ (8003bb4 <HAL_DMA_IRQHandler+0xc88>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a76      	ldr	r2, [pc, #472]	@ (8003bb8 <HAL_DMA_IRQHandler+0xc8c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d02c      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a74      	ldr	r2, [pc, #464]	@ (8003bbc <HAL_DMA_IRQHandler+0xc90>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d027      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a73      	ldr	r2, [pc, #460]	@ (8003bc0 <HAL_DMA_IRQHandler+0xc94>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a71      	ldr	r2, [pc, #452]	@ (8003bc4 <HAL_DMA_IRQHandler+0xc98>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a70      	ldr	r2, [pc, #448]	@ (8003bc8 <HAL_DMA_IRQHandler+0xc9c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	@ (8003bcc <HAL_DMA_IRQHandler+0xca0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6d      	ldr	r2, [pc, #436]	@ (8003bd0 <HAL_DMA_IRQHandler+0xca4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd4 <HAL_DMA_IRQHandler+0xca8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6a      	ldr	r2, [pc, #424]	@ (8003bd8 <HAL_DMA_IRQHandler+0xcac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xb12>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a68      	ldr	r2, [pc, #416]	@ (8003bdc <HAL_DMA_IRQHandler+0xcb0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <HAL_DMA_IRQHandler+0xb24>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e007      	b.n	8003a60 <HAL_DMA_IRQHandler+0xb34>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0204 	bic.w	r2, r2, #4
 8003a5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8165 	beq.w	8003d34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a72:	e15f      	b.n	8003d34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80c5 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xce8>
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80bf 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 813a 	beq.w	8003d38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003acc:	e134      	b.n	8003d38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8130 	beq.w	8003d38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae0:	e12a      	b.n	8003d38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f040 8089 	bne.w	8003c00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <HAL_DMA_IRQHandler+0xc74>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d04a      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a29      	ldr	r2, [pc, #164]	@ (8003ba4 <HAL_DMA_IRQHandler+0xc78>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d045      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <HAL_DMA_IRQHandler+0xc7c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d040      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a26      	ldr	r2, [pc, #152]	@ (8003bac <HAL_DMA_IRQHandler+0xc80>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d03b      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a25      	ldr	r2, [pc, #148]	@ (8003bb0 <HAL_DMA_IRQHandler+0xc84>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d036      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a23      	ldr	r2, [pc, #140]	@ (8003bb4 <HAL_DMA_IRQHandler+0xc88>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d031      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a22      	ldr	r2, [pc, #136]	@ (8003bb8 <HAL_DMA_IRQHandler+0xc8c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d02c      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a20      	ldr	r2, [pc, #128]	@ (8003bbc <HAL_DMA_IRQHandler+0xc90>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d027      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc0 <HAL_DMA_IRQHandler+0xc94>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_DMA_IRQHandler+0xc98>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01d      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <HAL_DMA_IRQHandler+0xc9c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d018      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1a      	ldr	r2, [pc, #104]	@ (8003bcc <HAL_DMA_IRQHandler+0xca0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a19      	ldr	r2, [pc, #100]	@ (8003bd0 <HAL_DMA_IRQHandler+0xca4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	@ (8003bd4 <HAL_DMA_IRQHandler+0xca8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <HAL_DMA_IRQHandler+0xcac>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xc62>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a14      	ldr	r2, [pc, #80]	@ (8003bdc <HAL_DMA_IRQHandler+0xcb0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d128      	bne.n	8003be0 <HAL_DMA_IRQHandler+0xcb4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0214 	bic.w	r2, r2, #20
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e027      	b.n	8003bf0 <HAL_DMA_IRQHandler+0xcc4>
 8003ba0:	40020010 	.word	0x40020010
 8003ba4:	40020028 	.word	0x40020028
 8003ba8:	40020040 	.word	0x40020040
 8003bac:	40020058 	.word	0x40020058
 8003bb0:	40020070 	.word	0x40020070
 8003bb4:	40020088 	.word	0x40020088
 8003bb8:	400200a0 	.word	0x400200a0
 8003bbc:	400200b8 	.word	0x400200b8
 8003bc0:	40020410 	.word	0x40020410
 8003bc4:	40020428 	.word	0x40020428
 8003bc8:	40020440 	.word	0x40020440
 8003bcc:	40020458 	.word	0x40020458
 8003bd0:	40020470 	.word	0x40020470
 8003bd4:	40020488 	.word	0x40020488
 8003bd8:	400204a0 	.word	0x400204a0
 8003bdc:	400204b8 	.word	0x400204b8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 020a 	bic.w	r2, r2, #10
 8003bee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8097 	beq.w	8003d38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c12:	e091      	b.n	8003d38 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8088 	beq.w	8003d3a <HAL_DMA_IRQHandler+0xe0e>
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8082 	beq.w	8003d3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a41      	ldr	r2, [pc, #260]	@ (8003d40 <HAL_DMA_IRQHandler+0xe14>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d04a      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3f      	ldr	r2, [pc, #252]	@ (8003d44 <HAL_DMA_IRQHandler+0xe18>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d045      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d48 <HAL_DMA_IRQHandler+0xe1c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d040      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3c      	ldr	r2, [pc, #240]	@ (8003d4c <HAL_DMA_IRQHandler+0xe20>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d03b      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a3b      	ldr	r2, [pc, #236]	@ (8003d50 <HAL_DMA_IRQHandler+0xe24>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d036      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a39      	ldr	r2, [pc, #228]	@ (8003d54 <HAL_DMA_IRQHandler+0xe28>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d031      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a38      	ldr	r2, [pc, #224]	@ (8003d58 <HAL_DMA_IRQHandler+0xe2c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d02c      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a36      	ldr	r2, [pc, #216]	@ (8003d5c <HAL_DMA_IRQHandler+0xe30>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d027      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a35      	ldr	r2, [pc, #212]	@ (8003d60 <HAL_DMA_IRQHandler+0xe34>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d022      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a33      	ldr	r2, [pc, #204]	@ (8003d64 <HAL_DMA_IRQHandler+0xe38>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01d      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a32      	ldr	r2, [pc, #200]	@ (8003d68 <HAL_DMA_IRQHandler+0xe3c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	@ (8003d6c <HAL_DMA_IRQHandler+0xe40>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d70 <HAL_DMA_IRQHandler+0xe44>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003d74 <HAL_DMA_IRQHandler+0xe48>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d78 <HAL_DMA_IRQHandler+0xe4c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xdaa>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d7c <HAL_DMA_IRQHandler+0xe50>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0xdbc>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 021c 	bic.w	r2, r2, #28
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e007      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xdcc>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020e 	bic.w	r2, r2, #14
 8003cf6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2201      	movs	r2, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
 8003d2e:	e004      	b.n	8003d3a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d30:	bf00      	nop
 8003d32:	e002      	b.n	8003d3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d3a:	3728      	adds	r7, #40	@ 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40020010 	.word	0x40020010
 8003d44:	40020028 	.word	0x40020028
 8003d48:	40020040 	.word	0x40020040
 8003d4c:	40020058 	.word	0x40020058
 8003d50:	40020070 	.word	0x40020070
 8003d54:	40020088 	.word	0x40020088
 8003d58:	400200a0 	.word	0x400200a0
 8003d5c:	400200b8 	.word	0x400200b8
 8003d60:	40020410 	.word	0x40020410
 8003d64:	40020428 	.word	0x40020428
 8003d68:	40020440 	.word	0x40020440
 8003d6c:	40020458 	.word	0x40020458
 8003d70:	40020470 	.word	0x40020470
 8003d74:	40020488 	.word	0x40020488
 8003d78:	400204a0 	.word	0x400204a0
 8003d7c:	400204b8 	.word	0x400204b8

08003d80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f9c <DMA_SetConfig+0x21c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d072      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a7d      	ldr	r2, [pc, #500]	@ (8003fa0 <DMA_SetConfig+0x220>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d06d      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa4 <DMA_SetConfig+0x224>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d068      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7a      	ldr	r2, [pc, #488]	@ (8003fa8 <DMA_SetConfig+0x228>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d063      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a79      	ldr	r2, [pc, #484]	@ (8003fac <DMA_SetConfig+0x22c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d05e      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a77      	ldr	r2, [pc, #476]	@ (8003fb0 <DMA_SetConfig+0x230>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d059      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a76      	ldr	r2, [pc, #472]	@ (8003fb4 <DMA_SetConfig+0x234>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d054      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a74      	ldr	r2, [pc, #464]	@ (8003fb8 <DMA_SetConfig+0x238>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04f      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a73      	ldr	r2, [pc, #460]	@ (8003fbc <DMA_SetConfig+0x23c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d04a      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a71      	ldr	r2, [pc, #452]	@ (8003fc0 <DMA_SetConfig+0x240>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d045      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a70      	ldr	r2, [pc, #448]	@ (8003fc4 <DMA_SetConfig+0x244>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d040      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc8 <DMA_SetConfig+0x248>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d03b      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6d      	ldr	r2, [pc, #436]	@ (8003fcc <DMA_SetConfig+0x24c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d036      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a6b      	ldr	r2, [pc, #428]	@ (8003fd0 <DMA_SetConfig+0x250>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d031      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6a      	ldr	r2, [pc, #424]	@ (8003fd4 <DMA_SetConfig+0x254>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d02c      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a68      	ldr	r2, [pc, #416]	@ (8003fd8 <DMA_SetConfig+0x258>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d027      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a67      	ldr	r2, [pc, #412]	@ (8003fdc <DMA_SetConfig+0x25c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d022      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a65      	ldr	r2, [pc, #404]	@ (8003fe0 <DMA_SetConfig+0x260>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01d      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a64      	ldr	r2, [pc, #400]	@ (8003fe4 <DMA_SetConfig+0x264>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a62      	ldr	r2, [pc, #392]	@ (8003fe8 <DMA_SetConfig+0x268>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a61      	ldr	r2, [pc, #388]	@ (8003fec <DMA_SetConfig+0x26c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5f      	ldr	r2, [pc, #380]	@ (8003ff0 <DMA_SetConfig+0x270>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ff4 <DMA_SetConfig+0x274>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <DMA_SetConfig+0x10a>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5c      	ldr	r2, [pc, #368]	@ (8003ff8 <DMA_SetConfig+0x278>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <DMA_SetConfig+0x10e>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <DMA_SetConfig+0x110>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a39      	ldr	r2, [pc, #228]	@ (8003f9c <DMA_SetConfig+0x21c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d04a      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a38      	ldr	r2, [pc, #224]	@ (8003fa0 <DMA_SetConfig+0x220>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d045      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a36      	ldr	r2, [pc, #216]	@ (8003fa4 <DMA_SetConfig+0x224>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d040      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a35      	ldr	r2, [pc, #212]	@ (8003fa8 <DMA_SetConfig+0x228>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d03b      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a33      	ldr	r2, [pc, #204]	@ (8003fac <DMA_SetConfig+0x22c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d036      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a32      	ldr	r2, [pc, #200]	@ (8003fb0 <DMA_SetConfig+0x230>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d031      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a30      	ldr	r2, [pc, #192]	@ (8003fb4 <DMA_SetConfig+0x234>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d02c      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <DMA_SetConfig+0x238>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d027      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	@ (8003fbc <DMA_SetConfig+0x23c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc0 <DMA_SetConfig+0x240>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01d      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc4 <DMA_SetConfig+0x244>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d018      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a29      	ldr	r2, [pc, #164]	@ (8003fc8 <DMA_SetConfig+0x248>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	@ (8003fcc <DMA_SetConfig+0x24c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a26      	ldr	r2, [pc, #152]	@ (8003fd0 <DMA_SetConfig+0x250>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a24      	ldr	r2, [pc, #144]	@ (8003fd4 <DMA_SetConfig+0x254>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <DMA_SetConfig+0x1d0>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a23      	ldr	r2, [pc, #140]	@ (8003fd8 <DMA_SetConfig+0x258>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <DMA_SetConfig+0x1d4>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <DMA_SetConfig+0x1d6>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d059      	beq.n	800400e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	223f      	movs	r2, #63	@ 0x3f
 8003f64:	409a      	lsls	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f78:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d138      	bne.n	8003ffc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f9a:	e086      	b.n	80040aa <DMA_SetConfig+0x32a>
 8003f9c:	40020010 	.word	0x40020010
 8003fa0:	40020028 	.word	0x40020028
 8003fa4:	40020040 	.word	0x40020040
 8003fa8:	40020058 	.word	0x40020058
 8003fac:	40020070 	.word	0x40020070
 8003fb0:	40020088 	.word	0x40020088
 8003fb4:	400200a0 	.word	0x400200a0
 8003fb8:	400200b8 	.word	0x400200b8
 8003fbc:	40020410 	.word	0x40020410
 8003fc0:	40020428 	.word	0x40020428
 8003fc4:	40020440 	.word	0x40020440
 8003fc8:	40020458 	.word	0x40020458
 8003fcc:	40020470 	.word	0x40020470
 8003fd0:	40020488 	.word	0x40020488
 8003fd4:	400204a0 	.word	0x400204a0
 8003fd8:	400204b8 	.word	0x400204b8
 8003fdc:	58025408 	.word	0x58025408
 8003fe0:	5802541c 	.word	0x5802541c
 8003fe4:	58025430 	.word	0x58025430
 8003fe8:	58025444 	.word	0x58025444
 8003fec:	58025458 	.word	0x58025458
 8003ff0:	5802546c 	.word	0x5802546c
 8003ff4:	58025480 	.word	0x58025480
 8003ff8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]
}
 800400c:	e04d      	b.n	80040aa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a29      	ldr	r2, [pc, #164]	@ (80040b8 <DMA_SetConfig+0x338>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <DMA_SetConfig+0x2de>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a27      	ldr	r2, [pc, #156]	@ (80040bc <DMA_SetConfig+0x33c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01d      	beq.n	800405e <DMA_SetConfig+0x2de>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a26      	ldr	r2, [pc, #152]	@ (80040c0 <DMA_SetConfig+0x340>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <DMA_SetConfig+0x2de>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a24      	ldr	r2, [pc, #144]	@ (80040c4 <DMA_SetConfig+0x344>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <DMA_SetConfig+0x2de>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a23      	ldr	r2, [pc, #140]	@ (80040c8 <DMA_SetConfig+0x348>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <DMA_SetConfig+0x2de>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a21      	ldr	r2, [pc, #132]	@ (80040cc <DMA_SetConfig+0x34c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <DMA_SetConfig+0x2de>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a20      	ldr	r2, [pc, #128]	@ (80040d0 <DMA_SetConfig+0x350>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <DMA_SetConfig+0x2de>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <DMA_SetConfig+0x354>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <DMA_SetConfig+0x2e2>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <DMA_SetConfig+0x2e4>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d020      	beq.n	80040aa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b40      	cmp	r3, #64	@ 0x40
 8004086:	d108      	bne.n	800409a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	60da      	str	r2, [r3, #12]
}
 8004098:	e007      	b.n	80040aa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	60da      	str	r2, [r3, #12]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	58025408 	.word	0x58025408
 80040bc:	5802541c 	.word	0x5802541c
 80040c0:	58025430 	.word	0x58025430
 80040c4:	58025444 	.word	0x58025444
 80040c8:	58025458 	.word	0x58025458
 80040cc:	5802546c 	.word	0x5802546c
 80040d0:	58025480 	.word	0x58025480
 80040d4:	58025494 	.word	0x58025494

080040d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a42      	ldr	r2, [pc, #264]	@ (80041f0 <DMA_CalcBaseAndBitshift+0x118>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04a      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a41      	ldr	r2, [pc, #260]	@ (80041f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d045      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a3f      	ldr	r2, [pc, #252]	@ (80041f8 <DMA_CalcBaseAndBitshift+0x120>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d040      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a3e      	ldr	r2, [pc, #248]	@ (80041fc <DMA_CalcBaseAndBitshift+0x124>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d03b      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a3c      	ldr	r2, [pc, #240]	@ (8004200 <DMA_CalcBaseAndBitshift+0x128>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d036      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3b      	ldr	r2, [pc, #236]	@ (8004204 <DMA_CalcBaseAndBitshift+0x12c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d031      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a39      	ldr	r2, [pc, #228]	@ (8004208 <DMA_CalcBaseAndBitshift+0x130>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a38      	ldr	r2, [pc, #224]	@ (800420c <DMA_CalcBaseAndBitshift+0x134>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a36      	ldr	r2, [pc, #216]	@ (8004210 <DMA_CalcBaseAndBitshift+0x138>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a35      	ldr	r2, [pc, #212]	@ (8004214 <DMA_CalcBaseAndBitshift+0x13c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a33      	ldr	r2, [pc, #204]	@ (8004218 <DMA_CalcBaseAndBitshift+0x140>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a32      	ldr	r2, [pc, #200]	@ (800421c <DMA_CalcBaseAndBitshift+0x144>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a30      	ldr	r2, [pc, #192]	@ (8004220 <DMA_CalcBaseAndBitshift+0x148>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2f      	ldr	r2, [pc, #188]	@ (8004224 <DMA_CalcBaseAndBitshift+0x14c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2d      	ldr	r2, [pc, #180]	@ (8004228 <DMA_CalcBaseAndBitshift+0x150>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	@ (800422c <DMA_CalcBaseAndBitshift+0x154>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <DMA_CalcBaseAndBitshift+0xac>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <DMA_CalcBaseAndBitshift+0xae>
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d024      	beq.n	80041d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3b10      	subs	r3, #16
 8004192:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <DMA_CalcBaseAndBitshift+0x158>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	4a24      	ldr	r2, [pc, #144]	@ (8004234 <DMA_CalcBaseAndBitshift+0x15c>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d908      	bls.n	80041c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <DMA_CalcBaseAndBitshift+0x160>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80041c2:	e00d      	b.n	80041e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <DMA_CalcBaseAndBitshift+0x160>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d2:	e005      	b.n	80041e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40020010 	.word	0x40020010
 80041f4:	40020028 	.word	0x40020028
 80041f8:	40020040 	.word	0x40020040
 80041fc:	40020058 	.word	0x40020058
 8004200:	40020070 	.word	0x40020070
 8004204:	40020088 	.word	0x40020088
 8004208:	400200a0 	.word	0x400200a0
 800420c:	400200b8 	.word	0x400200b8
 8004210:	40020410 	.word	0x40020410
 8004214:	40020428 	.word	0x40020428
 8004218:	40020440 	.word	0x40020440
 800421c:	40020458 	.word	0x40020458
 8004220:	40020470 	.word	0x40020470
 8004224:	40020488 	.word	0x40020488
 8004228:	400204a0 	.word	0x400204a0
 800422c:	400204b8 	.word	0x400204b8
 8004230:	aaaaaaab 	.word	0xaaaaaaab
 8004234:	0800bdb4 	.word	0x0800bdb4
 8004238:	fffffc00 	.word	0xfffffc00

0800423c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d120      	bne.n	8004292 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	2b03      	cmp	r3, #3
 8004256:	d858      	bhi.n	800430a <DMA_CheckFifoParam+0xce>
 8004258:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <DMA_CheckFifoParam+0x24>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004271 	.word	0x08004271
 8004264:	08004283 	.word	0x08004283
 8004268:	08004271 	.word	0x08004271
 800426c:	0800430b 	.word	0x0800430b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d048      	beq.n	800430e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004280:	e045      	b.n	800430e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800428a:	d142      	bne.n	8004312 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004290:	e03f      	b.n	8004312 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800429a:	d123      	bne.n	80042e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d838      	bhi.n	8004316 <DMA_CheckFifoParam+0xda>
 80042a4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <DMA_CheckFifoParam+0x70>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042c3 	.word	0x080042c3
 80042b4:	080042bd 	.word	0x080042bd
 80042b8:	080042d5 	.word	0x080042d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
        break;
 80042c0:	e030      	b.n	8004324 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d025      	beq.n	800431a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042d2:	e022      	b.n	800431a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042dc:	d11f      	bne.n	800431e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042e2:	e01c      	b.n	800431e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d902      	bls.n	80042f2 <DMA_CheckFifoParam+0xb6>
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d003      	beq.n	80042f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042f0:	e018      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
        break;
 80042f6:	e015      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00e      	beq.n	8004322 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
    break;
 8004308:	e00b      	b.n	8004322 <DMA_CheckFifoParam+0xe6>
        break;
 800430a:	bf00      	nop
 800430c:	e00a      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 800430e:	bf00      	nop
 8004310:	e008      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 8004312:	bf00      	nop
 8004314:	e006      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
    break;
 8004322:	bf00      	nop
    }
  }

  return status;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop

08004334 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a38      	ldr	r2, [pc, #224]	@ (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a36      	ldr	r2, [pc, #216]	@ (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a35      	ldr	r2, [pc, #212]	@ (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a33      	ldr	r2, [pc, #204]	@ (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a32      	ldr	r2, [pc, #200]	@ (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a30      	ldr	r2, [pc, #192]	@ (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2f      	ldr	r2, [pc, #188]	@ (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2d      	ldr	r2, [pc, #180]	@ (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3b08      	subs	r3, #8
 80043a4:	4a28      	ldr	r2, [pc, #160]	@ (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4b26      	ldr	r3, [pc, #152]	@ (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a24      	ldr	r2, [pc, #144]	@ (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2201      	movs	r2, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043d0:	e024      	b.n	800441c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3b10      	subs	r3, #16
 80043da:	4a1e      	ldr	r2, [pc, #120]	@ (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d806      	bhi.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	@ (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d902      	bls.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3308      	adds	r3, #8
 80043f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a16      	ldr	r2, [pc, #88]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800440c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	58025408 	.word	0x58025408
 800442c:	5802541c 	.word	0x5802541c
 8004430:	58025430 	.word	0x58025430
 8004434:	58025444 	.word	0x58025444
 8004438:	58025458 	.word	0x58025458
 800443c:	5802546c 	.word	0x5802546c
 8004440:	58025480 	.word	0x58025480
 8004444:	58025494 	.word	0x58025494
 8004448:	cccccccd 	.word	0xcccccccd
 800444c:	16009600 	.word	0x16009600
 8004450:	58025880 	.word	0x58025880
 8004454:	aaaaaaab 	.word	0xaaaaaaab
 8004458:	400204b8 	.word	0x400204b8
 800445c:	4002040f 	.word	0x4002040f
 8004460:	10008200 	.word	0x10008200
 8004464:	40020880 	.word	0x40020880

08004468 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d04a      	beq.n	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d847      	bhi.n	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a25      	ldr	r2, [pc, #148]	@ (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a24      	ldr	r2, [pc, #144]	@ (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01d      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a22      	ldr	r2, [pc, #136]	@ (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a21      	ldr	r2, [pc, #132]	@ (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4b17      	ldr	r3, [pc, #92]	@ (8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80044f2:	e009      	b.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4b14      	ldr	r3, [pc, #80]	@ (8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a11      	ldr	r2, [pc, #68]	@ (800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004506:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3b01      	subs	r3, #1
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	58025408 	.word	0x58025408
 8004524:	5802541c 	.word	0x5802541c
 8004528:	58025430 	.word	0x58025430
 800452c:	58025444 	.word	0x58025444
 8004530:	58025458 	.word	0x58025458
 8004534:	5802546c 	.word	0x5802546c
 8004538:	58025480 	.word	0x58025480
 800453c:	58025494 	.word	0x58025494
 8004540:	1600963f 	.word	0x1600963f
 8004544:	58025940 	.word	0x58025940
 8004548:	1000823f 	.word	0x1000823f
 800454c:	40020940 	.word	0x40020940

08004550 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0e3      	b.n	800472a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2223      	movs	r2, #35	@ 0x23
 8004570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fc fc6b 	bl	8000e50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	4b6e      	ldr	r3, [pc, #440]	@ (8004734 <HAL_ETH_Init+0x1e4>)
 800457c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004580:	4a6c      	ldr	r2, [pc, #432]	@ (8004734 <HAL_ETH_Init+0x1e4>)
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800458a:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_ETH_Init+0x1e4>)
 800458c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	7a1b      	ldrb	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f7fd f875 	bl	8001690 <HAL_SYSCFG_ETHInterfaceSelect>
 80045a6:	e003      	b.n	80045b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80045a8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80045ac:	f7fd f870 	bl	8001690 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80045b0:	4b61      	ldr	r3, [pc, #388]	@ (8004738 <HAL_ETH_Init+0x1e8>)
 80045b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045cc:	f7fd f824 	bl	8001618 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80045d2:	e011      	b.n	80045f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80045d4:	f7fd f820 	bl	8001618 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80045e2:	d909      	bls.n	80045f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2204      	movs	r2, #4
 80045e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	22e0      	movs	r2, #224	@ 0xe0
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e098      	b.n	800472a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e4      	bne.n	80045d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f89e 	bl	800474c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004610:	f001 fed4 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 8004614:	4603      	mov	r3, r0
 8004616:	4a49      	ldr	r2, [pc, #292]	@ (800473c <HAL_ETH_Init+0x1ec>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	0c9a      	lsrs	r2, r3, #18
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3a01      	subs	r2, #1
 8004624:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa81 	bl	8004b30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004636:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800463a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004646:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800464a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	22e0      	movs	r2, #224	@ 0xe0
 8004666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e05d      	b.n	800472a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004676:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800467a:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <HAL_ETH_Init+0x1f0>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6952      	ldr	r2, [r2, #20]
 8004682:	0051      	lsls	r1, r2, #1
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	430b      	orrs	r3, r1
 800468a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800468e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fae9 	bl	8004c6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fb2f 	bl	8004cfc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	3305      	adds	r3, #5
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	3303      	adds	r3, #3
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	061a      	lsls	r2, r3, #24
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	3302      	adds	r3, #2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	3301      	adds	r3, #1
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80046ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_ETH_Init+0x1f4>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <HAL_ETH_Init+0x1f8>)
 8004712:	430b      	orrs	r3, r1
 8004714:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2210      	movs	r2, #16
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	58024400 	.word	0x58024400
 8004738:	58000400 	.word	0x58000400
 800473c:	431bde83 	.word	0x431bde83
 8004740:	ffff8001 	.word	0xffff8001
 8004744:	0c020060 	.word	0x0c020060
 8004748:	0c20c000 	.word	0x0c20c000

0800474c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800475c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004764:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004766:	f001 fe29 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 800476a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d804      	bhi.n	800477e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e022      	b.n	80047c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a16      	ldr	r2, [pc, #88]	@ (80047dc <HAL_ETH_SetMDIOClockRange+0x90>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d204      	bcs.n	8004790 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e019      	b.n	80047c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a13      	ldr	r2, [pc, #76]	@ (80047e0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d915      	bls.n	80047c4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a12      	ldr	r2, [pc, #72]	@ (80047e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d804      	bhi.n	80047aa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e00c      	b.n	80047c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a0e      	ldr	r2, [pc, #56]	@ (80047e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d804      	bhi.n	80047bc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e003      	b.n	80047c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	02160ebf 	.word	0x02160ebf
 80047dc:	03938700 	.word	0x03938700
 80047e0:	05f5e0ff 	.word	0x05f5e0ff
 80047e4:	08f0d17f 	.word	0x08f0d17f
 80047e8:	0ee6b27f 	.word	0x0ee6b27f

080047ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80047fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	791b      	ldrb	r3, [r3, #4]
 8004804:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	7b1b      	ldrb	r3, [r3, #12]
 800480c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800480e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	7b5b      	ldrb	r3, [r3, #13]
 8004814:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004816:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	7b9b      	ldrb	r3, [r3, #14]
 800481c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800481e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	7bdb      	ldrb	r3, [r3, #15]
 8004824:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004826:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	7c12      	ldrb	r2, [r2, #16]
 800482c:	2a00      	cmp	r2, #0
 800482e:	d102      	bne.n	8004836 <ETH_SetMACConfig+0x4a>
 8004830:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004834:	e000      	b.n	8004838 <ETH_SetMACConfig+0x4c>
 8004836:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004838:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	7c52      	ldrb	r2, [r2, #17]
 800483e:	2a00      	cmp	r2, #0
 8004840:	d102      	bne.n	8004848 <ETH_SetMACConfig+0x5c>
 8004842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004846:	e000      	b.n	800484a <ETH_SetMACConfig+0x5e>
 8004848:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800484a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	7c9b      	ldrb	r3, [r3, #18]
 8004850:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004852:	431a      	orrs	r2, r3
               macconf->Speed |
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004858:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800485e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	7f1b      	ldrb	r3, [r3, #28]
 8004864:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	7f5b      	ldrb	r3, [r3, #29]
 800486c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800486e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	7f92      	ldrb	r2, [r2, #30]
 8004874:	2a00      	cmp	r2, #0
 8004876:	d102      	bne.n	800487e <ETH_SetMACConfig+0x92>
 8004878:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800487c:	e000      	b.n	8004880 <ETH_SetMACConfig+0x94>
 800487e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004880:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	7fdb      	ldrb	r3, [r3, #31]
 8004886:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004888:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004890:	2a00      	cmp	r2, #0
 8004892:	d102      	bne.n	800489a <ETH_SetMACConfig+0xae>
 8004894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004898:	e000      	b.n	800489c <ETH_SetMACConfig+0xb0>
 800489a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800489c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80048a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80048ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b56      	ldr	r3, [pc, #344]	@ (8004a18 <ETH_SetMACConfig+0x22c>)
 80048be:	4013      	ands	r3, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	68f9      	ldr	r1, [r7, #12]
 80048c6:	430b      	orrs	r3, r1
 80048c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80048d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80048e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80048e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80048ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80048ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80048f4:	2a00      	cmp	r2, #0
 80048f6:	d102      	bne.n	80048fe <ETH_SetMACConfig+0x112>
 80048f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80048fc:	e000      	b.n	8004900 <ETH_SetMACConfig+0x114>
 80048fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004900:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	4b42      	ldr	r3, [pc, #264]	@ (8004a1c <ETH_SetMACConfig+0x230>)
 8004912:	4013      	ands	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	430b      	orrs	r3, r1
 800491c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004924:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	4b3a      	ldr	r3, [pc, #232]	@ (8004a20 <ETH_SetMACConfig+0x234>)
 8004936:	4013      	ands	r3, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	68f9      	ldr	r1, [r7, #12]
 800493e:	430b      	orrs	r3, r1
 8004940:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004948:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800494e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004956:	2a00      	cmp	r2, #0
 8004958:	d101      	bne.n	800495e <ETH_SetMACConfig+0x172>
 800495a:	2280      	movs	r2, #128	@ 0x80
 800495c:	e000      	b.n	8004960 <ETH_SetMACConfig+0x174>
 800495e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004960:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004966:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004972:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004976:	4013      	ands	r3, r2
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	430b      	orrs	r3, r1
 8004980:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004988:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004990:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	f023 0103 	bic.w	r1, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80049b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d101      	bne.n	80049da <ETH_SetMACConfig+0x1ee>
 80049d6:	2240      	movs	r2, #64	@ 0x40
 80049d8:	e000      	b.n	80049dc <ETH_SetMACConfig+0x1f0>
 80049da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80049dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80049e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80049e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80049ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80049fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004a0c:	bf00      	nop
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	00048083 	.word	0x00048083
 8004a1c:	c0f88000 	.word	0xc0f88000
 8004a20:	fffffef0 	.word	0xfffffef0

08004a24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b38      	ldr	r3, [pc, #224]	@ (8004b1c <ETH_SetDMAConfig+0xf8>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	6811      	ldr	r1, [r2, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a4a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	791b      	ldrb	r3, [r3, #4]
 8004a50:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	7b1b      	ldrb	r3, [r3, #12]
 8004a5c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b20 <ETH_SetDMAConfig+0xfc>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	68f9      	ldr	r1, [r7, #12]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a7c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	7b5b      	ldrb	r3, [r3, #13]
 8004a82:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a94:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004a98:	4b22      	ldr	r3, [pc, #136]	@ (8004b24 <ETH_SetDMAConfig+0x100>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004aa8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	7d1b      	ldrb	r3, [r3, #20]
 8004ab4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ab6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	7f5b      	ldrb	r3, [r3, #29]
 8004abc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004ace:	4b16      	ldr	r3, [pc, #88]	@ (8004b28 <ETH_SetDMAConfig+0x104>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ade:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	7f1b      	ldrb	r3, [r3, #28]
 8004ae6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <ETH_SetDMAConfig+0x108>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	430b      	orrs	r3, r1
 8004b08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b0c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	ffff87fd 	.word	0xffff87fd
 8004b20:	ffff2ffe 	.word	0xffff2ffe
 8004b24:	fffec000 	.word	0xfffec000
 8004b28:	ffc0efef 	.word	0xffc0efef
 8004b2c:	7fc0ffff 	.word	0x7fc0ffff

08004b30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b0a4      	sub	sp, #144	@ 0x90
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004b88:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004b8c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004b94:	2300      	movs	r3, #0
 8004b96:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004baa:	2300      	movs	r3, #0
 8004bac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004bc8:	2320      	movs	r3, #32
 8004bca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004bda:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004be4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004bec:	2302      	movs	r3, #2
 8004bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff fde6 	bl	80047ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c24:	2301      	movs	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004c3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004c48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004c50:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c56:	f107 0308 	add.w	r3, r7, #8
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fee1 	bl	8004a24 <ETH_SetDMAConfig>
}
 8004c62:	bf00      	nop
 8004c64:	3790      	adds	r7, #144	@ 0x90
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e01d      	b.n	8004cb4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68d9      	ldr	r1, [r3, #12]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	440b      	add	r3, r1
 8004c88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	3206      	adds	r2, #6
 8004caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d9de      	bls.n	8004c78 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2303      	movs	r3, #3
 8004ccc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cdc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e023      	b.n	8004d52 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6919      	ldr	r1, [r3, #16]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4613      	mov	r3, r2
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	440b      	add	r3, r1
 8004d1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2200      	movs	r2, #0
 8004d32:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	3212      	adds	r2, #18
 8004d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d9d8      	bls.n	8004d0a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2303      	movs	r3, #3
 8004d82:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d92:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	@ 0x24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dc6:	4b89      	ldr	r3, [pc, #548]	@ (8004fec <HAL_GPIO_Init+0x234>)
 8004dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dca:	e194      	b.n	80050f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8186 	beq.w	80050f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d005      	beq.n	8004dfc <HAL_GPIO_Init+0x44>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d130      	bne.n	8004e5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e32:	2201      	movs	r2, #1
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0201 	and.w	r2, r3, #1
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d017      	beq.n	8004e9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d123      	bne.n	8004eee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	08da      	lsrs	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3208      	adds	r2, #8
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	08da      	lsrs	r2, r3, #3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3208      	adds	r2, #8
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 0203 	and.w	r2, r3, #3
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80e0 	beq.w	80050f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f30:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff0 <HAL_GPIO_Init+0x238>)
 8004f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f36:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff0 <HAL_GPIO_Init+0x238>)
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f40:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff0 <HAL_GPIO_Init+0x238>)
 8004f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f4e:	4a29      	ldr	r2, [pc, #164]	@ (8004ff4 <HAL_GPIO_Init+0x23c>)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	089b      	lsrs	r3, r3, #2
 8004f54:	3302      	adds	r3, #2
 8004f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	220f      	movs	r2, #15
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <HAL_GPIO_Init+0x240>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d052      	beq.n	8005020 <HAL_GPIO_Init+0x268>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ffc <HAL_GPIO_Init+0x244>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d031      	beq.n	8004fe6 <HAL_GPIO_Init+0x22e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1e      	ldr	r2, [pc, #120]	@ (8005000 <HAL_GPIO_Init+0x248>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d02b      	beq.n	8004fe2 <HAL_GPIO_Init+0x22a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005004 <HAL_GPIO_Init+0x24c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d025      	beq.n	8004fde <HAL_GPIO_Init+0x226>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1c      	ldr	r2, [pc, #112]	@ (8005008 <HAL_GPIO_Init+0x250>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01f      	beq.n	8004fda <HAL_GPIO_Init+0x222>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <HAL_GPIO_Init+0x254>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d019      	beq.n	8004fd6 <HAL_GPIO_Init+0x21e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8005010 <HAL_GPIO_Init+0x258>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_GPIO_Init+0x21a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a19      	ldr	r2, [pc, #100]	@ (8005014 <HAL_GPIO_Init+0x25c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00d      	beq.n	8004fce <HAL_GPIO_Init+0x216>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a18      	ldr	r2, [pc, #96]	@ (8005018 <HAL_GPIO_Init+0x260>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <HAL_GPIO_Init+0x212>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	@ (800501c <HAL_GPIO_Init+0x264>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_GPIO_Init+0x20e>
 8004fc2:	2309      	movs	r3, #9
 8004fc4:	e02d      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fc6:	230a      	movs	r3, #10
 8004fc8:	e02b      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fca:	2308      	movs	r3, #8
 8004fcc:	e029      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fce:	2307      	movs	r3, #7
 8004fd0:	e027      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fd2:	2306      	movs	r3, #6
 8004fd4:	e025      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fd6:	2305      	movs	r3, #5
 8004fd8:	e023      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	e021      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e01f      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e01d      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01b      	b.n	8005022 <HAL_GPIO_Init+0x26a>
 8004fea:	bf00      	nop
 8004fec:	58000080 	.word	0x58000080
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	58000400 	.word	0x58000400
 8004ff8:	58020000 	.word	0x58020000
 8004ffc:	58020400 	.word	0x58020400
 8005000:	58020800 	.word	0x58020800
 8005004:	58020c00 	.word	0x58020c00
 8005008:	58021000 	.word	0x58021000
 800500c:	58021400 	.word	0x58021400
 8005010:	58021800 	.word	0x58021800
 8005014:	58021c00 	.word	0x58021c00
 8005018:	58022000 	.word	0x58022000
 800501c:	58022400 	.word	0x58022400
 8005020:	2300      	movs	r3, #0
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	f002 0203 	and.w	r2, r2, #3
 8005028:	0092      	lsls	r2, r2, #2
 800502a:	4093      	lsls	r3, r2
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005032:	4938      	ldr	r1, [pc, #224]	@ (8005114 <HAL_GPIO_Init+0x35c>)
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	3302      	adds	r3, #2
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	43db      	mvns	r3, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4013      	ands	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005066:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800506e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005094:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	f47f ae63 	bne.w	8004dcc <HAL_GPIO_Init+0x14>
  }
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	3724      	adds	r7, #36	@ 0x24
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	58000400 	.word	0x58000400

08005118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
 8005124:	4613      	mov	r3, r2
 8005126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005128:	787b      	ldrb	r3, [r7, #1]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005134:	e003      	b.n	800513e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	041a      	lsls	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	619a      	str	r2, [r3, #24]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800515c:	887a      	ldrh	r2, [r7, #2]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4013      	ands	r3, r2
 8005162:	041a      	lsls	r2, r3, #16
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	43d9      	mvns	r1, r3
 8005168:	887b      	ldrh	r3, [r7, #2]
 800516a:	400b      	ands	r3, r1
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	619a      	str	r2, [r3, #24]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	4603      	mov	r3, r0
 8005186:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800518c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005198:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fb fe01 	bl	8000dac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b086      	sub	sp, #24
 80051b6:	af02      	add	r7, sp, #8
 80051b8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0fe      	b.n	80053c2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fb ffdd 	bl	8001198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2203      	movs	r2, #3
 80051e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f005 fe94 	bl	800af18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	7c1a      	ldrb	r2, [r3, #16]
 80051f8:	f88d 2000 	strb.w	r2, [sp]
 80051fc:	3304      	adds	r3, #4
 80051fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005200:	f005 fe18 	bl	800ae34 <USB_CoreInit>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0d5      	b.n	80053c2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f005 fe8c 	bl	800af3a <USB_SetCurrentMode>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0c6      	b.n	80053c2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e04a      	b.n	80052d0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	3315      	adds	r3, #21
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3314      	adds	r3, #20
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005262:	7bfa      	ldrb	r2, [r7, #15]
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	b298      	uxth	r0, r3
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	332e      	adds	r3, #46	@ 0x2e
 8005276:	4602      	mov	r2, r0
 8005278:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3318      	adds	r3, #24
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800528e:	7bfa      	ldrb	r2, [r7, #15]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	331c      	adds	r3, #28
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	3320      	adds	r3, #32
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	3324      	adds	r3, #36	@ 0x24
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	3301      	adds	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d3af      	bcc.n	800523a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
 80052de:	e044      	b.n	800536a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	3301      	adds	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	791b      	ldrb	r3, [r3, #4]
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	429a      	cmp	r2, r3
 8005372:	d3b5      	bcc.n	80052e0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	7c1a      	ldrb	r2, [r3, #16]
 800537c:	f88d 2000 	strb.w	r2, [sp]
 8005380:	3304      	adds	r3, #4
 8005382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005384:	f005 fe26 	bl	800afd4 <USB_DevInit>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e013      	b.n	80053c2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7b1b      	ldrb	r3, [r3, #12]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d102      	bne.n	80053b6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f80b 	bl	80053cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f005 ffe1 	bl	800b382 <USB_DevDisconnect>

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053fa:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <HAL_PCDEx_ActivateLPM+0x44>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	10000003 	.word	0x10000003

08005414 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800541c:	4b19      	ldr	r3, [pc, #100]	@ (8005484 <HAL_PWREx_ConfigSupply+0x70>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b04      	cmp	r3, #4
 8005426:	d00a      	beq.n	800543e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005428:	4b16      	ldr	r3, [pc, #88]	@ (8005484 <HAL_PWREx_ConfigSupply+0x70>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d001      	beq.n	800543a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e01f      	b.n	800547a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e01d      	b.n	800547a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800543e:	4b11      	ldr	r3, [pc, #68]	@ (8005484 <HAL_PWREx_ConfigSupply+0x70>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f023 0207 	bic.w	r2, r3, #7
 8005446:	490f      	ldr	r1, [pc, #60]	@ (8005484 <HAL_PWREx_ConfigSupply+0x70>)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4313      	orrs	r3, r2
 800544c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800544e:	f7fc f8e3 	bl	8001618 <HAL_GetTick>
 8005452:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005454:	e009      	b.n	800546a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005456:	f7fc f8df 	bl	8001618 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005464:	d901      	bls.n	800546a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e007      	b.n	800547a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_PWREx_ConfigSupply+0x70>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005476:	d1ee      	bne.n	8005456 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	58024800 	.word	0x58024800

08005488 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a04      	ldr	r2, [pc, #16]	@ (80054a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005496:	60d3      	str	r3, [r2, #12]
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	58024800 	.word	0x58024800

080054a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	@ 0x30
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f000 bc48 	b.w	8005d4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8088 	beq.w	80055da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ca:	4b99      	ldr	r3, [pc, #612]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054d4:	4b96      	ldr	r3, [pc, #600]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d007      	beq.n	80054f0 <HAL_RCC_OscConfig+0x48>
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	2b18      	cmp	r3, #24
 80054e4:	d111      	bne.n	800550a <HAL_RCC_OscConfig+0x62>
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d10c      	bne.n	800550a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d06d      	beq.n	80055d8 <HAL_RCC_OscConfig+0x130>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d169      	bne.n	80055d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f000 bc21 	b.w	8005d4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005512:	d106      	bne.n	8005522 <HAL_RCC_OscConfig+0x7a>
 8005514:	4b86      	ldr	r3, [pc, #536]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a85      	ldr	r2, [pc, #532]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800551a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e02e      	b.n	8005580 <HAL_RCC_OscConfig+0xd8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x9c>
 800552a:	4b81      	ldr	r3, [pc, #516]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a80      	ldr	r2, [pc, #512]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b7e      	ldr	r3, [pc, #504]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a7d      	ldr	r2, [pc, #500]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800553c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e01d      	b.n	8005580 <HAL_RCC_OscConfig+0xd8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0xc0>
 800554e:	4b78      	ldr	r3, [pc, #480]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a77      	ldr	r2, [pc, #476]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	4b75      	ldr	r3, [pc, #468]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a74      	ldr	r2, [pc, #464]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0xd8>
 8005568:	4b71      	ldr	r3, [pc, #452]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a70      	ldr	r2, [pc, #448]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800556e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4b6e      	ldr	r3, [pc, #440]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a6d      	ldr	r2, [pc, #436]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800557a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800557e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d013      	beq.n	80055b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fc f846 	bl	8001618 <HAL_GetTick>
 800558c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005590:	f7fc f842 	bl	8001618 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	@ 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e3d4      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a2:	4b63      	ldr	r3, [pc, #396]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0xe8>
 80055ae:	e014      	b.n	80055da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b0:	f7fc f832 	bl	8001618 <HAL_GetTick>
 80055b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b8:	f7fc f82e 	bl	8001618 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	@ 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e3c0      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055ca:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_OscConfig+0x110>
 80055d6:	e000      	b.n	80055da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 80ca 	beq.w	800577c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e8:	4b51      	ldr	r3, [pc, #324]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <HAL_RCC_OscConfig+0x166>
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	2b18      	cmp	r3, #24
 8005602:	d156      	bne.n	80056b2 <HAL_RCC_OscConfig+0x20a>
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d151      	bne.n	80056b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560e:	4b48      	ldr	r3, [pc, #288]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_RCC_OscConfig+0x17e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e392      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005626:	4b42      	ldr	r3, [pc, #264]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 0219 	bic.w	r2, r3, #25
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	493f      	ldr	r1, [pc, #252]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005638:	f7fb ffee 	bl	8001618 <HAL_GetTick>
 800563c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005640:	f7fb ffea 	bl	8001618 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e37c      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005652:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565e:	f7fc f80b 	bl	8001678 <HAL_GetREVID>
 8005662:	4603      	mov	r3, r0
 8005664:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005668:	4293      	cmp	r3, r2
 800566a:	d817      	bhi.n	800569c <HAL_RCC_OscConfig+0x1f4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b40      	cmp	r3, #64	@ 0x40
 8005672:	d108      	bne.n	8005686 <HAL_RCC_OscConfig+0x1de>
 8005674:	4b2e      	ldr	r3, [pc, #184]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800567c:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005682:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005684:	e07a      	b.n	800577c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005686:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	031b      	lsls	r3, r3, #12
 8005694:	4926      	ldr	r1, [pc, #152]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005696:	4313      	orrs	r3, r2
 8005698:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800569a:	e06f      	b.n	800577c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569c:	4b24      	ldr	r3, [pc, #144]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	061b      	lsls	r3, r3, #24
 80056aa:	4921      	ldr	r1, [pc, #132]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b0:	e064      	b.n	800577c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d047      	beq.n	800574a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 0219 	bic.w	r2, r3, #25
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	491a      	ldr	r1, [pc, #104]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fb ffa4 	bl	8001618 <HAL_GetTick>
 80056d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d4:	f7fb ffa0 	bl	8001618 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e332      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056e6:	4b12      	ldr	r3, [pc, #72]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f2:	f7fb ffc1 	bl	8001678 <HAL_GetREVID>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d819      	bhi.n	8005734 <HAL_RCC_OscConfig+0x28c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b40      	cmp	r3, #64	@ 0x40
 8005706:	d108      	bne.n	800571a <HAL_RCC_OscConfig+0x272>
 8005708:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005710:	4a07      	ldr	r2, [pc, #28]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 8005712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005716:	6053      	str	r3, [r2, #4]
 8005718:	e030      	b.n	800577c <HAL_RCC_OscConfig+0x2d4>
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	031b      	lsls	r3, r3, #12
 8005728:	4901      	ldr	r1, [pc, #4]	@ (8005730 <HAL_RCC_OscConfig+0x288>)
 800572a:	4313      	orrs	r3, r2
 800572c:	604b      	str	r3, [r1, #4]
 800572e:	e025      	b.n	800577c <HAL_RCC_OscConfig+0x2d4>
 8005730:	58024400 	.word	0x58024400
 8005734:	4b9a      	ldr	r3, [pc, #616]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	4997      	ldr	r1, [pc, #604]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
 8005748:	e018      	b.n	800577c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574a:	4b95      	ldr	r3, [pc, #596]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a94      	ldr	r2, [pc, #592]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fb ff5f 	bl	8001618 <HAL_GetTick>
 800575a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800575e:	f7fb ff5b 	bl	8001618 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e2ed      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005770:	4b8b      	ldr	r3, [pc, #556]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a9 	beq.w	80058dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800578a:	4b85      	ldr	r3, [pc, #532]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005792:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005794:	4b82      	ldr	r3, [pc, #520]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d007      	beq.n	80057b0 <HAL_RCC_OscConfig+0x308>
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b18      	cmp	r3, #24
 80057a4:	d13a      	bne.n	800581c <HAL_RCC_OscConfig+0x374>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d135      	bne.n	800581c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057b0:	4b7b      	ldr	r3, [pc, #492]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_OscConfig+0x320>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	2b80      	cmp	r3, #128	@ 0x80
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e2c1      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057c8:	f7fb ff56 	bl	8001678 <HAL_GetREVID>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d817      	bhi.n	8005806 <HAL_RCC_OscConfig+0x35e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d108      	bne.n	80057f0 <HAL_RCC_OscConfig+0x348>
 80057de:	4b70      	ldr	r3, [pc, #448]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80057e6:	4a6e      	ldr	r2, [pc, #440]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80057e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057ee:	e075      	b.n	80058dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057f0:	4b6b      	ldr	r3, [pc, #428]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	069b      	lsls	r3, r3, #26
 80057fe:	4968      	ldr	r1, [pc, #416]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005804:	e06a      	b.n	80058dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005806:	4b66      	ldr	r3, [pc, #408]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	4962      	ldr	r1, [pc, #392]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005816:	4313      	orrs	r3, r2
 8005818:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800581a:	e05f      	b.n	80058dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d042      	beq.n	80058aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005824:	4b5e      	ldr	r3, [pc, #376]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a5d      	ldr	r2, [pc, #372]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800582a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fb fef2 	bl	8001618 <HAL_GetTick>
 8005834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005838:	f7fb feee 	bl	8001618 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e280      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800584a:	4b55      	ldr	r3, [pc, #340]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005856:	f7fb ff0f 	bl	8001678 <HAL_GetREVID>
 800585a:	4603      	mov	r3, r0
 800585c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005860:	4293      	cmp	r3, r2
 8005862:	d817      	bhi.n	8005894 <HAL_RCC_OscConfig+0x3ec>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	2b20      	cmp	r3, #32
 800586a:	d108      	bne.n	800587e <HAL_RCC_OscConfig+0x3d6>
 800586c:	4b4c      	ldr	r3, [pc, #304]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005874:	4a4a      	ldr	r2, [pc, #296]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005876:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800587a:	6053      	str	r3, [r2, #4]
 800587c:	e02e      	b.n	80058dc <HAL_RCC_OscConfig+0x434>
 800587e:	4b48      	ldr	r3, [pc, #288]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	069b      	lsls	r3, r3, #26
 800588c:	4944      	ldr	r1, [pc, #272]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800588e:	4313      	orrs	r3, r2
 8005890:	604b      	str	r3, [r1, #4]
 8005892:	e023      	b.n	80058dc <HAL_RCC_OscConfig+0x434>
 8005894:	4b42      	ldr	r3, [pc, #264]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	493f      	ldr	r1, [pc, #252]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60cb      	str	r3, [r1, #12]
 80058a8:	e018      	b.n	80058dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058aa:	4b3d      	ldr	r3, [pc, #244]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a3c      	ldr	r2, [pc, #240]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80058b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fb feaf 	bl	8001618 <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058be:	f7fb feab 	bl	8001618 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e23d      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058d0:	4b33      	ldr	r3, [pc, #204]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d036      	beq.n	8005956 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d019      	beq.n	8005924 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f0:	4b2b      	ldr	r3, [pc, #172]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80058f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f4:	4a2a      	ldr	r2, [pc, #168]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fb fe8c 	bl	8001618 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005904:	f7fb fe88 	bl	8001618 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e21a      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005916:	4b22      	ldr	r3, [pc, #136]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x45c>
 8005922:	e018      	b.n	8005956 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005924:	4b1e      	ldr	r3, [pc, #120]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005928:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fb fe72 	bl	8001618 <HAL_GetTick>
 8005934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005938:	f7fb fe6e 	bl	8001618 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e200      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800594a:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800594c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d039      	beq.n	80059d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800596a:	4b0d      	ldr	r3, [pc, #52]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a0c      	ldr	r2, [pc, #48]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005970:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005976:	f7fb fe4f 	bl	8001618 <HAL_GetTick>
 800597a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800597e:	f7fb fe4b 	bl	8001618 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1dd      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005990:	4b03      	ldr	r3, [pc, #12]	@ (80059a0 <HAL_RCC_OscConfig+0x4f8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x4d6>
 800599c:	e01b      	b.n	80059d6 <HAL_RCC_OscConfig+0x52e>
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059a4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a9a      	ldr	r2, [pc, #616]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 80059aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059b0:	f7fb fe32 	bl	8001618 <HAL_GetTick>
 80059b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059b8:	f7fb fe2e 	bl	8001618 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e1c0      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059ca:	4b92      	ldr	r3, [pc, #584]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8081 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059e4:	4b8c      	ldr	r3, [pc, #560]	@ (8005c18 <HAL_RCC_OscConfig+0x770>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a8b      	ldr	r2, [pc, #556]	@ (8005c18 <HAL_RCC_OscConfig+0x770>)
 80059ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059f0:	f7fb fe12 	bl	8001618 <HAL_GetTick>
 80059f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f8:	f7fb fe0e 	bl	8001618 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	@ 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e1a0      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a0a:	4b83      	ldr	r3, [pc, #524]	@ (8005c18 <HAL_RCC_OscConfig+0x770>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCC_OscConfig+0x584>
 8005a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a22:	4a7c      	ldr	r2, [pc, #496]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a2a:	e02d      	b.n	8005a88 <HAL_RCC_OscConfig+0x5e0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10c      	bne.n	8005a4e <HAL_RCC_OscConfig+0x5a6>
 8005a34:	4b77      	ldr	r3, [pc, #476]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a38:	4a76      	ldr	r2, [pc, #472]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a40:	4b74      	ldr	r3, [pc, #464]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a44:	4a73      	ldr	r2, [pc, #460]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a46:	f023 0304 	bic.w	r3, r3, #4
 8005a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4c:	e01c      	b.n	8005a88 <HAL_RCC_OscConfig+0x5e0>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b05      	cmp	r3, #5
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x5c8>
 8005a56:	4b6f      	ldr	r3, [pc, #444]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a5c:	f043 0304 	orr.w	r3, r3, #4
 8005a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a62:	4b6c      	ldr	r3, [pc, #432]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a66:	4a6b      	ldr	r2, [pc, #428]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCC_OscConfig+0x5e0>
 8005a70:	4b68      	ldr	r3, [pc, #416]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a74:	4a67      	ldr	r2, [pc, #412]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7c:	4b65      	ldr	r3, [pc, #404]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a80:	4a64      	ldr	r2, [pc, #400]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005a82:	f023 0304 	bic.w	r3, r3, #4
 8005a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d015      	beq.n	8005abc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a90:	f7fb fdc2 	bl	8001618 <HAL_GetTick>
 8005a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a98:	f7fb fdbe 	bl	8001618 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e14e      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aae:	4b59      	ldr	r3, [pc, #356]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ee      	beq.n	8005a98 <HAL_RCC_OscConfig+0x5f0>
 8005aba:	e014      	b.n	8005ae6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abc:	f7fb fdac 	bl	8001618 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ac2:	e00a      	b.n	8005ada <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac4:	f7fb fda8 	bl	8001618 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e138      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ada:	4b4e      	ldr	r3, [pc, #312]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ee      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 812d 	beq.w	8005d4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005af0:	4b48      	ldr	r3, [pc, #288]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005af8:	2b18      	cmp	r3, #24
 8005afa:	f000 80bd 	beq.w	8005c78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	f040 809e 	bne.w	8005c44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b08:	4b42      	ldr	r3, [pc, #264]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a41      	ldr	r2, [pc, #260]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fb fd80 	bl	8001618 <HAL_GetTick>
 8005b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fb fd7c 	bl	8001618 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e10e      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b2e:	4b39      	ldr	r3, [pc, #228]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b3a:	4b36      	ldr	r3, [pc, #216]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b3e:	4b37      	ldr	r3, [pc, #220]	@ (8005c1c <HAL_RCC_OscConfig+0x774>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b4a:	0112      	lsls	r2, r2, #4
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	4931      	ldr	r1, [pc, #196]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b62:	3b01      	subs	r3, #1
 8005b64:	025b      	lsls	r3, r3, #9
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	061b      	lsls	r3, r3, #24
 8005b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b84:	4923      	ldr	r1, [pc, #140]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b8a:	4b22      	ldr	r3, [pc, #136]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	4a21      	ldr	r2, [pc, #132]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b96:	4b1f      	ldr	r3, [pc, #124]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9a:	4b21      	ldr	r3, [pc, #132]	@ (8005c20 <HAL_RCC_OscConfig+0x778>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ba2:	00d2      	lsls	r2, r2, #3
 8005ba4:	491b      	ldr	r1, [pc, #108]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005baa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	f023 020c 	bic.w	r2, r3, #12
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	4917      	ldr	r1, [pc, #92]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bbc:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	f023 0202 	bic.w	r2, r3, #2
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc8:	4912      	ldr	r1, [pc, #72]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bce:	4b11      	ldr	r3, [pc, #68]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	4a10      	ldr	r2, [pc, #64]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bda:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bde:	4a0d      	ldr	r2, [pc, #52]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005be6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005bf2:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	4a07      	ldr	r2, [pc, #28]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bfe:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a04      	ldr	r2, [pc, #16]	@ (8005c14 <HAL_RCC_OscConfig+0x76c>)
 8005c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fb fd05 	bl	8001618 <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c10:	e011      	b.n	8005c36 <HAL_RCC_OscConfig+0x78e>
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
 8005c18:	58024800 	.word	0x58024800
 8005c1c:	fffffc0c 	.word	0xfffffc0c
 8005c20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fb fcf8 	bl	8001618 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e08a      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c36:	4b47      	ldr	r3, [pc, #284]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x77c>
 8005c42:	e082      	b.n	8005d4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c44:	4b43      	ldr	r3, [pc, #268]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a42      	ldr	r2, [pc, #264]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fb fce2 	bl	8001618 <HAL_GetTick>
 8005c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c58:	f7fb fcde 	bl	8001618 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e070      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x7b0>
 8005c76:	e068      	b.n	8005d4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c78:	4b36      	ldr	r3, [pc, #216]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c7e:	4b35      	ldr	r3, [pc, #212]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d031      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f003 0203 	and.w	r2, r3, #3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d12a      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d122      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d11a      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	0a5b      	lsrs	r3, r3, #9
 8005cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d111      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d108      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	0e1b      	lsrs	r3, r3, #24
 8005ce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e02b      	b.n	8005d4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005cf4:	4b17      	ldr	r3, [pc, #92]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf8:	08db      	lsrs	r3, r3, #3
 8005cfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d01f      	beq.n	8005d4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d0a:	4b12      	ldr	r3, [pc, #72]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0e:	4a11      	ldr	r2, [pc, #68]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d16:	f7fb fc7f 	bl	8001618 <HAL_GetTick>
 8005d1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d1c:	bf00      	nop
 8005d1e:	f7fb fc7b 	bl	8001618 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d0f9      	beq.n	8005d1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <HAL_RCC_OscConfig+0x8b0>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d36:	00d2      	lsls	r2, r2, #3
 8005d38:	4906      	ldr	r1, [pc, #24]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d3e:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	4a04      	ldr	r2, [pc, #16]	@ (8005d54 <HAL_RCC_OscConfig+0x8ac>)
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3730      	adds	r7, #48	@ 0x30
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	58024400 	.word	0x58024400
 8005d58:	ffff0007 	.word	0xffff0007

08005d5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e19c      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d70:	4b8a      	ldr	r3, [pc, #552]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d910      	bls.n	8005da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b87      	ldr	r3, [pc, #540]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f023 020f 	bic.w	r2, r3, #15
 8005d86:	4985      	ldr	r1, [pc, #532]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8e:	4b83      	ldr	r3, [pc, #524]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e184      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	4b7b      	ldr	r3, [pc, #492]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d908      	bls.n	8005dce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dbc:	4b78      	ldr	r3, [pc, #480]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	4975      	ldr	r1, [pc, #468]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	4b70      	ldr	r3, [pc, #448]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d908      	bls.n	8005dfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dea:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	496a      	ldr	r1, [pc, #424]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d010      	beq.n	8005e2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	4b64      	ldr	r3, [pc, #400]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d908      	bls.n	8005e2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e18:	4b61      	ldr	r3, [pc, #388]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	495e      	ldr	r1, [pc, #376]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	4b59      	ldr	r3, [pc, #356]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d908      	bls.n	8005e58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e46:	4b56      	ldr	r3, [pc, #344]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	4953      	ldr	r1, [pc, #332]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d010      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	4b4d      	ldr	r3, [pc, #308]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d908      	bls.n	8005e86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e74:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f023 020f 	bic.w	r2, r3, #15
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4947      	ldr	r1, [pc, #284]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d055      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e92:	4b43      	ldr	r3, [pc, #268]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	4940      	ldr	r1, [pc, #256]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eac:	4b3c      	ldr	r3, [pc, #240]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d121      	bne.n	8005efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0f6      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ec4:	4b36      	ldr	r3, [pc, #216]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d115      	bne.n	8005efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0ea      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005edc:	4b30      	ldr	r3, [pc, #192]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0de      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eec:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0d6      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005efc:	4b28      	ldr	r3, [pc, #160]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f023 0207 	bic.w	r2, r3, #7
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4925      	ldr	r1, [pc, #148]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f0e:	f7fb fb83 	bl	8001618 <HAL_GetTick>
 8005f12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f14:	e00a      	b.n	8005f2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f16:	f7fb fb7f 	bl	8001618 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e0be      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d1eb      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d010      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	4b14      	ldr	r3, [pc, #80]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d208      	bcs.n	8005f6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f5a:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f023 020f 	bic.w	r2, r3, #15
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	490e      	ldr	r1, [pc, #56]	@ (8005fa0 <HAL_RCC_ClockConfig+0x244>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d214      	bcs.n	8005fa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 020f 	bic.w	r2, r3, #15
 8005f82:	4906      	ldr	r1, [pc, #24]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8a:	4b04      	ldr	r3, [pc, #16]	@ (8005f9c <HAL_RCC_ClockConfig+0x240>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e086      	b.n	80060aa <HAL_RCC_ClockConfig+0x34e>
 8005f9c:	52002000 	.word	0x52002000
 8005fa0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d010      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d208      	bcs.n	8005fd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	4939      	ldr	r1, [pc, #228]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d010      	beq.n	8006000 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	4b34      	ldr	r3, [pc, #208]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d208      	bcs.n	8006000 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fee:	4b31      	ldr	r3, [pc, #196]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	492e      	ldr	r1, [pc, #184]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	d010      	beq.n	800602e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	4b28      	ldr	r3, [pc, #160]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006018:	429a      	cmp	r2, r3
 800601a:	d208      	bcs.n	800602e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800601c:	4b25      	ldr	r3, [pc, #148]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	4922      	ldr	r1, [pc, #136]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 800602a:	4313      	orrs	r3, r2
 800602c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d010      	beq.n	800605c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69da      	ldr	r2, [r3, #28]
 800603e:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006046:	429a      	cmp	r2, r3
 8006048:	d208      	bcs.n	800605c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800604a:	4b1a      	ldr	r3, [pc, #104]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	4917      	ldr	r1, [pc, #92]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8006058:	4313      	orrs	r3, r2
 800605a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800605c:	f000 f834 	bl	80060c8 <HAL_RCC_GetSysClockFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b14      	ldr	r3, [pc, #80]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	4912      	ldr	r1, [pc, #72]	@ (80060b8 <HAL_RCC_ClockConfig+0x35c>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
 8006078:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800607a:	4b0e      	ldr	r3, [pc, #56]	@ (80060b4 <HAL_RCC_ClockConfig+0x358>)
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	4a0d      	ldr	r2, [pc, #52]	@ (80060b8 <HAL_RCC_ClockConfig+0x35c>)
 8006084:	5cd3      	ldrb	r3, [r2, r3]
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
 8006090:	4a0a      	ldr	r2, [pc, #40]	@ (80060bc <HAL_RCC_ClockConfig+0x360>)
 8006092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006094:	4a0a      	ldr	r2, [pc, #40]	@ (80060c0 <HAL_RCC_ClockConfig+0x364>)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800609a:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <HAL_RCC_ClockConfig+0x368>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fb fa70 	bl	8001584 <HAL_InitTick>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	58024400 	.word	0x58024400
 80060b8:	0800bda4 	.word	0x0800bda4
 80060bc:	24000008 	.word	0x24000008
 80060c0:	24000004 	.word	0x24000004
 80060c4:	2400000c 	.word	0x2400000c

080060c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b089      	sub	sp, #36	@ 0x24
 80060cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ce:	4bb3      	ldr	r3, [pc, #716]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060d6:	2b18      	cmp	r3, #24
 80060d8:	f200 8155 	bhi.w	8006386 <HAL_RCC_GetSysClockFreq+0x2be>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006149 	.word	0x08006149
 80060e8:	08006387 	.word	0x08006387
 80060ec:	08006387 	.word	0x08006387
 80060f0:	08006387 	.word	0x08006387
 80060f4:	08006387 	.word	0x08006387
 80060f8:	08006387 	.word	0x08006387
 80060fc:	08006387 	.word	0x08006387
 8006100:	08006387 	.word	0x08006387
 8006104:	0800616f 	.word	0x0800616f
 8006108:	08006387 	.word	0x08006387
 800610c:	08006387 	.word	0x08006387
 8006110:	08006387 	.word	0x08006387
 8006114:	08006387 	.word	0x08006387
 8006118:	08006387 	.word	0x08006387
 800611c:	08006387 	.word	0x08006387
 8006120:	08006387 	.word	0x08006387
 8006124:	08006175 	.word	0x08006175
 8006128:	08006387 	.word	0x08006387
 800612c:	08006387 	.word	0x08006387
 8006130:	08006387 	.word	0x08006387
 8006134:	08006387 	.word	0x08006387
 8006138:	08006387 	.word	0x08006387
 800613c:	08006387 	.word	0x08006387
 8006140:	08006387 	.word	0x08006387
 8006144:	0800617b 	.word	0x0800617b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006148:	4b94      	ldr	r3, [pc, #592]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006154:	4b91      	ldr	r3, [pc, #580]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	08db      	lsrs	r3, r3, #3
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	4a90      	ldr	r2, [pc, #576]	@ (80063a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
 8006164:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006166:	e111      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006168:	4b8d      	ldr	r3, [pc, #564]	@ (80063a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800616a:	61bb      	str	r3, [r7, #24]
      break;
 800616c:	e10e      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800616e:	4b8d      	ldr	r3, [pc, #564]	@ (80063a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006170:	61bb      	str	r3, [r7, #24]
      break;
 8006172:	e10b      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006174:	4b8c      	ldr	r3, [pc, #560]	@ (80063a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006176:	61bb      	str	r3, [r7, #24]
      break;
 8006178:	e108      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800617a:	4b88      	ldr	r3, [pc, #544]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006184:	4b85      	ldr	r3, [pc, #532]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800618e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006190:	4b82      	ldr	r3, [pc, #520]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800619a:	4b80      	ldr	r3, [pc, #512]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800619c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619e:	08db      	lsrs	r3, r3, #3
 80061a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80e1 	beq.w	8006380 <HAL_RCC_GetSysClockFreq+0x2b8>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	f000 8083 	beq.w	80062cc <HAL_RCC_GetSysClockFreq+0x204>
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	f200 80a1 	bhi.w	8006310 <HAL_RCC_GetSysClockFreq+0x248>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_RCC_GetSysClockFreq+0x114>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d056      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061da:	e099      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061dc:	4b6f      	ldr	r3, [pc, #444]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d02d      	beq.n	8006244 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061e8:	4b6c      	ldr	r3, [pc, #432]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	08db      	lsrs	r3, r3, #3
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	4a6b      	ldr	r2, [pc, #428]	@ (80063a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
 80061f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006212:	4b62      	ldr	r3, [pc, #392]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006222:	ed97 6a02 	vldr	s12, [r7, #8]
 8006226:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80063ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800622a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006242:	e087      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80063b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006256:	4b51      	ldr	r3, [pc, #324]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	ed97 6a02 	vldr	s12, [r7, #8]
 800626a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80063ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800626e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800627a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006286:	e065      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80063b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629a:	4b40      	ldr	r3, [pc, #256]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80063ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80062b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062ca:	e043      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80063b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062de:	4b2f      	ldr	r3, [pc, #188]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80062f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80063ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80062f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800630e:	e021      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80063b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800631e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006322:	4b1e      	ldr	r3, [pc, #120]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006332:	ed97 6a02 	vldr	s12, [r7, #8]
 8006336:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80063ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800633a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006352:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006354:	4b11      	ldr	r3, [pc, #68]	@ (800639c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006358:	0a5b      	lsrs	r3, r3, #9
 800635a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800635e:	3301      	adds	r3, #1
 8006360:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800636c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006378:	ee17 3a90 	vmov	r3, s15
 800637c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800637e:	e005      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	61bb      	str	r3, [r7, #24]
      break;
 8006384:	e002      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006386:	4b07      	ldr	r3, [pc, #28]	@ (80063a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006388:	61bb      	str	r3, [r7, #24]
      break;
 800638a:	bf00      	nop
  }

  return sysclockfreq;
 800638c:	69bb      	ldr	r3, [r7, #24]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3724      	adds	r7, #36	@ 0x24
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
 80063a0:	03d09000 	.word	0x03d09000
 80063a4:	003d0900 	.word	0x003d0900
 80063a8:	007a1200 	.word	0x007a1200
 80063ac:	46000000 	.word	0x46000000
 80063b0:	4c742400 	.word	0x4c742400
 80063b4:	4a742400 	.word	0x4a742400
 80063b8:	4af42400 	.word	0x4af42400

080063bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063c2:	f7ff fe81 	bl	80060c8 <HAL_RCC_GetSysClockFreq>
 80063c6:	4602      	mov	r2, r0
 80063c8:	4b10      	ldr	r3, [pc, #64]	@ (800640c <HAL_RCC_GetHCLKFreq+0x50>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	490f      	ldr	r1, [pc, #60]	@ (8006410 <HAL_RCC_GetHCLKFreq+0x54>)
 80063d4:	5ccb      	ldrb	r3, [r1, r3]
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	fa22 f303 	lsr.w	r3, r2, r3
 80063de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063e0:	4b0a      	ldr	r3, [pc, #40]	@ (800640c <HAL_RCC_GetHCLKFreq+0x50>)
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	4a09      	ldr	r2, [pc, #36]	@ (8006410 <HAL_RCC_GetHCLKFreq+0x54>)
 80063ea:	5cd3      	ldrb	r3, [r2, r3]
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	4a07      	ldr	r2, [pc, #28]	@ (8006414 <HAL_RCC_GetHCLKFreq+0x58>)
 80063f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063fa:	4a07      	ldr	r2, [pc, #28]	@ (8006418 <HAL_RCC_GetHCLKFreq+0x5c>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006400:	4b04      	ldr	r3, [pc, #16]	@ (8006414 <HAL_RCC_GetHCLKFreq+0x58>)
 8006402:	681b      	ldr	r3, [r3, #0]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	58024400 	.word	0x58024400
 8006410:	0800bda4 	.word	0x0800bda4
 8006414:	24000008 	.word	0x24000008
 8006418:	24000004 	.word	0x24000004

0800641c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006420:	f7ff ffcc 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 8006424:	4602      	mov	r2, r0
 8006426:	4b06      	ldr	r3, [pc, #24]	@ (8006440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	4904      	ldr	r1, [pc, #16]	@ (8006444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006432:	5ccb      	ldrb	r3, [r1, r3]
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800643c:	4618      	mov	r0, r3
 800643e:	bd80      	pop	{r7, pc}
 8006440:	58024400 	.word	0x58024400
 8006444:	0800bda4 	.word	0x0800bda4

08006448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800644c:	f7ff ffb6 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 8006450:	4602      	mov	r2, r0
 8006452:	4b06      	ldr	r3, [pc, #24]	@ (800646c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	4904      	ldr	r1, [pc, #16]	@ (8006470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800645e:	5ccb      	ldrb	r3, [r1, r3]
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006468:	4618      	mov	r0, r3
 800646a:	bd80      	pop	{r7, pc}
 800646c:	58024400 	.word	0x58024400
 8006470:	0800bda4 	.word	0x0800bda4

08006474 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006478:	b0ca      	sub	sp, #296	@ 0x128
 800647a:	af00      	add	r7, sp, #0
 800647c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006480:	2300      	movs	r3, #0
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006486:	2300      	movs	r3, #0
 8006488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006498:	2500      	movs	r5, #0
 800649a:	ea54 0305 	orrs.w	r3, r4, r5
 800649e:	d049      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064aa:	d02f      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80064ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064b0:	d828      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064b6:	d01a      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064bc:	d822      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064c6:	d007      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064c8:	e01c      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ca:	4bb8      	ldr	r3, [pc, #736]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ce:	4ab7      	ldr	r2, [pc, #732]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064d6:	e01a      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	3308      	adds	r3, #8
 80064de:	2102      	movs	r1, #2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fc8f 	bl	8007e04 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064ec:	e00f      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f2:	3328      	adds	r3, #40	@ 0x28
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 fd36 	bl	8007f68 <RCCEx_PLL3_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006502:	e004      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800650c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006516:	4ba5      	ldr	r3, [pc, #660]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006524:	4aa1      	ldr	r2, [pc, #644]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006526:	430b      	orrs	r3, r1
 8006528:	6513      	str	r3, [r2, #80]	@ 0x50
 800652a:	e003      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006540:	f04f 0900 	mov.w	r9, #0
 8006544:	ea58 0309 	orrs.w	r3, r8, r9
 8006548:	d047      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006550:	2b04      	cmp	r3, #4
 8006552:	d82a      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006571 	.word	0x08006571
 8006560:	0800657f 	.word	0x0800657f
 8006564:	08006595 	.word	0x08006595
 8006568:	080065b3 	.word	0x080065b3
 800656c:	080065b3 	.word	0x080065b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006570:	4b8e      	ldr	r3, [pc, #568]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	4a8d      	ldr	r2, [pc, #564]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800657a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800657c:	e01a      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006582:	3308      	adds	r3, #8
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f001 fc3c 	bl	8007e04 <RCCEx_PLL2_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006592:	e00f      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006598:	3328      	adds	r3, #40	@ 0x28
 800659a:	2100      	movs	r1, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f001 fce3 	bl	8007f68 <RCCEx_PLL3_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065a8:	e004      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b0:	e000      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80065b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065bc:	4b7b      	ldr	r3, [pc, #492]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c0:	f023 0107 	bic.w	r1, r3, #7
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ca:	4a78      	ldr	r2, [pc, #480]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80065d0:	e003      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80065e6:	f04f 0b00 	mov.w	fp, #0
 80065ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80065ee:	d04c      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065fa:	d030      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80065fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006600:	d829      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006602:	2bc0      	cmp	r3, #192	@ 0xc0
 8006604:	d02d      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006606:	2bc0      	cmp	r3, #192	@ 0xc0
 8006608:	d825      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800660a:	2b80      	cmp	r3, #128	@ 0x80
 800660c:	d018      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800660e:	2b80      	cmp	r3, #128	@ 0x80
 8006610:	d821      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	d007      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800661a:	e01c      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661c:	4b63      	ldr	r3, [pc, #396]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	4a62      	ldr	r2, [pc, #392]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006628:	e01c      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662e:	3308      	adds	r3, #8
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f001 fbe6 	bl	8007e04 <RCCEx_PLL2_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800663e:	e011      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006644:	3328      	adds	r3, #40	@ 0x28
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fc8d 	bl	8007f68 <RCCEx_PLL3_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006654:	e006      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800665c:	e002      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800665e:	bf00      	nop
 8006660:	e000      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800666c:	4b4f      	ldr	r3, [pc, #316]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800666e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006670:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800667a:	4a4c      	ldr	r2, [pc, #304]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800667c:	430b      	orrs	r3, r1
 800667e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006696:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80066a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80066a4:	460b      	mov	r3, r1
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d053      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066b6:	d035      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80066b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066bc:	d82e      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80066be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066c2:	d031      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80066c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066c8:	d828      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80066ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ce:	d01a      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80066d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066d4:	d822      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80066da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066de:	d007      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80066e0:	e01c      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e2:	4b32      	ldr	r3, [pc, #200]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	4a31      	ldr	r2, [pc, #196]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066ee:	e01c      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f4:	3308      	adds	r3, #8
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 fb83 	bl	8007e04 <RCCEx_PLL2_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006704:	e011      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	3328      	adds	r3, #40	@ 0x28
 800670c:	2100      	movs	r1, #0
 800670e:	4618      	mov	r0, r3
 8006710:	f001 fc2a 	bl	8007f68 <RCCEx_PLL3_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800671a:	e006      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006722:	e002      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006724:	bf00      	nop
 8006726:	e000      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800672a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006732:	4b1e      	ldr	r3, [pc, #120]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006736:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800673a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006742:	4a1a      	ldr	r2, [pc, #104]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006744:	430b      	orrs	r3, r1
 8006746:	6593      	str	r3, [r2, #88]	@ 0x58
 8006748:	e003      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800675e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006762:	2300      	movs	r3, #0
 8006764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006768:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d056      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800677a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800677e:	d038      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006784:	d831      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006786:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800678a:	d034      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800678c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006790:	d82b      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006796:	d01d      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800679c:	d825      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d006      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80067a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067a6:	d00a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067a8:	e01f      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80067aa:	bf00      	nop
 80067ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b0:	4ba2      	ldr	r3, [pc, #648]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b4:	4aa1      	ldr	r2, [pc, #644]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067bc:	e01c      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	3308      	adds	r3, #8
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fb1c 	bl	8007e04 <RCCEx_PLL2_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067d2:	e011      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	3328      	adds	r3, #40	@ 0x28
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fbc3 	bl	8007f68 <RCCEx_PLL3_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067e8:	e006      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067f0:	e002      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80067f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006800:	4b8e      	ldr	r3, [pc, #568]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006804:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006810:	4a8a      	ldr	r2, [pc, #552]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006812:	430b      	orrs	r3, r1
 8006814:	6593      	str	r3, [r2, #88]	@ 0x58
 8006816:	e003      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800681c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800682c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006836:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800683a:	460b      	mov	r3, r1
 800683c:	4313      	orrs	r3, r2
 800683e:	d03a      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006846:	2b30      	cmp	r3, #48	@ 0x30
 8006848:	d01f      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800684a:	2b30      	cmp	r3, #48	@ 0x30
 800684c:	d819      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800684e:	2b20      	cmp	r3, #32
 8006850:	d00c      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006852:	2b20      	cmp	r3, #32
 8006854:	d815      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d019      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800685a:	2b10      	cmp	r3, #16
 800685c:	d111      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685e:	4b77      	ldr	r3, [pc, #476]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	4a76      	ldr	r2, [pc, #472]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800686a:	e011      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006870:	3308      	adds	r3, #8
 8006872:	2102      	movs	r1, #2
 8006874:	4618      	mov	r0, r3
 8006876:	f001 fac5 	bl	8007e04 <RCCEx_PLL2_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006880:	e006      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006888:	e002      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800688e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006898:	4b68      	ldr	r3, [pc, #416]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800689a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a6:	4a65      	ldr	r2, [pc, #404]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068a8:	430b      	orrs	r3, r1
 80068aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068ac:	e003      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80068c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068c6:	2300      	movs	r3, #0
 80068c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4313      	orrs	r3, r2
 80068d4:	d051      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068e0:	d035      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80068e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068e6:	d82e      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068ec:	d031      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80068ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068f2:	d828      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f8:	d01a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80068fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068fe:	d822      	bhi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006908:	d007      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800690a:	e01c      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690c:	4b4b      	ldr	r3, [pc, #300]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4a4a      	ldr	r2, [pc, #296]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006918:	e01c      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	3308      	adds	r3, #8
 8006920:	2100      	movs	r1, #0
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fa6e 	bl	8007e04 <RCCEx_PLL2_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800692e:	e011      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	3328      	adds	r3, #40	@ 0x28
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fb15 	bl	8007f68 <RCCEx_PLL3_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006944:	e006      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800695c:	4b37      	ldr	r3, [pc, #220]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800695e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006960:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800696a:	4a34      	ldr	r2, [pc, #208]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800696c:	430b      	orrs	r3, r1
 800696e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006970:	e003      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800698a:	2300      	movs	r3, #0
 800698c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006990:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d056      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069a4:	d033      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80069a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069aa:	d82c      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069b0:	d02f      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80069b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069b6:	d826      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069bc:	d02b      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80069be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069c2:	d820      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c8:	d012      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80069ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069ce:	d81a      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d022      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d8:	d115      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	3308      	adds	r3, #8
 80069e0:	2101      	movs	r1, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	f001 fa0e 	bl	8007e04 <RCCEx_PLL2_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069ee:	e015      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f4:	3328      	adds	r3, #40	@ 0x28
 80069f6:	2101      	movs	r1, #1
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 fab5 	bl	8007f68 <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a04:	e00a      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a0c:	e006      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a0e:	bf00      	nop
 8006a10:	e004      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a12:	bf00      	nop
 8006a14:	e002      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10d      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a24:	4b05      	ldr	r3, [pc, #20]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a32:	4a02      	ldr	r2, [pc, #8]	@ (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a38:	e006      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006a54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4313      	orrs	r3, r2
 8006a66:	d055      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a74:	d033      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a7a:	d82c      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a80:	d02f      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a86:	d826      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a8c:	d02b      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006a8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a92:	d820      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a98:	d012      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a9e:	d81a      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d022      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa8:	d115      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	3308      	adds	r3, #8
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 f9a6 	bl	8007e04 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006abe:	e015      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac4:	3328      	adds	r3, #40	@ 0x28
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fa4d 	bl	8007f68 <RCCEx_PLL3_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e00a      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006adc:	e006      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ade:	bf00      	nop
 8006ae0:	e004      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006af4:	4ba3      	ldr	r3, [pc, #652]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b04:	4a9f      	ldr	r2, [pc, #636]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b0a:	e003      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006b20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b24:	2300      	movs	r3, #0
 8006b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4313      	orrs	r3, r2
 8006b32:	d037      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b3e:	d00e      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b44:	d816      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d018      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4e:	d111      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b50:	4b8c      	ldr	r3, [pc, #560]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	4a8b      	ldr	r2, [pc, #556]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b5c:	e00f      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b62:	3308      	adds	r3, #8
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 f94c 	bl	8007e04 <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b72:	e004      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b7a:	e000      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b86:	4b7f      	ldr	r3, [pc, #508]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b94:	4a7b      	ldr	r2, [pc, #492]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b9a:	e003      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	d039      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d81c      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006bce:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c11 	.word	0x08006c11
 8006bd8:	08006be5 	.word	0x08006be5
 8006bdc:	08006bf3 	.word	0x08006bf3
 8006be0:	08006c11 	.word	0x08006c11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be4:	4b67      	ldr	r3, [pc, #412]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	4a66      	ldr	r2, [pc, #408]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006bf0:	e00f      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	2102      	movs	r1, #2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f902 	bl	8007e04 <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c06:	e004      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c0e:	e000      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1e:	f023 0103 	bic.w	r1, r3, #3
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c28:	4a56      	ldr	r2, [pc, #344]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c2e:	e003      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006c52:	460b      	mov	r3, r1
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f000 809f 	beq.w	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c66:	f7fa fcd7 	bl	8001618 <HAL_GetTick>
 8006c6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c6e:	e00b      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c70:	f7fa fcd2 	bl	8001618 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b64      	cmp	r3, #100	@ 0x64
 8006c7e:	d903      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c86:	e005      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c88:	4b3f      	ldr	r3, [pc, #252]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ed      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d179      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c9c:	4b39      	ldr	r3, [pc, #228]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ca8:	4053      	eors	r3, r2
 8006caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d015      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cb2:	4b34      	ldr	r3, [pc, #208]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cbe:	4b31      	ldr	r3, [pc, #196]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc2:	4a30      	ldr	r2, [pc, #192]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cca:	4b2e      	ldr	r3, [pc, #184]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cce:	4a2d      	ldr	r2, [pc, #180]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cdc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cea:	d118      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cec:	f7fa fc94 	bl	8001618 <HAL_GetTick>
 8006cf0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cf4:	e00d      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf6:	f7fa fc8f 	bl	8001618 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d903      	bls.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006d10:	e005      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d12:	4b1c      	ldr	r3, [pc, #112]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0eb      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d129      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d36:	d10e      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006d38:	4b12      	ldr	r3, [pc, #72]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d48:	091a      	lsrs	r2, r3, #4
 8006d4a:	4b10      	ldr	r3, [pc, #64]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6113      	str	r3, [r2, #16]
 8006d54:	e005      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006d56:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d60:	6113      	str	r3, [r2, #16]
 8006d62:	4b08      	ldr	r3, [pc, #32]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d72:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d78:	e00e      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006d82:	e009      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006d84:	58024400 	.word	0x58024400
 8006d88:	58024800 	.word	0x58024800
 8006d8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f002 0301 	and.w	r3, r2, #1
 8006da4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4313      	orrs	r3, r2
 8006db6:	f000 8089 	beq.w	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dc0:	2b28      	cmp	r3, #40	@ 0x28
 8006dc2:	d86b      	bhi.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006ea5 	.word	0x08006ea5
 8006dd0:	08006e9d 	.word	0x08006e9d
 8006dd4:	08006e9d 	.word	0x08006e9d
 8006dd8:	08006e9d 	.word	0x08006e9d
 8006ddc:	08006e9d 	.word	0x08006e9d
 8006de0:	08006e9d 	.word	0x08006e9d
 8006de4:	08006e9d 	.word	0x08006e9d
 8006de8:	08006e9d 	.word	0x08006e9d
 8006dec:	08006e71 	.word	0x08006e71
 8006df0:	08006e9d 	.word	0x08006e9d
 8006df4:	08006e9d 	.word	0x08006e9d
 8006df8:	08006e9d 	.word	0x08006e9d
 8006dfc:	08006e9d 	.word	0x08006e9d
 8006e00:	08006e9d 	.word	0x08006e9d
 8006e04:	08006e9d 	.word	0x08006e9d
 8006e08:	08006e9d 	.word	0x08006e9d
 8006e0c:	08006e87 	.word	0x08006e87
 8006e10:	08006e9d 	.word	0x08006e9d
 8006e14:	08006e9d 	.word	0x08006e9d
 8006e18:	08006e9d 	.word	0x08006e9d
 8006e1c:	08006e9d 	.word	0x08006e9d
 8006e20:	08006e9d 	.word	0x08006e9d
 8006e24:	08006e9d 	.word	0x08006e9d
 8006e28:	08006e9d 	.word	0x08006e9d
 8006e2c:	08006ea5 	.word	0x08006ea5
 8006e30:	08006e9d 	.word	0x08006e9d
 8006e34:	08006e9d 	.word	0x08006e9d
 8006e38:	08006e9d 	.word	0x08006e9d
 8006e3c:	08006e9d 	.word	0x08006e9d
 8006e40:	08006e9d 	.word	0x08006e9d
 8006e44:	08006e9d 	.word	0x08006e9d
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006e9d 	.word	0x08006e9d
 8006e54:	08006e9d 	.word	0x08006e9d
 8006e58:	08006e9d 	.word	0x08006e9d
 8006e5c:	08006e9d 	.word	0x08006e9d
 8006e60:	08006e9d 	.word	0x08006e9d
 8006e64:	08006e9d 	.word	0x08006e9d
 8006e68:	08006e9d 	.word	0x08006e9d
 8006e6c:	08006ea5 	.word	0x08006ea5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e74:	3308      	adds	r3, #8
 8006e76:	2101      	movs	r1, #1
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 ffc3 	bl	8007e04 <RCCEx_PLL2_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e84:	e00f      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	3328      	adds	r3, #40	@ 0x28
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 f86a 	bl	8007f68 <RCCEx_PLL3_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e9a:	e004      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ea2:	e000      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10a      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006eae:	4bbf      	ldr	r3, [pc, #764]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ebc:	4abb      	ldr	r2, [pc, #748]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ec2:	e003      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f002 0302 	and.w	r3, r2, #2
 8006ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ee2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	d041      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d824      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8006efc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f49 	.word	0x08006f49
 8006f00:	08006f15 	.word	0x08006f15
 8006f04:	08006f2b 	.word	0x08006f2b
 8006f08:	08006f49 	.word	0x08006f49
 8006f0c:	08006f49 	.word	0x08006f49
 8006f10:	08006f49 	.word	0x08006f49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	3308      	adds	r3, #8
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 ff71 	bl	8007e04 <RCCEx_PLL2_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f28:	e00f      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	3328      	adds	r3, #40	@ 0x28
 8006f30:	2101      	movs	r1, #1
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f818 	bl	8007f68 <RCCEx_PLL3_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f3e:	e004      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f46:	e000      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f52:	4b96      	ldr	r3, [pc, #600]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f56:	f023 0107 	bic.w	r1, r3, #7
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f60:	4a92      	ldr	r2, [pc, #584]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f66:	e003      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f002 0304 	and.w	r3, r2, #4
 8006f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f80:	2300      	movs	r3, #0
 8006f82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	d044      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	d825      	bhi.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006ff1 	.word	0x08006ff1
 8006fa8:	08006fbd 	.word	0x08006fbd
 8006fac:	08006fd3 	.word	0x08006fd3
 8006fb0:	08006ff1 	.word	0x08006ff1
 8006fb4:	08006ff1 	.word	0x08006ff1
 8006fb8:	08006ff1 	.word	0x08006ff1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 ff1d 	bl	8007e04 <RCCEx_PLL2_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fd0:	e00f      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd6:	3328      	adds	r3, #40	@ 0x28
 8006fd8:	2101      	movs	r1, #1
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 ffc4 	bl	8007f68 <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fe6:	e004      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fee:	e000      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffe:	f023 0107 	bic.w	r1, r3, #7
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800700a:	4a68      	ldr	r2, [pc, #416]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800700c:	430b      	orrs	r3, r1
 800700e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007010:	e003      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f002 0320 	and.w	r3, r2, #32
 8007026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800702a:	2300      	movs	r3, #0
 800702c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d055      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007046:	d033      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800704c:	d82c      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007052:	d02f      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007058:	d826      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800705a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800705e:	d02b      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007064:	d820      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800706a:	d012      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800706c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007070:	d81a      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d022      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800707a:	d115      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800707c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007080:	3308      	adds	r3, #8
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f000 febd 	bl	8007e04 <RCCEx_PLL2_Config>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007090:	e015      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007096:	3328      	adds	r3, #40	@ 0x28
 8007098:	2102      	movs	r1, #2
 800709a:	4618      	mov	r0, r3
 800709c:	f000 ff64 	bl	8007f68 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070a6:	e00a      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070ae:	e006      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070b0:	bf00      	nop
 80070b2:	e004      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070b4:	bf00      	nop
 80070b6:	e002      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070b8:	bf00      	nop
 80070ba:	e000      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070c6:	4b39      	ldr	r3, [pc, #228]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d6:	4a35      	ldr	r2, [pc, #212]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070d8:	430b      	orrs	r3, r1
 80070da:	6553      	str	r3, [r2, #84]	@ 0x54
 80070dc:	e003      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80070f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070f6:	2300      	movs	r3, #0
 80070f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007100:	460b      	mov	r3, r1
 8007102:	4313      	orrs	r3, r2
 8007104:	d058      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800710e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007112:	d033      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007114:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007118:	d82c      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800711a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800711e:	d02f      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007124:	d826      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007126:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800712a:	d02b      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800712c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007130:	d820      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007136:	d012      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800713c:	d81a      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d022      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007146:	d115      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	3308      	adds	r3, #8
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fe57 	bl	8007e04 <RCCEx_PLL2_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800715c:	e015      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800715e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007162:	3328      	adds	r3, #40	@ 0x28
 8007164:	2102      	movs	r1, #2
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fefe 	bl	8007f68 <RCCEx_PLL3_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007172:	e00a      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800717a:	e006      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800717c:	bf00      	nop
 800717e:	e004      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007180:	bf00      	nop
 8007182:	e002      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800718a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10e      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007192:	4b06      	ldr	r3, [pc, #24]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007196:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a2:	4a02      	ldr	r2, [pc, #8]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80071a8:	e006      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80071aa:	bf00      	nop
 80071ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80071c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071c8:	2300      	movs	r3, #0
 80071ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80071d2:	460b      	mov	r3, r1
 80071d4:	4313      	orrs	r3, r2
 80071d6:	d055      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071e4:	d033      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80071e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071ea:	d82c      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f0:	d02f      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80071f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f6:	d826      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80071fc:	d02b      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80071fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007202:	d820      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007208:	d012      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800720a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800720e:	d81a      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d022      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007218:	d115      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	3308      	adds	r3, #8
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fdee 	bl	8007e04 <RCCEx_PLL2_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800722e:	e015      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007234:	3328      	adds	r3, #40	@ 0x28
 8007236:	2102      	movs	r1, #2
 8007238:	4618      	mov	r0, r3
 800723a:	f000 fe95 	bl	8007f68 <RCCEx_PLL3_Config>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007244:	e00a      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800724c:	e006      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800724e:	bf00      	nop
 8007250:	e004      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800725a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007264:	4ba1      	ldr	r3, [pc, #644]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007268:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007274:	4a9d      	ldr	r2, [pc, #628]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007276:	430b      	orrs	r3, r1
 8007278:	6593      	str	r3, [r2, #88]	@ 0x58
 800727a:	e003      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f002 0308 	and.w	r3, r2, #8
 8007290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007294:	2300      	movs	r3, #0
 8007296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800729a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800729e:	460b      	mov	r3, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	d01e      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b0:	d10c      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	3328      	adds	r3, #40	@ 0x28
 80072b8:	2102      	movs	r1, #2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fe54 	bl	8007f68 <RCCEx_PLL3_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80072cc:	4b87      	ldr	r3, [pc, #540]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072dc:	4a83      	ldr	r2, [pc, #524]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072de:	430b      	orrs	r3, r1
 80072e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f002 0310 	and.w	r3, r2, #16
 80072ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072f2:	2300      	movs	r3, #0
 80072f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80072fc:	460b      	mov	r3, r1
 80072fe:	4313      	orrs	r3, r2
 8007300:	d01e      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800730a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800730e:	d10c      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007314:	3328      	adds	r3, #40	@ 0x28
 8007316:	2102      	movs	r1, #2
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fe25 	bl	8007f68 <RCCEx_PLL3_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800732a:	4b70      	ldr	r3, [pc, #448]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800733a:	4a6c      	ldr	r2, [pc, #432]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800733c:	430b      	orrs	r3, r1
 800733e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800734c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007350:	2300      	movs	r3, #0
 8007352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007356:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800735a:	460b      	mov	r3, r1
 800735c:	4313      	orrs	r3, r2
 800735e:	d03e      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800736c:	d022      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800736e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007372:	d81b      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800737c:	d00b      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800737e:	e015      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007384:	3308      	adds	r3, #8
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fd3b 	bl	8007e04 <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007394:	e00f      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	3328      	adds	r3, #40	@ 0x28
 800739c:	2102      	movs	r1, #2
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fde2 	bl	8007f68 <RCCEx_PLL3_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10b      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073be:	4b4b      	ldr	r3, [pc, #300]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073ce:	4a47      	ldr	r2, [pc, #284]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80073d4:	e003      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80073ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073ec:	2300      	movs	r3, #0
 80073ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80073f4:	460b      	mov	r3, r1
 80073f6:	4313      	orrs	r3, r2
 80073f8:	d03b      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007402:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007406:	d01f      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800740c:	d818      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800740e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007412:	d003      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007418:	d007      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800741a:	e011      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741c:	4b33      	ldr	r3, [pc, #204]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	4a32      	ldr	r2, [pc, #200]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007428:	e00f      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742e:	3328      	adds	r3, #40	@ 0x28
 8007430:	2101      	movs	r1, #1
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fd98 	bl	8007f68 <RCCEx_PLL3_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800743e:	e004      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007446:	e000      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007452:	4b26      	ldr	r3, [pc, #152]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007456:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007462:	4a22      	ldr	r2, [pc, #136]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007464:	430b      	orrs	r3, r1
 8007466:	6553      	str	r3, [r2, #84]	@ 0x54
 8007468:	e003      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800747e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007480:	2300      	movs	r3, #0
 8007482:	677b      	str	r3, [r7, #116]	@ 0x74
 8007484:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d034      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800749c:	d007      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800749e:	e011      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a0:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a4:	4a11      	ldr	r2, [pc, #68]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074ac:	e00e      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	3308      	adds	r3, #8
 80074b4:	2102      	movs	r1, #2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fca4 	bl	8007e04 <RCCEx_PLL2_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074c2:	e003      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10d      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074d4:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e2:	4a02      	ldr	r2, [pc, #8]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074e4:	430b      	orrs	r3, r1
 80074e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074e8:	e006      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007506:	2300      	movs	r3, #0
 8007508:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800750a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800750e:	460b      	mov	r3, r1
 8007510:	4313      	orrs	r3, r2
 8007512:	d00c      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007518:	3328      	adds	r3, #40	@ 0x28
 800751a:	2102      	movs	r1, #2
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fd23 	bl	8007f68 <RCCEx_PLL3_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800753a:	663b      	str	r3, [r7, #96]	@ 0x60
 800753c:	2300      	movs	r3, #0
 800753e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007540:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007544:	460b      	mov	r3, r1
 8007546:	4313      	orrs	r3, r2
 8007548:	d038      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007556:	d018      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800755c:	d811      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800755e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007562:	d014      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007568:	d80b      	bhi.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d011      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800756e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007572:	d106      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007574:	4bc3      	ldr	r3, [pc, #780]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	4ac2      	ldr	r2, [pc, #776]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800757a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800757e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007580:	e008      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007588:	e004      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800758a:	bf00      	nop
 800758c:	e002      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800758e:	bf00      	nop
 8007590:	e000      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800759c:	4bb9      	ldr	r3, [pc, #740]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800759e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ac:	4ab5      	ldr	r2, [pc, #724]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80075c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075ca:	2300      	movs	r3, #0
 80075cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80075d2:	460b      	mov	r3, r1
 80075d4:	4313      	orrs	r3, r2
 80075d6:	d009      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075d8:	4baa      	ldr	r3, [pc, #680]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80075e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e6:	4aa7      	ldr	r2, [pc, #668]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80075f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80075fa:	2300      	movs	r3, #0
 80075fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80075fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007608:	4b9e      	ldr	r3, [pc, #632]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007618:	4a9a      	ldr	r2, [pc, #616]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800761a:	430b      	orrs	r3, r1
 800761c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800762a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800762c:	2300      	movs	r3, #0
 800762e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007630:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007634:	460b      	mov	r3, r1
 8007636:	4313      	orrs	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800763a:	4b92      	ldr	r3, [pc, #584]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800763c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800763e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007648:	4a8e      	ldr	r2, [pc, #568]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800764a:	430b      	orrs	r3, r1
 800764c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800765a:	643b      	str	r3, [r7, #64]	@ 0x40
 800765c:	2300      	movs	r3, #0
 800765e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007660:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007664:	460b      	mov	r3, r1
 8007666:	4313      	orrs	r3, r2
 8007668:	d00e      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800766a:	4b86      	ldr	r3, [pc, #536]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	4a85      	ldr	r2, [pc, #532]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007674:	6113      	str	r3, [r2, #16]
 8007676:	4b83      	ldr	r3, [pc, #524]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007678:	6919      	ldr	r1, [r3, #16]
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007682:	4a80      	ldr	r2, [pc, #512]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007684:	430b      	orrs	r3, r1
 8007686:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007696:	2300      	movs	r3, #0
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800769a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800769e:	460b      	mov	r3, r1
 80076a0:	4313      	orrs	r3, r2
 80076a2:	d009      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076a4:	4b77      	ldr	r3, [pc, #476]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	4a74      	ldr	r2, [pc, #464]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076b4:	430b      	orrs	r3, r1
 80076b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80076c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80076ce:	460b      	mov	r3, r1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	d00a      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076d4:	4b6b      	ldr	r3, [pc, #428]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076e4:	4a67      	ldr	r2, [pc, #412]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076e6:	430b      	orrs	r3, r1
 80076e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	2100      	movs	r1, #0
 80076f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007700:	460b      	mov	r3, r1
 8007702:	4313      	orrs	r3, r2
 8007704:	d011      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	3308      	adds	r3, #8
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fb78 	bl	8007e04 <RCCEx_PLL2_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800771a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800772a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	2100      	movs	r1, #0
 8007734:	6239      	str	r1, [r7, #32]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
 800773c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007740:	460b      	mov	r3, r1
 8007742:	4313      	orrs	r3, r2
 8007744:	d011      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774a:	3308      	adds	r3, #8
 800774c:	2101      	movs	r1, #1
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fb58 	bl	8007e04 <RCCEx_PLL2_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800775a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	2100      	movs	r1, #0
 8007774:	61b9      	str	r1, [r7, #24]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d011      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	3308      	adds	r3, #8
 800778c:	2102      	movs	r1, #2
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fb38 	bl	8007e04 <RCCEx_PLL2_Config>
 8007794:	4603      	mov	r3, r0
 8007796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800779a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	2100      	movs	r1, #0
 80077b4:	6139      	str	r1, [r7, #16]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80077c0:	460b      	mov	r3, r1
 80077c2:	4313      	orrs	r3, r2
 80077c4:	d011      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ca:	3328      	adds	r3, #40	@ 0x28
 80077cc:	2100      	movs	r1, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fbca 	bl	8007f68 <RCCEx_PLL3_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80077da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80077ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	2100      	movs	r1, #0
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007800:	460b      	mov	r3, r1
 8007802:	4313      	orrs	r3, r2
 8007804:	d011      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	3328      	adds	r3, #40	@ 0x28
 800780c:	2101      	movs	r1, #1
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fbaa 	bl	8007f68 <RCCEx_PLL3_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	2100      	movs	r1, #0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	607b      	str	r3, [r7, #4]
 800783c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007840:	460b      	mov	r3, r1
 8007842:	4313      	orrs	r3, r2
 8007844:	d011      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	3328      	adds	r3, #40	@ 0x28
 800784c:	2102      	movs	r1, #2
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fb8a 	bl	8007f68 <RCCEx_PLL3_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800785a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800786a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
}
 8007878:	4618      	mov	r0, r3
 800787a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800787e:	46bd      	mov	sp, r7
 8007880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007884:	58024400 	.word	0x58024400

08007888 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800788c:	f7fe fd96 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 8007890:	4602      	mov	r2, r0
 8007892:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	091b      	lsrs	r3, r3, #4
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	4904      	ldr	r1, [pc, #16]	@ (80078b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800789e:	5ccb      	ldrb	r3, [r1, r3]
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	58024400 	.word	0x58024400
 80078b0:	0800bda4 	.word	0x0800bda4

080078b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	@ 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078c6:	4b9f      	ldr	r3, [pc, #636]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ca:	0b1b      	lsrs	r3, r3, #12
 80078cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80078d2:	4b9c      	ldr	r3, [pc, #624]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d6:	091b      	lsrs	r3, r3, #4
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80078de:	4b99      	ldr	r3, [pc, #612]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e2:	08db      	lsrs	r3, r3, #3
 80078e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8111 	beq.w	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b02      	cmp	r3, #2
 8007906:	f000 8083 	beq.w	8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b02      	cmp	r3, #2
 800790e:	f200 80a1 	bhi.w	8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d056      	beq.n	80079cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800791e:	e099      	b.n	8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007920:	4b88      	ldr	r3, [pc, #544]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0320 	and.w	r3, r3, #32
 8007928:	2b00      	cmp	r3, #0
 800792a:	d02d      	beq.n	8007988 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800792c:	4b85      	ldr	r3, [pc, #532]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	08db      	lsrs	r3, r3, #3
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	4a84      	ldr	r2, [pc, #528]	@ (8007b48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007938:	fa22 f303 	lsr.w	r3, r2, r3
 800793c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	ee07 3a90 	vmov	s15, r3
 8007944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007956:	4b7b      	ldr	r3, [pc, #492]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007966:	ed97 6a03 	vldr	s12, [r7, #12]
 800796a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800796e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800797a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007982:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007986:	e087      	b.n	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007992:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799a:	4b6a      	ldr	r3, [pc, #424]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ca:	e065      	b.n	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079de:	4b59      	ldr	r3, [pc, #356]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a0e:	e043      	b.n	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a22:	4b48      	ldr	r3, [pc, #288]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a52:	e021      	b.n	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a66:	4b37      	ldr	r3, [pc, #220]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a98:	4b2a      	ldr	r3, [pc, #168]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9c:	0a5b      	lsrs	r3, r3, #9
 8007a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007abe:	ee17 2a90 	vmov	r2, s15
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aca:	0c1b      	lsrs	r3, r3, #16
 8007acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007adc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aec:	ee17 2a90 	vmov	r2, s15
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007af4:	4b13      	ldr	r3, [pc, #76]	@ (8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af8:	0e1b      	lsrs	r3, r3, #24
 8007afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b1a:	ee17 2a90 	vmov	r2, s15
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b22:	e008      	b.n	8007b36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
}
 8007b36:	bf00      	nop
 8007b38:	3724      	adds	r7, #36	@ 0x24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	58024400 	.word	0x58024400
 8007b48:	03d09000 	.word	0x03d09000
 8007b4c:	46000000 	.word	0x46000000
 8007b50:	4c742400 	.word	0x4c742400
 8007b54:	4a742400 	.word	0x4a742400
 8007b58:	4af42400 	.word	0x4af42400

08007b5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b089      	sub	sp, #36	@ 0x24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b64:	4ba1      	ldr	r3, [pc, #644]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b6e:	4b9f      	ldr	r3, [pc, #636]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b72:	0d1b      	lsrs	r3, r3, #20
 8007b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b86:	4b99      	ldr	r3, [pc, #612]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8a:	08db      	lsrs	r3, r3, #3
 8007b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	fb02 f303 	mul.w	r3, r2, r3
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8111 	beq.w	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	f000 8083 	beq.w	8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	f200 80a1 	bhi.w	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d056      	beq.n	8007c74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007bc6:	e099      	b.n	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bc8:	4b88      	ldr	r3, [pc, #544]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d02d      	beq.n	8007c30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bd4:	4b85      	ldr	r3, [pc, #532]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	08db      	lsrs	r3, r3, #3
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	4a84      	ldr	r2, [pc, #528]	@ (8007df0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007be0:	fa22 f303 	lsr.w	r3, r2, r3
 8007be4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	ee07 3a90 	vmov	s15, r3
 8007bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c2e:	e087      	b.n	8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c42:	4b6a      	ldr	r3, [pc, #424]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c72:	e065      	b.n	8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c86:	4b59      	ldr	r3, [pc, #356]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb6:	e043      	b.n	8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cca:	4b48      	ldr	r3, [pc, #288]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfa:	e021      	b.n	8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0e:	4b37      	ldr	r3, [pc, #220]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d40:	4b2a      	ldr	r3, [pc, #168]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d44:	0a5b      	lsrs	r3, r3, #9
 8007d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d66:	ee17 2a90 	vmov	r2, s15
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d94:	ee17 2a90 	vmov	r2, s15
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d9c:	4b13      	ldr	r3, [pc, #76]	@ (8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da0:	0e1b      	lsrs	r3, r3, #24
 8007da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc2:	ee17 2a90 	vmov	r2, s15
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007dca:	e008      	b.n	8007dde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	609a      	str	r2, [r3, #8]
}
 8007dde:	bf00      	nop
 8007de0:	3724      	adds	r7, #36	@ 0x24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	58024400 	.word	0x58024400
 8007df0:	03d09000 	.word	0x03d09000
 8007df4:	46000000 	.word	0x46000000
 8007df8:	4c742400 	.word	0x4c742400
 8007dfc:	4a742400 	.word	0x4a742400
 8007e00:	4af42400 	.word	0x4af42400

08007e04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e12:	4b53      	ldr	r3, [pc, #332]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d101      	bne.n	8007e22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e099      	b.n	8007f56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e22:	4b4f      	ldr	r3, [pc, #316]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a4e      	ldr	r2, [pc, #312]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e2e:	f7f9 fbf3 	bl	8001618 <HAL_GetTick>
 8007e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e34:	e008      	b.n	8007e48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e36:	f7f9 fbef 	bl	8001618 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d901      	bls.n	8007e48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e086      	b.n	8007f56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e48:	4b45      	ldr	r3, [pc, #276]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f0      	bne.n	8007e36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e54:	4b42      	ldr	r3, [pc, #264]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	031b      	lsls	r3, r3, #12
 8007e62:	493f      	ldr	r1, [pc, #252]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	025b      	lsls	r3, r3, #9
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	041b      	lsls	r3, r3, #16
 8007e86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	061b      	lsls	r3, r3, #24
 8007e94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e98:	4931      	ldr	r1, [pc, #196]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e9e:	4b30      	ldr	r3, [pc, #192]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	492d      	ldr	r1, [pc, #180]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	f023 0220 	bic.w	r2, r3, #32
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	4928      	ldr	r1, [pc, #160]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ec2:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	4a26      	ldr	r2, [pc, #152]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ec8:	f023 0310 	bic.w	r3, r3, #16
 8007ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ece:	4b24      	ldr	r3, [pc, #144]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ed2:	4b24      	ldr	r3, [pc, #144]	@ (8007f64 <RCCEx_PLL2_Config+0x160>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	69d2      	ldr	r2, [r2, #28]
 8007eda:	00d2      	lsls	r2, r2, #3
 8007edc:	4920      	ldr	r1, [pc, #128]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ee8:	f043 0310 	orr.w	r3, r3, #16
 8007eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	4a19      	ldr	r2, [pc, #100]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007efa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007efe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f00:	e00f      	b.n	8007f22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d106      	bne.n	8007f16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f08:	4b15      	ldr	r3, [pc, #84]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0c:	4a14      	ldr	r2, [pc, #80]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f14:	e005      	b.n	8007f22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f16:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	4a11      	ldr	r2, [pc, #68]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007f1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f22:	4b0f      	ldr	r3, [pc, #60]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a0e      	ldr	r2, [pc, #56]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007f28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f2e:	f7f9 fb73 	bl	8001618 <HAL_GetTick>
 8007f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f34:	e008      	b.n	8007f48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f36:	f7f9 fb6f 	bl	8001618 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d901      	bls.n	8007f48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e006      	b.n	8007f56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f48:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <RCCEx_PLL2_Config+0x15c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0f0      	beq.n	8007f36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	58024400 	.word	0x58024400
 8007f64:	ffff0007 	.word	0xffff0007

08007f68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f76:	4b53      	ldr	r3, [pc, #332]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8007f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d101      	bne.n	8007f86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e099      	b.n	80080ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f86:	4b4f      	ldr	r3, [pc, #316]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f92:	f7f9 fb41 	bl	8001618 <HAL_GetTick>
 8007f96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f98:	e008      	b.n	8007fac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f9a:	f7f9 fb3d 	bl	8001618 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d901      	bls.n	8007fac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e086      	b.n	80080ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fac:	4b45      	ldr	r3, [pc, #276]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f0      	bne.n	8007f9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fb8:	4b42      	ldr	r3, [pc, #264]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8007fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	051b      	lsls	r3, r3, #20
 8007fc6:	493f      	ldr	r1, [pc, #252]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	628b      	str	r3, [r1, #40]	@ 0x28
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	025b      	lsls	r3, r3, #9
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	061b      	lsls	r3, r3, #24
 8007ff8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ffc:	4931      	ldr	r1, [pc, #196]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008002:	4b30      	ldr	r3, [pc, #192]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008006:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	492d      	ldr	r1, [pc, #180]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008010:	4313      	orrs	r3, r2
 8008012:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008014:	4b2b      	ldr	r3, [pc, #172]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	4928      	ldr	r1, [pc, #160]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008022:	4313      	orrs	r3, r2
 8008024:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008026:	4b27      	ldr	r3, [pc, #156]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802a:	4a26      	ldr	r2, [pc, #152]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 800802c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008032:	4b24      	ldr	r3, [pc, #144]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008036:	4b24      	ldr	r3, [pc, #144]	@ (80080c8 <RCCEx_PLL3_Config+0x160>)
 8008038:	4013      	ands	r3, r2
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	69d2      	ldr	r2, [r2, #28]
 800803e:	00d2      	lsls	r2, r2, #3
 8008040:	4920      	ldr	r1, [pc, #128]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008046:	4b1f      	ldr	r3, [pc, #124]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804a:	4a1e      	ldr	r2, [pc, #120]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 800804c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008050:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d106      	bne.n	8008066 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008058:	4b1a      	ldr	r3, [pc, #104]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	4a19      	ldr	r2, [pc, #100]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 800805e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008064:	e00f      	b.n	8008086 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d106      	bne.n	800807a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800806c:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 800806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008070:	4a14      	ldr	r2, [pc, #80]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008078:	e005      	b.n	8008086 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800807a:	4b12      	ldr	r3, [pc, #72]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	4a11      	ldr	r2, [pc, #68]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008084:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008086:	4b0f      	ldr	r3, [pc, #60]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a0e      	ldr	r2, [pc, #56]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 800808c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008092:	f7f9 fac1 	bl	8001618 <HAL_GetTick>
 8008096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008098:	e008      	b.n	80080ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800809a:	f7f9 fabd 	bl	8001618 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e006      	b.n	80080ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080ac:	4b05      	ldr	r3, [pc, #20]	@ (80080c4 <RCCEx_PLL3_Config+0x15c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0f0      	beq.n	800809a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	58024400 	.word	0x58024400
 80080c8:	ffff0007 	.word	0xffff0007

080080cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e042      	b.n	8008164 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7f8 ff7b 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2224      	movs	r2, #36	@ 0x24
 80080fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0201 	bic.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 fa96 	bl	8009648 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fd2b 	bl	8008b78 <UART_SetConfig>
 8008122:	4603      	mov	r3, r0
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e01b      	b.n	8008164 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800813a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800814a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 fb15 	bl	800978c <UART_CheckIdleState>
 8008162:	4603      	mov	r3, r0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	@ 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008180:	2b20      	cmp	r3, #32
 8008182:	d137      	bne.n	80081f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_UART_Receive_IT+0x24>
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e030      	b.n	80081f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a18      	ldr	r2, [pc, #96]	@ (8008200 <HAL_UART_Receive_IT+0x94>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d01f      	beq.n	80081e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d018      	beq.n	80081e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	613b      	str	r3, [r7, #16]
   return(result);
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	461a      	mov	r2, r3
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	623b      	str	r3, [r7, #32]
 80081d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	69f9      	ldr	r1, [r7, #28]
 80081d6:	6a3a      	ldr	r2, [r7, #32]
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e6      	bne.n	80081b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	461a      	mov	r2, r3
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f001 fbe6 	bl	80099bc <UART_Start_Receive_IT>
 80081f0:	4603      	mov	r3, r0
 80081f2:	e000      	b.n	80081f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081f4:	2302      	movs	r3, #2
  }
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3728      	adds	r7, #40	@ 0x28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	58000c00 	.word	0x58000c00

08008204 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	@ 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008218:	2b20      	cmp	r3, #32
 800821a:	d167      	bne.n	80082ec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <HAL_UART_Transmit_DMA+0x24>
 8008222:	88fb      	ldrh	r3, [r7, #6]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e060      	b.n	80082ee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	88fa      	ldrh	r2, [r7, #6]
 8008236:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	88fa      	ldrh	r2, [r7, #6]
 800823e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2221      	movs	r2, #33	@ 0x21
 800824e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d028      	beq.n	80082ac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800825e:	4a26      	ldr	r2, [pc, #152]	@ (80082f8 <HAL_UART_Transmit_DMA+0xf4>)
 8008260:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008266:	4a25      	ldr	r2, [pc, #148]	@ (80082fc <HAL_UART_Transmit_DMA+0xf8>)
 8008268:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800826e:	4a24      	ldr	r2, [pc, #144]	@ (8008300 <HAL_UART_Transmit_DMA+0xfc>)
 8008270:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008276:	2200      	movs	r2, #0
 8008278:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008282:	4619      	mov	r1, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3328      	adds	r3, #40	@ 0x28
 800828a:	461a      	mov	r2, r3
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	f7f9 fe7f 	bl	8001f90 <HAL_DMA_Start_IT>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d009      	beq.n	80082ac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2210      	movs	r2, #16
 800829c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e020      	b.n	80082ee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2240      	movs	r2, #64	@ 0x40
 80082b2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	613b      	str	r3, [r7, #16]
   return(result);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082d4:	623a      	str	r2, [r7, #32]
 80082d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	69f9      	ldr	r1, [r7, #28]
 80082da:	6a3a      	ldr	r2, [r7, #32]
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e5      	bne.n	80082b4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e000      	b.n	80082ee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
  }
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3728      	adds	r7, #40	@ 0x28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	08009e9d 	.word	0x08009e9d
 80082fc:	08009f33 	.word	0x08009f33
 8008300:	0800a0b5 	.word	0x0800a0b5

08008304 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	@ 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008318:	2b20      	cmp	r3, #32
 800831a:	d137      	bne.n	800838c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_UART_Receive_DMA+0x24>
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e030      	b.n	800838e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a18      	ldr	r2, [pc, #96]	@ (8008398 <HAL_UART_Receive_DMA+0x94>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01f      	beq.n	800837c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d018      	beq.n	800837c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	613b      	str	r3, [r7, #16]
   return(result);
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800835e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	623b      	str	r3, [r7, #32]
 800836a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	69f9      	ldr	r1, [r7, #28]
 800836e:	6a3a      	ldr	r2, [r7, #32]
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	61bb      	str	r3, [r7, #24]
   return(result);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e6      	bne.n	800834a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800837c:	88fb      	ldrh	r3, [r7, #6]
 800837e:	461a      	mov	r2, r3
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f001 fc3c 	bl	8009c00 <UART_Start_Receive_DMA>
 8008388:	4603      	mov	r3, r0
 800838a:	e000      	b.n	800838e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800838c:	2302      	movs	r3, #2
  }
}
 800838e:	4618      	mov	r0, r3
 8008390:	3728      	adds	r7, #40	@ 0x28
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	58000c00 	.word	0x58000c00

0800839c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b0ba      	sub	sp, #232	@ 0xe8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80083c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80083ca:	4013      	ands	r3, r2
 80083cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80083d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d11b      	bne.n	8008410 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d015      	beq.n	8008410 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083e8:	f003 0320 	and.w	r3, r3, #32
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d105      	bne.n	80083fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d009      	beq.n	8008410 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8377 	beq.w	8008af4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	4798      	blx	r3
      }
      return;
 800840e:	e371      	b.n	8008af4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8123 	beq.w	8008660 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800841a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800841e:	4b8d      	ldr	r3, [pc, #564]	@ (8008654 <HAL_UART_IRQHandler+0x2b8>)
 8008420:	4013      	ands	r3, r2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008426:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800842a:	4b8b      	ldr	r3, [pc, #556]	@ (8008658 <HAL_UART_IRQHandler+0x2bc>)
 800842c:	4013      	ands	r3, r2
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8116 	beq.w	8008660 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d011      	beq.n	8008464 <HAL_UART_IRQHandler+0xc8>
 8008440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2201      	movs	r2, #1
 8008452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845a:	f043 0201 	orr.w	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d011      	beq.n	8008494 <HAL_UART_IRQHandler+0xf8>
 8008470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2202      	movs	r2, #2
 8008482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848a:	f043 0204 	orr.w	r2, r3, #4
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d011      	beq.n	80084c4 <HAL_UART_IRQHandler+0x128>
 80084a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2204      	movs	r2, #4
 80084b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ba:	f043 0202 	orr.w	r2, r3, #2
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d017      	beq.n	8008500 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80084dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008654 <HAL_UART_IRQHandler+0x2b8>)
 80084e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2208      	movs	r2, #8
 80084ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f6:	f043 0208 	orr.w	r2, r3, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008508:	2b00      	cmp	r3, #0
 800850a:	d012      	beq.n	8008532 <HAL_UART_IRQHandler+0x196>
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008510:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00c      	beq.n	8008532 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008528:	f043 0220 	orr.w	r2, r3, #32
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 82dd 	beq.w	8008af8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800853e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d013      	beq.n	8008572 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800854a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d105      	bne.n	8008562 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800855a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008578:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008586:	2b40      	cmp	r3, #64	@ 0x40
 8008588:	d005      	beq.n	8008596 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800858a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800858e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008592:	2b00      	cmp	r3, #0
 8008594:	d054      	beq.n	8008640 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fc1a 	bl	8009dd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a6:	2b40      	cmp	r3, #64	@ 0x40
 80085a8:	d146      	bne.n	8008638 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80085c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3308      	adds	r3, #8
 80085d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80085d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80085da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80085e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80085ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1d9      	bne.n	80085aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d017      	beq.n	8008630 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008606:	4a15      	ldr	r2, [pc, #84]	@ (800865c <HAL_UART_IRQHandler+0x2c0>)
 8008608:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008610:	4618      	mov	r0, r3
 8008612:	f7fa fa45 	bl	8002aa0 <HAL_DMA_Abort_IT>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d019      	beq.n	8008650 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800862a:	4610      	mov	r0, r2
 800862c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862e:	e00f      	b.n	8008650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fa8b 	bl	8008b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008636:	e00b      	b.n	8008650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fa87 	bl	8008b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800863e:	e007      	b.n	8008650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fa83 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800864e:	e253      	b.n	8008af8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	bf00      	nop
    return;
 8008652:	e251      	b.n	8008af8 <HAL_UART_IRQHandler+0x75c>
 8008654:	10000001 	.word	0x10000001
 8008658:	04000120 	.word	0x04000120
 800865c:	0800a135 	.word	0x0800a135

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008664:	2b01      	cmp	r3, #1
 8008666:	f040 81e7 	bne.w	8008a38 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 81e0 	beq.w	8008a38 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 81d9 	beq.w	8008a38 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2210      	movs	r2, #16
 800868c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008698:	2b40      	cmp	r3, #64	@ 0x40
 800869a:	f040 8151 	bne.w	8008940 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a96      	ldr	r2, [pc, #600]	@ (8008900 <HAL_UART_IRQHandler+0x564>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d068      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a93      	ldr	r2, [pc, #588]	@ (8008904 <HAL_UART_IRQHandler+0x568>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d061      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a91      	ldr	r2, [pc, #580]	@ (8008908 <HAL_UART_IRQHandler+0x56c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d05a      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a8e      	ldr	r2, [pc, #568]	@ (800890c <HAL_UART_IRQHandler+0x570>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d053      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a8c      	ldr	r2, [pc, #560]	@ (8008910 <HAL_UART_IRQHandler+0x574>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d04c      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a89      	ldr	r2, [pc, #548]	@ (8008914 <HAL_UART_IRQHandler+0x578>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d045      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a87      	ldr	r2, [pc, #540]	@ (8008918 <HAL_UART_IRQHandler+0x57c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d03e      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a84      	ldr	r2, [pc, #528]	@ (800891c <HAL_UART_IRQHandler+0x580>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d037      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a82      	ldr	r2, [pc, #520]	@ (8008920 <HAL_UART_IRQHandler+0x584>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d030      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a7f      	ldr	r2, [pc, #508]	@ (8008924 <HAL_UART_IRQHandler+0x588>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d029      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a7d      	ldr	r2, [pc, #500]	@ (8008928 <HAL_UART_IRQHandler+0x58c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d022      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a7a      	ldr	r2, [pc, #488]	@ (800892c <HAL_UART_IRQHandler+0x590>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d01b      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a78      	ldr	r2, [pc, #480]	@ (8008930 <HAL_UART_IRQHandler+0x594>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d014      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a75      	ldr	r2, [pc, #468]	@ (8008934 <HAL_UART_IRQHandler+0x598>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00d      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a73      	ldr	r2, [pc, #460]	@ (8008938 <HAL_UART_IRQHandler+0x59c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d006      	beq.n	800877e <HAL_UART_IRQHandler+0x3e2>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a70      	ldr	r2, [pc, #448]	@ (800893c <HAL_UART_IRQHandler+0x5a0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d106      	bne.n	800878c <HAL_UART_IRQHandler+0x3f0>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	b29b      	uxth	r3, r3
 800878a:	e005      	b.n	8008798 <HAL_UART_IRQHandler+0x3fc>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b29b      	uxth	r3, r3
 8008798:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800879c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 81ab 	beq.w	8008afc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087b0:	429a      	cmp	r2, r3
 80087b2:	f080 81a3 	bcs.w	8008afc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087cc:	f000 8087 	beq.w	80088de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80087fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008806:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1da      	bne.n	80087d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800882a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3308      	adds	r3, #8
 800883a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800883e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008842:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008846:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e1      	bne.n	800881a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3308      	adds	r3, #8
 800885c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800886c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800887a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800887c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008880:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e3      	bne.n	8008856 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ac:	f023 0310 	bic.w	r3, r3, #16
 80088b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e4      	bne.n	800889c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d8:	4618      	mov	r0, r3
 80088da:	f7f9 fdc3 	bl	8002464 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2202      	movs	r2, #2
 80088e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f931 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088fe:	e0fd      	b.n	8008afc <HAL_UART_IRQHandler+0x760>
 8008900:	40020010 	.word	0x40020010
 8008904:	40020028 	.word	0x40020028
 8008908:	40020040 	.word	0x40020040
 800890c:	40020058 	.word	0x40020058
 8008910:	40020070 	.word	0x40020070
 8008914:	40020088 	.word	0x40020088
 8008918:	400200a0 	.word	0x400200a0
 800891c:	400200b8 	.word	0x400200b8
 8008920:	40020410 	.word	0x40020410
 8008924:	40020428 	.word	0x40020428
 8008928:	40020440 	.word	0x40020440
 800892c:	40020458 	.word	0x40020458
 8008930:	40020470 	.word	0x40020470
 8008934:	40020488 	.word	0x40020488
 8008938:	400204a0 	.word	0x400204a0
 800893c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800894c:	b29b      	uxth	r3, r3
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80cf 	beq.w	8008b00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80ca 	beq.w	8008b00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800897a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008980:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800898e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008990:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800899c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e4      	bne.n	800896c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	623b      	str	r3, [r7, #32]
   return(result);
 80089b2:	6a3a      	ldr	r2, [r7, #32]
 80089b4:	4b55      	ldr	r3, [pc, #340]	@ (8008b0c <HAL_UART_IRQHandler+0x770>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80089c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e3      	bne.n	80089a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0310 	bic.w	r3, r3, #16
 8008a02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	69b9      	ldr	r1, [r7, #24]
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e4      	bne.n	80089ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f895 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a36:	e063      	b.n	8008b00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00e      	beq.n	8008a62 <HAL_UART_IRQHandler+0x6c6>
 8008a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d008      	beq.n	8008a62 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f002 f8c8 	bl	800abf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a60:	e051      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d014      	beq.n	8008a98 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d03a      	beq.n	8008b04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
    }
    return;
 8008a96:	e035      	b.n	8008b04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d009      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x71c>
 8008aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fb55 	bl	800a160 <UART_EndTransmit_IT>
    return;
 8008ab6:	e026      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x73c>
 8008ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f002 f8a1 	bl	800ac18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ad6:	e016      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d010      	beq.n	8008b06 <HAL_UART_IRQHandler+0x76a>
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da0c      	bge.n	8008b06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f002 f889 	bl	800ac04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008af2:	e008      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8008af4:	bf00      	nop
 8008af6:	e006      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
    return;
 8008af8:	bf00      	nop
 8008afa:	e004      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8008afc:	bf00      	nop
 8008afe:	e002      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8008b00:	bf00      	nop
 8008b02:	e000      	b.n	8008b06 <HAL_UART_IRQHandler+0x76a>
    return;
 8008b04:	bf00      	nop
  }
}
 8008b06:	37e8      	adds	r7, #232	@ 0xe8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	effffffe 	.word	0xeffffffe

08008b10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b7c:	b092      	sub	sp, #72	@ 0x48
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	431a      	orrs	r2, r3
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	431a      	orrs	r2, r3
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4bbe      	ldr	r3, [pc, #760]	@ (8008ea0 <UART_SetConfig+0x328>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	6812      	ldr	r2, [r2, #0]
 8008bae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4ab3      	ldr	r2, [pc, #716]	@ (8008ea4 <UART_SetConfig+0x32c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008be0:	4313      	orrs	r3, r2
 8008be2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	4baf      	ldr	r3, [pc, #700]	@ (8008ea8 <UART_SetConfig+0x330>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	6812      	ldr	r2, [r2, #0]
 8008bf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	f023 010f 	bic.w	r1, r3, #15
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4aa6      	ldr	r2, [pc, #664]	@ (8008eac <UART_SetConfig+0x334>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d177      	bne.n	8008d08 <UART_SetConfig+0x190>
 8008c18:	4ba5      	ldr	r3, [pc, #660]	@ (8008eb0 <UART_SetConfig+0x338>)
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c20:	2b28      	cmp	r3, #40	@ 0x28
 8008c22:	d86d      	bhi.n	8008d00 <UART_SetConfig+0x188>
 8008c24:	a201      	add	r2, pc, #4	@ (adr r2, 8008c2c <UART_SetConfig+0xb4>)
 8008c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008cd1 	.word	0x08008cd1
 8008c30:	08008d01 	.word	0x08008d01
 8008c34:	08008d01 	.word	0x08008d01
 8008c38:	08008d01 	.word	0x08008d01
 8008c3c:	08008d01 	.word	0x08008d01
 8008c40:	08008d01 	.word	0x08008d01
 8008c44:	08008d01 	.word	0x08008d01
 8008c48:	08008d01 	.word	0x08008d01
 8008c4c:	08008cd9 	.word	0x08008cd9
 8008c50:	08008d01 	.word	0x08008d01
 8008c54:	08008d01 	.word	0x08008d01
 8008c58:	08008d01 	.word	0x08008d01
 8008c5c:	08008d01 	.word	0x08008d01
 8008c60:	08008d01 	.word	0x08008d01
 8008c64:	08008d01 	.word	0x08008d01
 8008c68:	08008d01 	.word	0x08008d01
 8008c6c:	08008ce1 	.word	0x08008ce1
 8008c70:	08008d01 	.word	0x08008d01
 8008c74:	08008d01 	.word	0x08008d01
 8008c78:	08008d01 	.word	0x08008d01
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008d01 	.word	0x08008d01
 8008c84:	08008d01 	.word	0x08008d01
 8008c88:	08008d01 	.word	0x08008d01
 8008c8c:	08008ce9 	.word	0x08008ce9
 8008c90:	08008d01 	.word	0x08008d01
 8008c94:	08008d01 	.word	0x08008d01
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008d01 	.word	0x08008d01
 8008ca0:	08008d01 	.word	0x08008d01
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008cf1 	.word	0x08008cf1
 8008cb0:	08008d01 	.word	0x08008d01
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008d01 	.word	0x08008d01
 8008cbc:	08008d01 	.word	0x08008d01
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d01 	.word	0x08008d01
 8008cc8:	08008d01 	.word	0x08008d01
 8008ccc:	08008cf9 	.word	0x08008cf9
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e222      	b.n	800911e <UART_SetConfig+0x5a6>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e21e      	b.n	800911e <UART_SetConfig+0x5a6>
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e21a      	b.n	800911e <UART_SetConfig+0x5a6>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e216      	b.n	800911e <UART_SetConfig+0x5a6>
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e212      	b.n	800911e <UART_SetConfig+0x5a6>
 8008cf8:	2340      	movs	r3, #64	@ 0x40
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e20e      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d00:	2380      	movs	r3, #128	@ 0x80
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e20a      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a69      	ldr	r2, [pc, #420]	@ (8008eb4 <UART_SetConfig+0x33c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d130      	bne.n	8008d74 <UART_SetConfig+0x1fc>
 8008d12:	4b67      	ldr	r3, [pc, #412]	@ (8008eb0 <UART_SetConfig+0x338>)
 8008d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	d826      	bhi.n	8008d6c <UART_SetConfig+0x1f4>
 8008d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d24 <UART_SetConfig+0x1ac>)
 8008d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d24:	08008d3d 	.word	0x08008d3d
 8008d28:	08008d45 	.word	0x08008d45
 8008d2c:	08008d4d 	.word	0x08008d4d
 8008d30:	08008d55 	.word	0x08008d55
 8008d34:	08008d5d 	.word	0x08008d5d
 8008d38:	08008d65 	.word	0x08008d65
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e1ec      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d44:	2304      	movs	r3, #4
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e1e8      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e1e4      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d54:	2310      	movs	r3, #16
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e1e0      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d5c:	2320      	movs	r3, #32
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e1dc      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d64:	2340      	movs	r3, #64	@ 0x40
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6a:	e1d8      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d6c:	2380      	movs	r3, #128	@ 0x80
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d72:	e1d4      	b.n	800911e <UART_SetConfig+0x5a6>
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a4f      	ldr	r2, [pc, #316]	@ (8008eb8 <UART_SetConfig+0x340>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d130      	bne.n	8008de0 <UART_SetConfig+0x268>
 8008d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8008eb0 <UART_SetConfig+0x338>)
 8008d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d826      	bhi.n	8008dd8 <UART_SetConfig+0x260>
 8008d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d90 <UART_SetConfig+0x218>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008da9 	.word	0x08008da9
 8008d94:	08008db1 	.word	0x08008db1
 8008d98:	08008db9 	.word	0x08008db9
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc9 	.word	0x08008dc9
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e1b6      	b.n	800911e <UART_SetConfig+0x5a6>
 8008db0:	2304      	movs	r3, #4
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e1b2      	b.n	800911e <UART_SetConfig+0x5a6>
 8008db8:	2308      	movs	r3, #8
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e1ae      	b.n	800911e <UART_SetConfig+0x5a6>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e1aa      	b.n	800911e <UART_SetConfig+0x5a6>
 8008dc8:	2320      	movs	r3, #32
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e1a6      	b.n	800911e <UART_SetConfig+0x5a6>
 8008dd0:	2340      	movs	r3, #64	@ 0x40
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd6:	e1a2      	b.n	800911e <UART_SetConfig+0x5a6>
 8008dd8:	2380      	movs	r3, #128	@ 0x80
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e19e      	b.n	800911e <UART_SetConfig+0x5a6>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a35      	ldr	r2, [pc, #212]	@ (8008ebc <UART_SetConfig+0x344>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d130      	bne.n	8008e4c <UART_SetConfig+0x2d4>
 8008dea:	4b31      	ldr	r3, [pc, #196]	@ (8008eb0 <UART_SetConfig+0x338>)
 8008dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d826      	bhi.n	8008e44 <UART_SetConfig+0x2cc>
 8008df6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dfc <UART_SetConfig+0x284>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e15 	.word	0x08008e15
 8008e00:	08008e1d 	.word	0x08008e1d
 8008e04:	08008e25 	.word	0x08008e25
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e35 	.word	0x08008e35
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e180      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e17c      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e178      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e174      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e34:	2320      	movs	r3, #32
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e170      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e3c:	2340      	movs	r3, #64	@ 0x40
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e16c      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e44:	2380      	movs	r3, #128	@ 0x80
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e168      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec0 <UART_SetConfig+0x348>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d142      	bne.n	8008edc <UART_SetConfig+0x364>
 8008e56:	4b16      	ldr	r3, [pc, #88]	@ (8008eb0 <UART_SetConfig+0x338>)
 8008e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d838      	bhi.n	8008ed4 <UART_SetConfig+0x35c>
 8008e62:	a201      	add	r2, pc, #4	@ (adr r2, 8008e68 <UART_SetConfig+0x2f0>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e81 	.word	0x08008e81
 8008e6c:	08008e89 	.word	0x08008e89
 8008e70:	08008e91 	.word	0x08008e91
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008ec5 	.word	0x08008ec5
 8008e7c:	08008ecd 	.word	0x08008ecd
 8008e80:	2300      	movs	r3, #0
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e14a      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e146      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e142      	b.n	800911e <UART_SetConfig+0x5a6>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e13e      	b.n	800911e <UART_SetConfig+0x5a6>
 8008ea0:	cfff69f3 	.word	0xcfff69f3
 8008ea4:	58000c00 	.word	0x58000c00
 8008ea8:	11fff4ff 	.word	0x11fff4ff
 8008eac:	40011000 	.word	0x40011000
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	40004400 	.word	0x40004400
 8008eb8:	40004800 	.word	0x40004800
 8008ebc:	40004c00 	.word	0x40004c00
 8008ec0:	40005000 	.word	0x40005000
 8008ec4:	2320      	movs	r3, #32
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e128      	b.n	800911e <UART_SetConfig+0x5a6>
 8008ecc:	2340      	movs	r3, #64	@ 0x40
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e124      	b.n	800911e <UART_SetConfig+0x5a6>
 8008ed4:	2380      	movs	r3, #128	@ 0x80
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e120      	b.n	800911e <UART_SetConfig+0x5a6>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4acb      	ldr	r2, [pc, #812]	@ (8009210 <UART_SetConfig+0x698>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d176      	bne.n	8008fd4 <UART_SetConfig+0x45c>
 8008ee6:	4bcb      	ldr	r3, [pc, #812]	@ (8009214 <UART_SetConfig+0x69c>)
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eee:	2b28      	cmp	r3, #40	@ 0x28
 8008ef0:	d86c      	bhi.n	8008fcc <UART_SetConfig+0x454>
 8008ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef8 <UART_SetConfig+0x380>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f9d 	.word	0x08008f9d
 8008efc:	08008fcd 	.word	0x08008fcd
 8008f00:	08008fcd 	.word	0x08008fcd
 8008f04:	08008fcd 	.word	0x08008fcd
 8008f08:	08008fcd 	.word	0x08008fcd
 8008f0c:	08008fcd 	.word	0x08008fcd
 8008f10:	08008fcd 	.word	0x08008fcd
 8008f14:	08008fcd 	.word	0x08008fcd
 8008f18:	08008fa5 	.word	0x08008fa5
 8008f1c:	08008fcd 	.word	0x08008fcd
 8008f20:	08008fcd 	.word	0x08008fcd
 8008f24:	08008fcd 	.word	0x08008fcd
 8008f28:	08008fcd 	.word	0x08008fcd
 8008f2c:	08008fcd 	.word	0x08008fcd
 8008f30:	08008fcd 	.word	0x08008fcd
 8008f34:	08008fcd 	.word	0x08008fcd
 8008f38:	08008fad 	.word	0x08008fad
 8008f3c:	08008fcd 	.word	0x08008fcd
 8008f40:	08008fcd 	.word	0x08008fcd
 8008f44:	08008fcd 	.word	0x08008fcd
 8008f48:	08008fcd 	.word	0x08008fcd
 8008f4c:	08008fcd 	.word	0x08008fcd
 8008f50:	08008fcd 	.word	0x08008fcd
 8008f54:	08008fcd 	.word	0x08008fcd
 8008f58:	08008fb5 	.word	0x08008fb5
 8008f5c:	08008fcd 	.word	0x08008fcd
 8008f60:	08008fcd 	.word	0x08008fcd
 8008f64:	08008fcd 	.word	0x08008fcd
 8008f68:	08008fcd 	.word	0x08008fcd
 8008f6c:	08008fcd 	.word	0x08008fcd
 8008f70:	08008fcd 	.word	0x08008fcd
 8008f74:	08008fcd 	.word	0x08008fcd
 8008f78:	08008fbd 	.word	0x08008fbd
 8008f7c:	08008fcd 	.word	0x08008fcd
 8008f80:	08008fcd 	.word	0x08008fcd
 8008f84:	08008fcd 	.word	0x08008fcd
 8008f88:	08008fcd 	.word	0x08008fcd
 8008f8c:	08008fcd 	.word	0x08008fcd
 8008f90:	08008fcd 	.word	0x08008fcd
 8008f94:	08008fcd 	.word	0x08008fcd
 8008f98:	08008fc5 	.word	0x08008fc5
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e0bc      	b.n	800911e <UART_SetConfig+0x5a6>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e0b8      	b.n	800911e <UART_SetConfig+0x5a6>
 8008fac:	2308      	movs	r3, #8
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e0b4      	b.n	800911e <UART_SetConfig+0x5a6>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e0b0      	b.n	800911e <UART_SetConfig+0x5a6>
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e0ac      	b.n	800911e <UART_SetConfig+0x5a6>
 8008fc4:	2340      	movs	r3, #64	@ 0x40
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e0a8      	b.n	800911e <UART_SetConfig+0x5a6>
 8008fcc:	2380      	movs	r3, #128	@ 0x80
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e0a4      	b.n	800911e <UART_SetConfig+0x5a6>
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a8f      	ldr	r2, [pc, #572]	@ (8009218 <UART_SetConfig+0x6a0>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d130      	bne.n	8009040 <UART_SetConfig+0x4c8>
 8008fde:	4b8d      	ldr	r3, [pc, #564]	@ (8009214 <UART_SetConfig+0x69c>)
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d826      	bhi.n	8009038 <UART_SetConfig+0x4c0>
 8008fea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <UART_SetConfig+0x478>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009009 	.word	0x08009009
 8008ff4:	08009011 	.word	0x08009011
 8008ff8:	08009019 	.word	0x08009019
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009029 	.word	0x08009029
 8009004:	08009031 	.word	0x08009031
 8009008:	2300      	movs	r3, #0
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e086      	b.n	800911e <UART_SetConfig+0x5a6>
 8009010:	2304      	movs	r3, #4
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e082      	b.n	800911e <UART_SetConfig+0x5a6>
 8009018:	2308      	movs	r3, #8
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e07e      	b.n	800911e <UART_SetConfig+0x5a6>
 8009020:	2310      	movs	r3, #16
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e07a      	b.n	800911e <UART_SetConfig+0x5a6>
 8009028:	2320      	movs	r3, #32
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e076      	b.n	800911e <UART_SetConfig+0x5a6>
 8009030:	2340      	movs	r3, #64	@ 0x40
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e072      	b.n	800911e <UART_SetConfig+0x5a6>
 8009038:	2380      	movs	r3, #128	@ 0x80
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e06e      	b.n	800911e <UART_SetConfig+0x5a6>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a75      	ldr	r2, [pc, #468]	@ (800921c <UART_SetConfig+0x6a4>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d130      	bne.n	80090ac <UART_SetConfig+0x534>
 800904a:	4b72      	ldr	r3, [pc, #456]	@ (8009214 <UART_SetConfig+0x69c>)
 800904c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b05      	cmp	r3, #5
 8009054:	d826      	bhi.n	80090a4 <UART_SetConfig+0x52c>
 8009056:	a201      	add	r2, pc, #4	@ (adr r2, 800905c <UART_SetConfig+0x4e4>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009075 	.word	0x08009075
 8009060:	0800907d 	.word	0x0800907d
 8009064:	08009085 	.word	0x08009085
 8009068:	0800908d 	.word	0x0800908d
 800906c:	08009095 	.word	0x08009095
 8009070:	0800909d 	.word	0x0800909d
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e050      	b.n	800911e <UART_SetConfig+0x5a6>
 800907c:	2304      	movs	r3, #4
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e04c      	b.n	800911e <UART_SetConfig+0x5a6>
 8009084:	2308      	movs	r3, #8
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e048      	b.n	800911e <UART_SetConfig+0x5a6>
 800908c:	2310      	movs	r3, #16
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e044      	b.n	800911e <UART_SetConfig+0x5a6>
 8009094:	2320      	movs	r3, #32
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e040      	b.n	800911e <UART_SetConfig+0x5a6>
 800909c:	2340      	movs	r3, #64	@ 0x40
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a2:	e03c      	b.n	800911e <UART_SetConfig+0x5a6>
 80090a4:	2380      	movs	r3, #128	@ 0x80
 80090a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090aa:	e038      	b.n	800911e <UART_SetConfig+0x5a6>
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a5b      	ldr	r2, [pc, #364]	@ (8009220 <UART_SetConfig+0x6a8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d130      	bne.n	8009118 <UART_SetConfig+0x5a0>
 80090b6:	4b57      	ldr	r3, [pc, #348]	@ (8009214 <UART_SetConfig+0x69c>)
 80090b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	2b05      	cmp	r3, #5
 80090c0:	d826      	bhi.n	8009110 <UART_SetConfig+0x598>
 80090c2:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <UART_SetConfig+0x550>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090e1 	.word	0x080090e1
 80090cc:	080090e9 	.word	0x080090e9
 80090d0:	080090f1 	.word	0x080090f1
 80090d4:	080090f9 	.word	0x080090f9
 80090d8:	08009101 	.word	0x08009101
 80090dc:	08009109 	.word	0x08009109
 80090e0:	2302      	movs	r3, #2
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e01a      	b.n	800911e <UART_SetConfig+0x5a6>
 80090e8:	2304      	movs	r3, #4
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e016      	b.n	800911e <UART_SetConfig+0x5a6>
 80090f0:	2308      	movs	r3, #8
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e012      	b.n	800911e <UART_SetConfig+0x5a6>
 80090f8:	2310      	movs	r3, #16
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e00e      	b.n	800911e <UART_SetConfig+0x5a6>
 8009100:	2320      	movs	r3, #32
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e00a      	b.n	800911e <UART_SetConfig+0x5a6>
 8009108:	2340      	movs	r3, #64	@ 0x40
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e006      	b.n	800911e <UART_SetConfig+0x5a6>
 8009110:	2380      	movs	r3, #128	@ 0x80
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e002      	b.n	800911e <UART_SetConfig+0x5a6>
 8009118:	2380      	movs	r3, #128	@ 0x80
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a3f      	ldr	r2, [pc, #252]	@ (8009220 <UART_SetConfig+0x6a8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	f040 80f8 	bne.w	800931a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800912a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800912e:	2b20      	cmp	r3, #32
 8009130:	dc46      	bgt.n	80091c0 <UART_SetConfig+0x648>
 8009132:	2b02      	cmp	r3, #2
 8009134:	f2c0 8082 	blt.w	800923c <UART_SetConfig+0x6c4>
 8009138:	3b02      	subs	r3, #2
 800913a:	2b1e      	cmp	r3, #30
 800913c:	d87e      	bhi.n	800923c <UART_SetConfig+0x6c4>
 800913e:	a201      	add	r2, pc, #4	@ (adr r2, 8009144 <UART_SetConfig+0x5cc>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	080091c7 	.word	0x080091c7
 8009148:	0800923d 	.word	0x0800923d
 800914c:	080091cf 	.word	0x080091cf
 8009150:	0800923d 	.word	0x0800923d
 8009154:	0800923d 	.word	0x0800923d
 8009158:	0800923d 	.word	0x0800923d
 800915c:	080091df 	.word	0x080091df
 8009160:	0800923d 	.word	0x0800923d
 8009164:	0800923d 	.word	0x0800923d
 8009168:	0800923d 	.word	0x0800923d
 800916c:	0800923d 	.word	0x0800923d
 8009170:	0800923d 	.word	0x0800923d
 8009174:	0800923d 	.word	0x0800923d
 8009178:	0800923d 	.word	0x0800923d
 800917c:	080091ef 	.word	0x080091ef
 8009180:	0800923d 	.word	0x0800923d
 8009184:	0800923d 	.word	0x0800923d
 8009188:	0800923d 	.word	0x0800923d
 800918c:	0800923d 	.word	0x0800923d
 8009190:	0800923d 	.word	0x0800923d
 8009194:	0800923d 	.word	0x0800923d
 8009198:	0800923d 	.word	0x0800923d
 800919c:	0800923d 	.word	0x0800923d
 80091a0:	0800923d 	.word	0x0800923d
 80091a4:	0800923d 	.word	0x0800923d
 80091a8:	0800923d 	.word	0x0800923d
 80091ac:	0800923d 	.word	0x0800923d
 80091b0:	0800923d 	.word	0x0800923d
 80091b4:	0800923d 	.word	0x0800923d
 80091b8:	0800923d 	.word	0x0800923d
 80091bc:	0800922f 	.word	0x0800922f
 80091c0:	2b40      	cmp	r3, #64	@ 0x40
 80091c2:	d037      	beq.n	8009234 <UART_SetConfig+0x6bc>
 80091c4:	e03a      	b.n	800923c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091c6:	f7fe fb5f 	bl	8007888 <HAL_RCCEx_GetD3PCLK1Freq>
 80091ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091cc:	e03c      	b.n	8009248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fb6e 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091dc:	e034      	b.n	8009248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091de:	f107 0318 	add.w	r3, r7, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fcba 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ec:	e02c      	b.n	8009248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ee:	4b09      	ldr	r3, [pc, #36]	@ (8009214 <UART_SetConfig+0x69c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0320 	and.w	r3, r3, #32
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d016      	beq.n	8009228 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091fa:	4b06      	ldr	r3, [pc, #24]	@ (8009214 <UART_SetConfig+0x69c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	08db      	lsrs	r3, r3, #3
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	4a07      	ldr	r2, [pc, #28]	@ (8009224 <UART_SetConfig+0x6ac>)
 8009206:	fa22 f303 	lsr.w	r3, r2, r3
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800920c:	e01c      	b.n	8009248 <UART_SetConfig+0x6d0>
 800920e:	bf00      	nop
 8009210:	40011400 	.word	0x40011400
 8009214:	58024400 	.word	0x58024400
 8009218:	40007800 	.word	0x40007800
 800921c:	40007c00 	.word	0x40007c00
 8009220:	58000c00 	.word	0x58000c00
 8009224:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009228:	4b9d      	ldr	r3, [pc, #628]	@ (80094a0 <UART_SetConfig+0x928>)
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922c:	e00c      	b.n	8009248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800922e:	4b9d      	ldr	r3, [pc, #628]	@ (80094a4 <UART_SetConfig+0x92c>)
 8009230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009232:	e009      	b.n	8009248 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923a:	e005      	b.n	8009248 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 81de 	beq.w	800960c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	4a94      	ldr	r2, [pc, #592]	@ (80094a8 <UART_SetConfig+0x930>)
 8009256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800925a:	461a      	mov	r2, r3
 800925c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800925e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009262:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	4413      	add	r3, r2
 800926e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009270:	429a      	cmp	r2, r3
 8009272:	d305      	bcc.n	8009280 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800927a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927c:	429a      	cmp	r2, r3
 800927e:	d903      	bls.n	8009288 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009286:	e1c1      	b.n	800960c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928a:	2200      	movs	r2, #0
 800928c:	60bb      	str	r3, [r7, #8]
 800928e:	60fa      	str	r2, [r7, #12]
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009294:	4a84      	ldr	r2, [pc, #528]	@ (80094a8 <UART_SetConfig+0x930>)
 8009296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800929a:	b29b      	uxth	r3, r3
 800929c:	2200      	movs	r2, #0
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092aa:	f7f7 f871 	bl	8000390 <__aeabi_uldivmod>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4610      	mov	r0, r2
 80092b4:	4619      	mov	r1, r3
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	f04f 0300 	mov.w	r3, #0
 80092be:	020b      	lsls	r3, r1, #8
 80092c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092c4:	0202      	lsls	r2, r0, #8
 80092c6:	6979      	ldr	r1, [r7, #20]
 80092c8:	6849      	ldr	r1, [r1, #4]
 80092ca:	0849      	lsrs	r1, r1, #1
 80092cc:	2000      	movs	r0, #0
 80092ce:	460c      	mov	r4, r1
 80092d0:	4605      	mov	r5, r0
 80092d2:	eb12 0804 	adds.w	r8, r2, r4
 80092d6:	eb43 0905 	adc.w	r9, r3, r5
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	469a      	mov	sl, r3
 80092e2:	4693      	mov	fp, r2
 80092e4:	4652      	mov	r2, sl
 80092e6:	465b      	mov	r3, fp
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f7 f850 	bl	8000390 <__aeabi_uldivmod>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4613      	mov	r3, r2
 80092f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092fe:	d308      	bcc.n	8009312 <UART_SetConfig+0x79a>
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009306:	d204      	bcs.n	8009312 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800930e:	60da      	str	r2, [r3, #12]
 8009310:	e17c      	b.n	800960c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009318:	e178      	b.n	800960c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009322:	f040 80c5 	bne.w	80094b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800932a:	2b20      	cmp	r3, #32
 800932c:	dc48      	bgt.n	80093c0 <UART_SetConfig+0x848>
 800932e:	2b00      	cmp	r3, #0
 8009330:	db7b      	blt.n	800942a <UART_SetConfig+0x8b2>
 8009332:	2b20      	cmp	r3, #32
 8009334:	d879      	bhi.n	800942a <UART_SetConfig+0x8b2>
 8009336:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <UART_SetConfig+0x7c4>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	080093c7 	.word	0x080093c7
 8009340:	080093cf 	.word	0x080093cf
 8009344:	0800942b 	.word	0x0800942b
 8009348:	0800942b 	.word	0x0800942b
 800934c:	080093d7 	.word	0x080093d7
 8009350:	0800942b 	.word	0x0800942b
 8009354:	0800942b 	.word	0x0800942b
 8009358:	0800942b 	.word	0x0800942b
 800935c:	080093e7 	.word	0x080093e7
 8009360:	0800942b 	.word	0x0800942b
 8009364:	0800942b 	.word	0x0800942b
 8009368:	0800942b 	.word	0x0800942b
 800936c:	0800942b 	.word	0x0800942b
 8009370:	0800942b 	.word	0x0800942b
 8009374:	0800942b 	.word	0x0800942b
 8009378:	0800942b 	.word	0x0800942b
 800937c:	080093f7 	.word	0x080093f7
 8009380:	0800942b 	.word	0x0800942b
 8009384:	0800942b 	.word	0x0800942b
 8009388:	0800942b 	.word	0x0800942b
 800938c:	0800942b 	.word	0x0800942b
 8009390:	0800942b 	.word	0x0800942b
 8009394:	0800942b 	.word	0x0800942b
 8009398:	0800942b 	.word	0x0800942b
 800939c:	0800942b 	.word	0x0800942b
 80093a0:	0800942b 	.word	0x0800942b
 80093a4:	0800942b 	.word	0x0800942b
 80093a8:	0800942b 	.word	0x0800942b
 80093ac:	0800942b 	.word	0x0800942b
 80093b0:	0800942b 	.word	0x0800942b
 80093b4:	0800942b 	.word	0x0800942b
 80093b8:	0800942b 	.word	0x0800942b
 80093bc:	0800941d 	.word	0x0800941d
 80093c0:	2b40      	cmp	r3, #64	@ 0x40
 80093c2:	d02e      	beq.n	8009422 <UART_SetConfig+0x8aa>
 80093c4:	e031      	b.n	800942a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093c6:	f7fd f829 	bl	800641c <HAL_RCC_GetPCLK1Freq>
 80093ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093cc:	e033      	b.n	8009436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093ce:	f7fd f83b 	bl	8006448 <HAL_RCC_GetPCLK2Freq>
 80093d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093d4:	e02f      	b.n	8009436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fa6a 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e4:	e027      	b.n	8009436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e6:	f107 0318 	add.w	r3, r7, #24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fbb6 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f4:	e01f      	b.n	8009436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093f6:	4b2d      	ldr	r3, [pc, #180]	@ (80094ac <UART_SetConfig+0x934>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0320 	and.w	r3, r3, #32
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009402:	4b2a      	ldr	r3, [pc, #168]	@ (80094ac <UART_SetConfig+0x934>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	08db      	lsrs	r3, r3, #3
 8009408:	f003 0303 	and.w	r3, r3, #3
 800940c:	4a24      	ldr	r2, [pc, #144]	@ (80094a0 <UART_SetConfig+0x928>)
 800940e:	fa22 f303 	lsr.w	r3, r2, r3
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009414:	e00f      	b.n	8009436 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009416:	4b22      	ldr	r3, [pc, #136]	@ (80094a0 <UART_SetConfig+0x928>)
 8009418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941a:	e00c      	b.n	8009436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800941c:	4b21      	ldr	r3, [pc, #132]	@ (80094a4 <UART_SetConfig+0x92c>)
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e009      	b.n	8009436 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009428:	e005      	b.n	8009436 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 80e7 	beq.w	800960c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009442:	4a19      	ldr	r2, [pc, #100]	@ (80094a8 <UART_SetConfig+0x930>)
 8009444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009448:	461a      	mov	r2, r3
 800944a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800944c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009450:	005a      	lsls	r2, r3, #1
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	441a      	add	r2, r3
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009462:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009466:	2b0f      	cmp	r3, #15
 8009468:	d916      	bls.n	8009498 <UART_SetConfig+0x920>
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009470:	d212      	bcs.n	8009498 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	b29b      	uxth	r3, r3
 8009476:	f023 030f 	bic.w	r3, r3, #15
 800947a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800947c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947e:	085b      	lsrs	r3, r3, #1
 8009480:	b29b      	uxth	r3, r3
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	b29a      	uxth	r2, r3
 8009488:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800948a:	4313      	orrs	r3, r2
 800948c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009494:	60da      	str	r2, [r3, #12]
 8009496:	e0b9      	b.n	800960c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800949e:	e0b5      	b.n	800960c <UART_SetConfig+0xa94>
 80094a0:	03d09000 	.word	0x03d09000
 80094a4:	003d0900 	.word	0x003d0900
 80094a8:	0800bdbc 	.word	0x0800bdbc
 80094ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80094b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094b4:	2b20      	cmp	r3, #32
 80094b6:	dc49      	bgt.n	800954c <UART_SetConfig+0x9d4>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db7c      	blt.n	80095b6 <UART_SetConfig+0xa3e>
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d87a      	bhi.n	80095b6 <UART_SetConfig+0xa3e>
 80094c0:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <UART_SetConfig+0x950>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	08009553 	.word	0x08009553
 80094cc:	0800955b 	.word	0x0800955b
 80094d0:	080095b7 	.word	0x080095b7
 80094d4:	080095b7 	.word	0x080095b7
 80094d8:	08009563 	.word	0x08009563
 80094dc:	080095b7 	.word	0x080095b7
 80094e0:	080095b7 	.word	0x080095b7
 80094e4:	080095b7 	.word	0x080095b7
 80094e8:	08009573 	.word	0x08009573
 80094ec:	080095b7 	.word	0x080095b7
 80094f0:	080095b7 	.word	0x080095b7
 80094f4:	080095b7 	.word	0x080095b7
 80094f8:	080095b7 	.word	0x080095b7
 80094fc:	080095b7 	.word	0x080095b7
 8009500:	080095b7 	.word	0x080095b7
 8009504:	080095b7 	.word	0x080095b7
 8009508:	08009583 	.word	0x08009583
 800950c:	080095b7 	.word	0x080095b7
 8009510:	080095b7 	.word	0x080095b7
 8009514:	080095b7 	.word	0x080095b7
 8009518:	080095b7 	.word	0x080095b7
 800951c:	080095b7 	.word	0x080095b7
 8009520:	080095b7 	.word	0x080095b7
 8009524:	080095b7 	.word	0x080095b7
 8009528:	080095b7 	.word	0x080095b7
 800952c:	080095b7 	.word	0x080095b7
 8009530:	080095b7 	.word	0x080095b7
 8009534:	080095b7 	.word	0x080095b7
 8009538:	080095b7 	.word	0x080095b7
 800953c:	080095b7 	.word	0x080095b7
 8009540:	080095b7 	.word	0x080095b7
 8009544:	080095b7 	.word	0x080095b7
 8009548:	080095a9 	.word	0x080095a9
 800954c:	2b40      	cmp	r3, #64	@ 0x40
 800954e:	d02e      	beq.n	80095ae <UART_SetConfig+0xa36>
 8009550:	e031      	b.n	80095b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009552:	f7fc ff63 	bl	800641c <HAL_RCC_GetPCLK1Freq>
 8009556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009558:	e033      	b.n	80095c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800955a:	f7fc ff75 	bl	8006448 <HAL_RCC_GetPCLK2Freq>
 800955e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009560:	e02f      	b.n	80095c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe f9a4 	bl	80078b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009570:	e027      	b.n	80095c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009572:	f107 0318 	add.w	r3, r7, #24
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe faf0 	bl	8007b5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009580:	e01f      	b.n	80095c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009582:	4b2d      	ldr	r3, [pc, #180]	@ (8009638 <UART_SetConfig+0xac0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0320 	and.w	r3, r3, #32
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800958e:	4b2a      	ldr	r3, [pc, #168]	@ (8009638 <UART_SetConfig+0xac0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	08db      	lsrs	r3, r3, #3
 8009594:	f003 0303 	and.w	r3, r3, #3
 8009598:	4a28      	ldr	r2, [pc, #160]	@ (800963c <UART_SetConfig+0xac4>)
 800959a:	fa22 f303 	lsr.w	r3, r2, r3
 800959e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095a0:	e00f      	b.n	80095c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80095a2:	4b26      	ldr	r3, [pc, #152]	@ (800963c <UART_SetConfig+0xac4>)
 80095a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a6:	e00c      	b.n	80095c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095a8:	4b25      	ldr	r3, [pc, #148]	@ (8009640 <UART_SetConfig+0xac8>)
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ac:	e009      	b.n	80095c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b4:	e005      	b.n	80095c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095c0:	bf00      	nop
    }

    if (pclk != 0U)
 80095c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d021      	beq.n	800960c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009644 <UART_SetConfig+0xacc>)
 80095ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095d2:	461a      	mov	r2, r3
 80095d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	085b      	lsrs	r3, r3, #1
 80095e0:	441a      	add	r2, r3
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ee:	2b0f      	cmp	r3, #15
 80095f0:	d909      	bls.n	8009606 <UART_SetConfig+0xa8e>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f8:	d205      	bcs.n	8009606 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	60da      	str	r2, [r3, #12]
 8009604:	e002      	b.n	800960c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2201      	movs	r2, #1
 8009610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2201      	movs	r2, #1
 8009618:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2200      	movs	r2, #0
 8009620:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2200      	movs	r2, #0
 8009626:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009628:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800962c:	4618      	mov	r0, r3
 800962e:	3748      	adds	r7, #72	@ 0x48
 8009630:	46bd      	mov	sp, r7
 8009632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009636:	bf00      	nop
 8009638:	58024400 	.word	0x58024400
 800963c:	03d09000 	.word	0x03d09000
 8009640:	003d0900 	.word	0x003d0900
 8009644:	0800bdbc 	.word	0x0800bdbc

08009648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00a      	beq.n	8009672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00a      	beq.n	80096b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096dc:	f003 0310 	and.w	r3, r3, #16
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00a      	beq.n	80096fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	430a      	orrs	r2, r1
 800971a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01a      	beq.n	800975e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009746:	d10a      	bne.n	800975e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	605a      	str	r2, [r3, #4]
  }
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b098      	sub	sp, #96	@ 0x60
 8009790:	af02      	add	r7, sp, #8
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800979c:	f7f7 ff3c 	bl	8001618 <HAL_GetTick>
 80097a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d12f      	bne.n	8009810 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097b8:	2200      	movs	r2, #0
 80097ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f88e 	bl	80098e0 <UART_WaitOnFlagUntilTimeout>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d022      	beq.n	8009810 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097de:	653b      	str	r3, [r7, #80]	@ 0x50
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e6      	bne.n	80097ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e063      	b.n	80098d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0304 	and.w	r3, r3, #4
 800981a:	2b04      	cmp	r3, #4
 800981c:	d149      	bne.n	80098b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800981e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009826:	2200      	movs	r2, #0
 8009828:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f857 	bl	80098e0 <UART_WaitOnFlagUntilTimeout>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d03c      	beq.n	80098b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	623b      	str	r3, [r7, #32]
   return(result);
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800984c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009856:	633b      	str	r3, [r7, #48]	@ 0x30
 8009858:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800985c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e6      	bne.n	8009838 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	60fb      	str	r3, [r7, #12]
   return(result);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f023 0301 	bic.w	r3, r3, #1
 8009880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800988a:	61fa      	str	r2, [r7, #28]
 800988c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	69b9      	ldr	r1, [r7, #24]
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	e841 2300 	strex	r3, r2, [r1]
 8009896:	617b      	str	r3, [r7, #20]
   return(result);
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e5      	bne.n	800986a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e012      	b.n	80098d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2220      	movs	r2, #32
 80098be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3758      	adds	r7, #88	@ 0x58
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098f0:	e04f      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f8:	d04b      	beq.n	8009992 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098fa:	f7f7 fe8d 	bl	8001618 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	429a      	cmp	r2, r3
 8009908:	d302      	bcc.n	8009910 <UART_WaitOnFlagUntilTimeout+0x30>
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e04e      	b.n	80099b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d037      	beq.n	8009992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b80      	cmp	r3, #128	@ 0x80
 8009926:	d034      	beq.n	8009992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b40      	cmp	r3, #64	@ 0x40
 800992c:	d031      	beq.n	8009992 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	f003 0308 	and.w	r3, r3, #8
 8009938:	2b08      	cmp	r3, #8
 800993a:	d110      	bne.n	800995e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2208      	movs	r2, #8
 8009942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 fa43 	bl	8009dd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2208      	movs	r2, #8
 800994e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e029      	b.n	80099b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800996c:	d111      	bne.n	8009992 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 fa29 	bl	8009dd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2220      	movs	r2, #32
 8009982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e00f      	b.n	80099b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69da      	ldr	r2, [r3, #28]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4013      	ands	r3, r2
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	429a      	cmp	r2, r3
 80099a0:	bf0c      	ite	eq
 80099a2:	2301      	moveq	r3, #1
 80099a4:	2300      	movne	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d0a0      	beq.n	80098f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099bc:	b480      	push	{r7}
 80099be:	b0a3      	sub	sp, #140	@ 0x8c
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	4613      	mov	r3, r2
 80099c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	88fa      	ldrh	r2, [r7, #6]
 80099d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	88fa      	ldrh	r2, [r7, #6]
 80099dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ee:	d10e      	bne.n	8009a0e <UART_Start_Receive_IT+0x52>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d105      	bne.n	8009a04 <UART_Start_Receive_IT+0x48>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80099fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a02:	e02d      	b.n	8009a60 <UART_Start_Receive_IT+0xa4>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	22ff      	movs	r2, #255	@ 0xff
 8009a08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a0c:	e028      	b.n	8009a60 <UART_Start_Receive_IT+0xa4>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10d      	bne.n	8009a32 <UART_Start_Receive_IT+0x76>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <UART_Start_Receive_IT+0x6c>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	22ff      	movs	r2, #255	@ 0xff
 8009a22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a26:	e01b      	b.n	8009a60 <UART_Start_Receive_IT+0xa4>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	227f      	movs	r2, #127	@ 0x7f
 8009a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a30:	e016      	b.n	8009a60 <UART_Start_Receive_IT+0xa4>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a3a:	d10d      	bne.n	8009a58 <UART_Start_Receive_IT+0x9c>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d104      	bne.n	8009a4e <UART_Start_Receive_IT+0x92>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	227f      	movs	r2, #127	@ 0x7f
 8009a48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a4c:	e008      	b.n	8009a60 <UART_Start_Receive_IT+0xa4>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	223f      	movs	r2, #63	@ 0x3f
 8009a52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a56:	e003      	b.n	8009a60 <UART_Start_Receive_IT+0xa4>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2222      	movs	r2, #34	@ 0x22
 8009a6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009a94:	673a      	str	r2, [r7, #112]	@ 0x70
 8009a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009a9a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009aa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e3      	bne.n	8009a70 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ab0:	d14f      	bne.n	8009b52 <UART_Start_Receive_IT+0x196>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ab8:	88fa      	ldrh	r2, [r7, #6]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d349      	bcc.n	8009b52 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ac6:	d107      	bne.n	8009ad8 <UART_Start_Receive_IT+0x11c>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d103      	bne.n	8009ad8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4a47      	ldr	r2, [pc, #284]	@ (8009bf0 <UART_Start_Receive_IT+0x234>)
 8009ad4:	675a      	str	r2, [r3, #116]	@ 0x74
 8009ad6:	e002      	b.n	8009ade <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4a46      	ldr	r2, [pc, #280]	@ (8009bf4 <UART_Start_Receive_IT+0x238>)
 8009adc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d01a      	beq.n	8009b1c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009afa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b0a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e4      	bne.n	8009ae6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3308      	adds	r3, #8
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3308      	adds	r3, #8
 8009b3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009b3c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009b3e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e5      	bne.n	8009b1c <UART_Start_Receive_IT+0x160>
 8009b50:	e046      	b.n	8009be0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b5a:	d107      	bne.n	8009b6c <UART_Start_Receive_IT+0x1b0>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d103      	bne.n	8009b6c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4a24      	ldr	r2, [pc, #144]	@ (8009bf8 <UART_Start_Receive_IT+0x23c>)
 8009b68:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b6a:	e002      	b.n	8009b72 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4a23      	ldr	r2, [pc, #140]	@ (8009bfc <UART_Start_Receive_IT+0x240>)
 8009b70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d019      	beq.n	8009bae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009b8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b9a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e6      	bne.n	8009b7a <UART_Start_Receive_IT+0x1be>
 8009bac:	e018      	b.n	8009be0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	e853 3f00 	ldrex	r3, [r3]
 8009bba:	613b      	str	r3, [r7, #16]
   return(result);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f043 0320 	orr.w	r3, r3, #32
 8009bc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bcc:	623b      	str	r3, [r7, #32]
 8009bce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	69f9      	ldr	r1, [r7, #28]
 8009bd2:	6a3a      	ldr	r2, [r7, #32]
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e6      	bne.n	8009bae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	378c      	adds	r7, #140	@ 0x8c
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	0800a889 	.word	0x0800a889
 8009bf4:	0800a529 	.word	0x0800a529
 8009bf8:	0800a371 	.word	0x0800a371
 8009bfc:	0800a1b9 	.word	0x0800a1b9

08009c00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b096      	sub	sp, #88	@ 0x58
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	88fa      	ldrh	r2, [r7, #6]
 8009c18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2222      	movs	r2, #34	@ 0x22
 8009c28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d02d      	beq.n	8009c92 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c3c:	4a40      	ldr	r2, [pc, #256]	@ (8009d40 <UART_Start_Receive_DMA+0x140>)
 8009c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c46:	4a3f      	ldr	r2, [pc, #252]	@ (8009d44 <UART_Start_Receive_DMA+0x144>)
 8009c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c50:	4a3d      	ldr	r2, [pc, #244]	@ (8009d48 <UART_Start_Receive_DMA+0x148>)
 8009c52:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3324      	adds	r3, #36	@ 0x24
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c70:	461a      	mov	r2, r3
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	f7f8 f98c 	bl	8001f90 <HAL_DMA_Start_IT>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d009      	beq.n	8009c92 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2210      	movs	r2, #16
 8009c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e051      	b.n	8009d36 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d018      	beq.n	8009ccc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e6      	bne.n	8009c9a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3308      	adds	r3, #8
 8009cea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cec:	637a      	str	r2, [r7, #52]	@ 0x34
 8009cee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e5      	bne.n	8009ccc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3308      	adds	r3, #8
 8009d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d20:	623a      	str	r2, [r7, #32]
 8009d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	69f9      	ldr	r1, [r7, #28]
 8009d26:	6a3a      	ldr	r2, [r7, #32]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e5      	bne.n	8009d00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3758      	adds	r7, #88	@ 0x58
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	08009f4f 	.word	0x08009f4f
 8009d44:	0800a077 	.word	0x0800a077
 8009d48:	0800a0b5 	.word	0x0800a0b5

08009d4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b08f      	sub	sp, #60	@ 0x3c
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d74:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e6      	bne.n	8009d54 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da6:	61ba      	str	r2, [r7, #24]
 8009da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	6979      	ldr	r1, [r7, #20]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	613b      	str	r3, [r7, #16]
   return(result);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e5      	bne.n	8009d86 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009dc2:	bf00      	nop
 8009dc4:	373c      	adds	r7, #60	@ 0x3c
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
	...

08009dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b095      	sub	sp, #84	@ 0x54
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009df6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009df8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009dfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e6      	bne.n	8009dd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3308      	adds	r3, #8
 8009e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e1a:	69fa      	ldr	r2, [r7, #28]
 8009e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8009e98 <UART_EndRxTransfer+0xc8>)
 8009e1e:	4013      	ands	r3, r2
 8009e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e5      	bne.n	8009e0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d118      	bne.n	8009e78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f023 0310 	bic.w	r3, r3, #16
 8009e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e64:	61bb      	str	r3, [r7, #24]
 8009e66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6979      	ldr	r1, [r7, #20]
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	613b      	str	r3, [r7, #16]
   return(result);
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e6      	bne.n	8009e46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e8c:	bf00      	nop
 8009e8e:	3754      	adds	r7, #84	@ 0x54
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	effffffe 	.word	0xeffffffe

08009e9c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b090      	sub	sp, #64	@ 0x40
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb2:	d037      	beq.n	8009f24 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	623b      	str	r3, [r7, #32]
   return(result);
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3308      	adds	r3, #8
 8009eda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009edc:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e5      	bne.n	8009ebc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	e853 3f00 	ldrex	r3, [r3]
 8009efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f12:	69b9      	ldr	r1, [r7, #24]
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	e841 2300 	strex	r3, r2, [r1]
 8009f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1e6      	bne.n	8009ef0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f22:	e002      	b.n	8009f2a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009f24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009f26:	f7fe fdf3 	bl	8008b10 <HAL_UART_TxCpltCallback>
}
 8009f2a:	bf00      	nop
 8009f2c:	3740      	adds	r7, #64	@ 0x40
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7fe fdef 	bl	8008b24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f46:	bf00      	nop
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b09c      	sub	sp, #112	@ 0x70
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f64:	d071      	beq.n	800a04a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f76:	e853 3f00 	ldrex	r3, [r3]
 8009f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f8e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f94:	e841 2300 	strex	r3, r2, [r1]
 8009f98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e6      	bne.n	8009f6e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009faa:	e853 3f00 	ldrex	r3, [r3]
 8009fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb2:	f023 0301 	bic.w	r3, r3, #1
 8009fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009fc0:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fc2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc8:	e841 2300 	strex	r3, r2, [r1]
 8009fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e5      	bne.n	8009fa0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fea:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009ff4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e5      	bne.n	8009fd4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a00a:	2220      	movs	r2, #32
 800a00c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a014:	2b01      	cmp	r3, #1
 800a016:	d118      	bne.n	800a04a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	60fb      	str	r3, [r7, #12]
   return(result);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f023 0310 	bic.w	r3, r3, #16
 800a02c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a02e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a036:	61fb      	str	r3, [r7, #28]
 800a038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	69b9      	ldr	r1, [r7, #24]
 800a03c:	69fa      	ldr	r2, [r7, #28]
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	617b      	str	r3, [r7, #20]
   return(result);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e6      	bne.n	800a018 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a04a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a04c:	2200      	movs	r2, #0
 800a04e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a054:	2b01      	cmp	r3, #1
 800a056:	d107      	bne.n	800a068 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a05a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a05e:	4619      	mov	r1, r3
 800a060:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a062:	f7fe fd7d 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a066:	e002      	b.n	800a06e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a068:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a06a:	f7f6 febb 	bl	8000de4 <HAL_UART_RxCpltCallback>
}
 800a06e:	bf00      	nop
 800a070:	3770      	adds	r7, #112	@ 0x70
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a082:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2201      	movs	r2, #1
 800a088:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d109      	bne.n	800a0a6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a098:	085b      	lsrs	r3, r3, #1
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	4619      	mov	r1, r3
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7fe fd5e 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0a4:	e002      	b.n	800a0ac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7fe fd46 	bl	8008b38 <HAL_UART_RxHalfCpltCallback>
}
 800a0ac:	bf00      	nop
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0dc:	2b80      	cmp	r3, #128	@ 0x80
 800a0de:	d109      	bne.n	800a0f4 <UART_DMAError+0x40>
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2b21      	cmp	r3, #33	@ 0x21
 800a0e4:	d106      	bne.n	800a0f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a0ee:	6978      	ldr	r0, [r7, #20]
 800a0f0:	f7ff fe2c 	bl	8009d4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fe:	2b40      	cmp	r3, #64	@ 0x40
 800a100:	d109      	bne.n	800a116 <UART_DMAError+0x62>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b22      	cmp	r3, #34	@ 0x22
 800a106:	d106      	bne.n	800a116 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a110:	6978      	ldr	r0, [r7, #20]
 800a112:	f7ff fe5d 	bl	8009dd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a11c:	f043 0210 	orr.w	r2, r3, #16
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a126:	6978      	ldr	r0, [r7, #20]
 800a128:	f7fe fd10 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a12c:	bf00      	nop
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7fe fcfa 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	60bb      	str	r3, [r7, #8]
   return(result);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	61bb      	str	r3, [r7, #24]
 800a188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	613b      	str	r3, [r7, #16]
   return(result);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e6      	bne.n	800a168 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2220      	movs	r2, #32
 800a19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7fe fcb1 	bl	8008b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ae:	bf00      	nop
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b09c      	sub	sp, #112	@ 0x70
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a1c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1d0:	2b22      	cmp	r3, #34	@ 0x22
 800a1d2:	f040 80be 	bne.w	800a352 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a1e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a1e4:	b2d9      	uxtb	r1, r3
 800a1e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1f0:	400a      	ands	r2, r1
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a206:	b29b      	uxth	r3, r3
 800a208:	3b01      	subs	r3, #1
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a218:	b29b      	uxth	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f040 80a1 	bne.w	800a362 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a22e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a234:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a23e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a240:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a24c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e6      	bne.n	800a220 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a264:	f023 0301 	bic.w	r3, r3, #1
 800a268:	667b      	str	r3, [r7, #100]	@ 0x64
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3308      	adds	r3, #8
 800a270:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a272:	647a      	str	r2, [r7, #68]	@ 0x44
 800a274:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a27a:	e841 2300 	strex	r3, r2, [r1]
 800a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1e5      	bne.n	800a252 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a33      	ldr	r2, [pc, #204]	@ (800a36c <UART_RxISR_8BIT+0x1b4>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d01f      	beq.n	800a2e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d018      	beq.n	800a2e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	623b      	str	r3, [r7, #32]
   return(result);
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d12e      	bne.n	800a34a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	e853 3f00 	ldrex	r3, [r3]
 800a2fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f023 0310 	bic.w	r3, r3, #16
 800a306:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a310:	61fb      	str	r3, [r7, #28]
 800a312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a314:	69b9      	ldr	r1, [r7, #24]
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	e841 2300 	strex	r3, r2, [r1]
 800a31c:	617b      	str	r3, [r7, #20]
   return(result);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e6      	bne.n	800a2f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	f003 0310 	and.w	r3, r3, #16
 800a32e:	2b10      	cmp	r3, #16
 800a330:	d103      	bne.n	800a33a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2210      	movs	r2, #16
 800a338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7fe fc0c 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a348:	e00b      	b.n	800a362 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7f6 fd4a 	bl	8000de4 <HAL_UART_RxCpltCallback>
}
 800a350:	e007      	b.n	800a362 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	699a      	ldr	r2, [r3, #24]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f042 0208 	orr.w	r2, r2, #8
 800a360:	619a      	str	r2, [r3, #24]
}
 800a362:	bf00      	nop
 800a364:	3770      	adds	r7, #112	@ 0x70
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	58000c00 	.word	0x58000c00

0800a370 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b09c      	sub	sp, #112	@ 0x70
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a37e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a388:	2b22      	cmp	r3, #34	@ 0x22
 800a38a:	f040 80be 	bne.w	800a50a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a394:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a39c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a39e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a3a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3b2:	1c9a      	adds	r2, r3, #2
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f040 80a1 	bne.w	800a51a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a3e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e6      	bne.n	800a3d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3308      	adds	r3, #8
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	f023 0301 	bic.w	r3, r3, #1
 800a420:	663b      	str	r3, [r7, #96]	@ 0x60
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3308      	adds	r3, #8
 800a428:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a42a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a430:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e5      	bne.n	800a40a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2220      	movs	r2, #32
 800a442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a33      	ldr	r2, [pc, #204]	@ (800a524 <UART_RxISR_16BIT+0x1b4>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d01f      	beq.n	800a49c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d018      	beq.n	800a49c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	61fb      	str	r3, [r7, #28]
   return(result);
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a47e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a48a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a48e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e6      	bne.n	800a46a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d12e      	bne.n	800a502 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f023 0310 	bic.w	r3, r3, #16
 800a4be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	f003 0310 	and.w	r3, r3, #16
 800a4e6:	2b10      	cmp	r3, #16
 800a4e8:	d103      	bne.n	800a4f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7fe fb30 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a500:	e00b      	b.n	800a51a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7f6 fc6e 	bl	8000de4 <HAL_UART_RxCpltCallback>
}
 800a508:	e007      	b.n	800a51a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	699a      	ldr	r2, [r3, #24]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f042 0208 	orr.w	r2, r2, #8
 800a518:	619a      	str	r2, [r3, #24]
}
 800a51a:	bf00      	nop
 800a51c:	3770      	adds	r7, #112	@ 0x70
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	58000c00 	.word	0x58000c00

0800a528 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b0ac      	sub	sp, #176	@ 0xb0
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a536:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a55e:	2b22      	cmp	r3, #34	@ 0x22
 800a560:	f040 8180 	bne.w	800a864 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a56a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a56e:	e123      	b.n	800a7b8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a576:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a57a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a57e:	b2d9      	uxtb	r1, r3
 800a580:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a584:	b2da      	uxtb	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a58a:	400a      	ands	r2, r1
 800a58c:	b2d2      	uxtb	r2, r2
 800a58e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a5b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d053      	beq.n	800a66a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d011      	beq.n	800a5f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a5ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a5d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00b      	beq.n	800a5f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5e8:	f043 0201 	orr.w	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d011      	beq.n	800a622 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a5fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00b      	beq.n	800a622 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2202      	movs	r2, #2
 800a610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a618:	f043 0204 	orr.w	r2, r3, #4
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d011      	beq.n	800a652 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a62e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00b      	beq.n	800a652 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2204      	movs	r2, #4
 800a640:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a648:	f043 0202 	orr.w	r2, r3, #2
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d006      	beq.n	800a66a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7fe fa75 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a670:	b29b      	uxth	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	f040 80a0 	bne.w	800a7b8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a68c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a69a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a69c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a6a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a6a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1e4      	bne.n	800a678 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a6be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6c0:	4b6e      	ldr	r3, [pc, #440]	@ (800a87c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a6d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a6d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a6e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e3      	bne.n	800a6ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a60      	ldr	r2, [pc, #384]	@ (800a880 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d021      	beq.n	800a748 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d01a      	beq.n	800a748 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a722:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a734:	657b      	str	r3, [r7, #84]	@ 0x54
 800a736:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a73a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e4      	bne.n	800a712 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d130      	bne.n	800a7b2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75e:	e853 3f00 	ldrex	r3, [r3]
 800a762:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a766:	f023 0310 	bic.w	r3, r3, #16
 800a76a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a778:	643b      	str	r3, [r7, #64]	@ 0x40
 800a77a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a77e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a780:	e841 2300 	strex	r3, r2, [r1]
 800a784:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e4      	bne.n	800a756 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	f003 0310 	and.w	r3, r3, #16
 800a796:	2b10      	cmp	r3, #16
 800a798:	d103      	bne.n	800a7a2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2210      	movs	r2, #16
 800a7a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7fe f9d8 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
 800a7b0:	e002      	b.n	800a7b8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7f6 fb16 	bl	8000de4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d006      	beq.n	800a7ce <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800a7c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f47f aed1 	bne.w	800a570 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a7d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d049      	beq.n	800a874 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a7e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d242      	bcs.n	800a874 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	e853 3f00 	ldrex	r3, [r3]
 800a7fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3308      	adds	r3, #8
 800a80e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e3      	bne.n	800a7ee <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a16      	ldr	r2, [pc, #88]	@ (800a884 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a82a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	60bb      	str	r3, [r7, #8]
   return(result);
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	f043 0320 	orr.w	r3, r3, #32
 800a840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a84e:	61bb      	str	r3, [r7, #24]
 800a850:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	6979      	ldr	r1, [r7, #20]
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	613b      	str	r3, [r7, #16]
   return(result);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e4      	bne.n	800a82c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a862:	e007      	b.n	800a874 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f042 0208 	orr.w	r2, r2, #8
 800a872:	619a      	str	r2, [r3, #24]
}
 800a874:	bf00      	nop
 800a876:	37b0      	adds	r7, #176	@ 0xb0
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	effffffe 	.word	0xeffffffe
 800a880:	58000c00 	.word	0x58000c00
 800a884:	0800a1b9 	.word	0x0800a1b9

0800a888 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b0ae      	sub	sp, #184	@ 0xb8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a896:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8be:	2b22      	cmp	r3, #34	@ 0x22
 800a8c0:	f040 8184 	bne.w	800abcc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a8ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8ce:	e127      	b.n	800ab20 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a8e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a8e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a8f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f8:	1c9a      	adds	r2, r3, #2
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a904:	b29b      	uxth	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	b29a      	uxth	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a91a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a91e:	f003 0307 	and.w	r3, r3, #7
 800a922:	2b00      	cmp	r3, #0
 800a924:	d053      	beq.n	800a9ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a92a:	f003 0301 	and.w	r3, r3, #1
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d011      	beq.n	800a956 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2201      	movs	r2, #1
 800a944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a94c:	f043 0201 	orr.w	r2, r3, #1
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d011      	beq.n	800a986 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2202      	movs	r2, #2
 800a974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a97c:	f043 0204 	orr.w	r2, r3, #4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d011      	beq.n	800a9b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ac:	f043 0202 	orr.w	r2, r3, #2
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d006      	beq.n	800a9ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7fe f8c3 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 80a2 	bne.w	800ab20 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a9ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa02:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e2      	bne.n	800a9dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa28:	4b6e      	ldr	r3, [pc, #440]	@ (800abe4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3308      	adds	r3, #8
 800aa36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800aa3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e3      	bne.n	800aa16 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a60      	ldr	r2, [pc, #384]	@ (800abe8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d021      	beq.n	800aab0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d01a      	beq.n	800aab0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa82:	e853 3f00 	ldrex	r3, [r3]
 800aa86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aaa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aaa4:	e841 2300 	strex	r3, r2, [r1]
 800aaa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aaaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1e4      	bne.n	800aa7a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d130      	bne.n	800ab1a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aace:	f023 0310 	bic.w	r3, r3, #16
 800aad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aae0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aae2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e4      	bne.n	800aabe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	f003 0310 	and.w	r3, r3, #16
 800aafe:	2b10      	cmp	r3, #16
 800ab00:	d103      	bne.n	800ab0a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2210      	movs	r2, #16
 800ab08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7fe f824 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
 800ab18:	e002      	b.n	800ab20 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7f6 f962 	bl	8000de4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab20:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d006      	beq.n	800ab36 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ab28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab2c:	f003 0320 	and.w	r3, r3, #32
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f47f aecd 	bne.w	800a8d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab3c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ab40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d049      	beq.n	800abdc <UART_RxISR_16BIT_FIFOEN+0x354>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab4e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d242      	bcs.n	800abdc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	e853 3f00 	ldrex	r3, [r3]
 800ab64:	623b      	str	r3, [r7, #32]
   return(result);
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3308      	adds	r3, #8
 800ab76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ab7a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e3      	bne.n	800ab56 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a16      	ldr	r2, [pc, #88]	@ (800abec <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ab92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	e853 3f00 	ldrex	r3, [r3]
 800aba0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f043 0320 	orr.w	r3, r3, #32
 800aba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	461a      	mov	r2, r3
 800abb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800abb6:	61fb      	str	r3, [r7, #28]
 800abb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	69b9      	ldr	r1, [r7, #24]
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	617b      	str	r3, [r7, #20]
   return(result);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e4      	bne.n	800ab94 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800abca:	e007      	b.n	800abdc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	699a      	ldr	r2, [r3, #24]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f042 0208 	orr.w	r2, r2, #8
 800abda:	619a      	str	r2, [r3, #24]
}
 800abdc:	bf00      	nop
 800abde:	37b8      	adds	r7, #184	@ 0xb8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	effffffe 	.word	0xeffffffe
 800abe8:	58000c00 	.word	0x58000c00
 800abec:	0800a371 	.word	0x0800a371

0800abf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d101      	bne.n	800ac42 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e027      	b.n	800ac92 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2224      	movs	r2, #36	@ 0x24
 800ac4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0201 	bic.w	r2, r2, #1
 800ac68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2220      	movs	r2, #32
 800ac84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e02d      	b.n	800ad12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2224      	movs	r2, #36	@ 0x24
 800acc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 0201 	bic.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f850 	bl	800ad98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d101      	bne.n	800ad32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	e02d      	b.n	800ad8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2224      	movs	r2, #36	@ 0x24
 800ad3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 0201 	bic.w	r2, r2, #1
 800ad58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	430a      	orrs	r2, r1
 800ad6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f812 	bl	800ad98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2220      	movs	r2, #32
 800ad80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d108      	bne.n	800adba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adb8:	e031      	b.n	800ae1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adba:	2310      	movs	r3, #16
 800adbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adbe:	2310      	movs	r3, #16
 800adc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	0e5b      	lsrs	r3, r3, #25
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	0f5b      	lsrs	r3, r3, #29
 800adda:	b2db      	uxtb	r3, r3
 800addc:	f003 0307 	and.w	r3, r3, #7
 800ade0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	7b3a      	ldrb	r2, [r7, #12]
 800ade6:	4911      	ldr	r1, [pc, #68]	@ (800ae2c <UARTEx_SetNbDataToProcess+0x94>)
 800ade8:	5c8a      	ldrb	r2, [r1, r2]
 800adea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adee:	7b3a      	ldrb	r2, [r7, #12]
 800adf0:	490f      	ldr	r1, [pc, #60]	@ (800ae30 <UARTEx_SetNbDataToProcess+0x98>)
 800adf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	7b7a      	ldrb	r2, [r7, #13]
 800ae04:	4909      	ldr	r1, [pc, #36]	@ (800ae2c <UARTEx_SetNbDataToProcess+0x94>)
 800ae06:	5c8a      	ldrb	r2, [r1, r2]
 800ae08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae0c:	7b7a      	ldrb	r2, [r7, #13]
 800ae0e:	4908      	ldr	r1, [pc, #32]	@ (800ae30 <UARTEx_SetNbDataToProcess+0x98>)
 800ae10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae12:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae1e:	bf00      	nop
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	0800bdd4 	.word	0x0800bdd4
 800ae30:	0800bddc 	.word	0x0800bddc

0800ae34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae34:	b084      	sub	sp, #16
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	f107 001c 	add.w	r0, r7, #28
 800ae42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d121      	bne.n	800ae92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68da      	ldr	r2, [r3, #12]
 800ae5e:	4b2c      	ldr	r3, [pc, #176]	@ (800af10 <USB_CoreInit+0xdc>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ae72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d105      	bne.n	800ae86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 faaa 	bl	800b3e0 <USB_CoreReset>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]
 800ae90:	e01b      	b.n	800aeca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa9e 	bl	800b3e0 <USB_CoreReset>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aea8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	639a      	str	r2, [r3, #56]	@ 0x38
 800aebc:	e005      	b.n	800aeca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aeca:	7fbb      	ldrb	r3, [r7, #30]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d116      	bne.n	800aefe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aede:	4b0d      	ldr	r3, [pc, #52]	@ (800af14 <USB_CoreInit+0xe0>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f043 0206 	orr.w	r2, r3, #6
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f043 0220 	orr.w	r2, r3, #32
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af0a:	b004      	add	sp, #16
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	ffbdffbf 	.word	0xffbdffbf
 800af14:	03ee0000 	.word	0x03ee0000

0800af18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f023 0201 	bic.w	r2, r3, #1
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	460b      	mov	r3, r1
 800af44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d115      	bne.n	800af88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800af68:	200a      	movs	r0, #10
 800af6a:	f7f6 fb61 	bl	8001630 <HAL_Delay>
      ms += 10U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	330a      	adds	r3, #10
 800af72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa25 	bl	800b3c4 <USB_GetMode>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d01e      	beq.n	800afbe <USB_SetCurrentMode+0x84>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2bc7      	cmp	r3, #199	@ 0xc7
 800af84:	d9f0      	bls.n	800af68 <USB_SetCurrentMode+0x2e>
 800af86:	e01a      	b.n	800afbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af88:	78fb      	ldrb	r3, [r7, #3]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d115      	bne.n	800afba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800af9a:	200a      	movs	r0, #10
 800af9c:	f7f6 fb48 	bl	8001630 <HAL_Delay>
      ms += 10U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	330a      	adds	r3, #10
 800afa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fa0c 	bl	800b3c4 <USB_GetMode>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <USB_SetCurrentMode+0x84>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2bc7      	cmp	r3, #199	@ 0xc7
 800afb6:	d9f0      	bls.n	800af9a <USB_SetCurrentMode+0x60>
 800afb8:	e001      	b.n	800afbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e005      	b.n	800afca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2bc8      	cmp	r3, #200	@ 0xc8
 800afc2:	d101      	bne.n	800afc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e000      	b.n	800afca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afd4:	b084      	sub	sp, #16
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b086      	sub	sp, #24
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800afe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800afee:	2300      	movs	r3, #0
 800aff0:	613b      	str	r3, [r7, #16]
 800aff2:	e009      	b.n	800b008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	3340      	adds	r3, #64	@ 0x40
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	2200      	movs	r2, #0
 800b000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	3301      	adds	r3, #1
 800b006:	613b      	str	r3, [r7, #16]
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	2b0e      	cmp	r3, #14
 800b00c:	d9f2      	bls.n	800aff4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b00e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b012:	2b00      	cmp	r3, #0
 800b014:	d11c      	bne.n	800b050 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b024:	f043 0302 	orr.w	r3, r3, #2
 800b028:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	e005      	b.n	800b05c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b054:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b062:	461a      	mov	r2, r3
 800b064:	2300      	movs	r3, #0
 800b066:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b068:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d10d      	bne.n	800b08c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b074:	2b00      	cmp	r3, #0
 800b076:	d104      	bne.n	800b082 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b078:	2100      	movs	r1, #0
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f968 	bl	800b350 <USB_SetDevSpeed>
 800b080:	e008      	b.n	800b094 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b082:	2101      	movs	r1, #1
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f963 	bl	800b350 <USB_SetDevSpeed>
 800b08a:	e003      	b.n	800b094 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b08c:	2103      	movs	r1, #3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f95e 	bl	800b350 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b094:	2110      	movs	r1, #16
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f8fa 	bl	800b290 <USB_FlushTxFifo>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f924 	bl	800b2f4 <USB_FlushRxFifo>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0bc:	461a      	mov	r2, r3
 800b0be:	2300      	movs	r3, #0
 800b0c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
 800b0de:	e043      	b.n	800b168 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0f6:	d118      	bne.n	800b12a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10a      	bne.n	800b114 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	015a      	lsls	r2, r3, #5
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	4413      	add	r3, r2
 800b106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b10a:	461a      	mov	r2, r3
 800b10c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	e013      	b.n	800b13c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b120:	461a      	mov	r2, r3
 800b122:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	e008      	b.n	800b13c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4413      	add	r3, r2
 800b132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b136:	461a      	mov	r2, r3
 800b138:	2300      	movs	r3, #0
 800b13a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b148:	461a      	mov	r2, r3
 800b14a:	2300      	movs	r3, #0
 800b14c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	015a      	lsls	r2, r3, #5
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	4413      	add	r3, r2
 800b156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b15a:	461a      	mov	r2, r3
 800b15c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	3301      	adds	r3, #1
 800b166:	613b      	str	r3, [r7, #16]
 800b168:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b16c:	461a      	mov	r2, r3
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	4293      	cmp	r3, r2
 800b172:	d3b5      	bcc.n	800b0e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b174:	2300      	movs	r3, #0
 800b176:	613b      	str	r3, [r7, #16]
 800b178:	e043      	b.n	800b202 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b18c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b190:	d118      	bne.n	800b1c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10a      	bne.n	800b1ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b1aa:	6013      	str	r3, [r2, #0]
 800b1ac:	e013      	b.n	800b1d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b1c0:	6013      	str	r3, [r2, #0]
 800b1c2:	e008      	b.n	800b1d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	015a      	lsls	r2, r3, #5
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	4413      	add	r3, r2
 800b1de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	3301      	adds	r3, #1
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b206:	461a      	mov	r2, r3
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d3b5      	bcc.n	800b17a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b21c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b220:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b22e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b230:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b234:	2b00      	cmp	r3, #0
 800b236:	d105      	bne.n	800b244 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	f043 0210 	orr.w	r2, r3, #16
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	699a      	ldr	r2, [r3, #24]
 800b248:	4b0f      	ldr	r3, [pc, #60]	@ (800b288 <USB_DevInit+0x2b4>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b250:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	f043 0208 	orr.w	r2, r3, #8
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b264:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d105      	bne.n	800b278 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	699a      	ldr	r2, [r3, #24]
 800b270:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <USB_DevInit+0x2b8>)
 800b272:	4313      	orrs	r3, r2
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b278:	7dfb      	ldrb	r3, [r7, #23]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b284:	b004      	add	sp, #16
 800b286:	4770      	bx	lr
 800b288:	803c3800 	.word	0x803c3800
 800b28c:	40000004 	.word	0x40000004

0800b290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2aa:	d901      	bls.n	800b2b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e01b      	b.n	800b2e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	daf2      	bge.n	800b29e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	019b      	lsls	r3, r3, #6
 800b2c0:	f043 0220 	orr.w	r2, r3, #32
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2d4:	d901      	bls.n	800b2da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e006      	b.n	800b2e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f003 0320 	and.w	r3, r3, #32
 800b2e2:	2b20      	cmp	r3, #32
 800b2e4:	d0f0      	beq.n	800b2c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b30c:	d901      	bls.n	800b312 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e018      	b.n	800b344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	daf2      	bge.n	800b300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2210      	movs	r2, #16
 800b322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
 800b328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b330:	d901      	bls.n	800b336 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e006      	b.n	800b344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	f003 0310 	and.w	r3, r3, #16
 800b33e:	2b10      	cmp	r3, #16
 800b340:	d0f0      	beq.n	800b324 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	68f9      	ldr	r1, [r7, #12]
 800b36c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b370:	4313      	orrs	r3, r2
 800b372:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b382:	b480      	push	{r7}
 800b384:	b085      	sub	sp, #20
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b39c:	f023 0303 	bic.w	r3, r3, #3
 800b3a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3b0:	f043 0302 	orr.w	r3, r3, #2
 800b3b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	f003 0301 	and.w	r3, r3, #1
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3f8:	d901      	bls.n	800b3fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e01b      	b.n	800b436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	2b00      	cmp	r3, #0
 800b404:	daf2      	bge.n	800b3ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	f043 0201 	orr.w	r2, r3, #1
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b422:	d901      	bls.n	800b428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e006      	b.n	800b436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	2b01      	cmp	r3, #1
 800b432:	d0f0      	beq.n	800b416 <USB_CoreReset+0x36>

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <siprintf>:
 800b444:	b40e      	push	{r1, r2, r3}
 800b446:	b500      	push	{lr}
 800b448:	b09c      	sub	sp, #112	@ 0x70
 800b44a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b44c:	9002      	str	r0, [sp, #8]
 800b44e:	9006      	str	r0, [sp, #24]
 800b450:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b454:	4809      	ldr	r0, [pc, #36]	@ (800b47c <siprintf+0x38>)
 800b456:	9107      	str	r1, [sp, #28]
 800b458:	9104      	str	r1, [sp, #16]
 800b45a:	4909      	ldr	r1, [pc, #36]	@ (800b480 <siprintf+0x3c>)
 800b45c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b460:	9105      	str	r1, [sp, #20]
 800b462:	6800      	ldr	r0, [r0, #0]
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	a902      	add	r1, sp, #8
 800b468:	f000 f994 	bl	800b794 <_svfiprintf_r>
 800b46c:	9b02      	ldr	r3, [sp, #8]
 800b46e:	2200      	movs	r2, #0
 800b470:	701a      	strb	r2, [r3, #0]
 800b472:	b01c      	add	sp, #112	@ 0x70
 800b474:	f85d eb04 	ldr.w	lr, [sp], #4
 800b478:	b003      	add	sp, #12
 800b47a:	4770      	bx	lr
 800b47c:	24000014 	.word	0x24000014
 800b480:	ffff0208 	.word	0xffff0208

0800b484 <memset>:
 800b484:	4402      	add	r2, r0
 800b486:	4603      	mov	r3, r0
 800b488:	4293      	cmp	r3, r2
 800b48a:	d100      	bne.n	800b48e <memset+0xa>
 800b48c:	4770      	bx	lr
 800b48e:	f803 1b01 	strb.w	r1, [r3], #1
 800b492:	e7f9      	b.n	800b488 <memset+0x4>

0800b494 <__errno>:
 800b494:	4b01      	ldr	r3, [pc, #4]	@ (800b49c <__errno+0x8>)
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	24000014 	.word	0x24000014

0800b4a0 <__libc_init_array>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	4d0d      	ldr	r5, [pc, #52]	@ (800b4d8 <__libc_init_array+0x38>)
 800b4a4:	4c0d      	ldr	r4, [pc, #52]	@ (800b4dc <__libc_init_array+0x3c>)
 800b4a6:	1b64      	subs	r4, r4, r5
 800b4a8:	10a4      	asrs	r4, r4, #2
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	42a6      	cmp	r6, r4
 800b4ae:	d109      	bne.n	800b4c4 <__libc_init_array+0x24>
 800b4b0:	4d0b      	ldr	r5, [pc, #44]	@ (800b4e0 <__libc_init_array+0x40>)
 800b4b2:	4c0c      	ldr	r4, [pc, #48]	@ (800b4e4 <__libc_init_array+0x44>)
 800b4b4:	f000 fc66 	bl	800bd84 <_init>
 800b4b8:	1b64      	subs	r4, r4, r5
 800b4ba:	10a4      	asrs	r4, r4, #2
 800b4bc:	2600      	movs	r6, #0
 800b4be:	42a6      	cmp	r6, r4
 800b4c0:	d105      	bne.n	800b4ce <__libc_init_array+0x2e>
 800b4c2:	bd70      	pop	{r4, r5, r6, pc}
 800b4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4c8:	4798      	blx	r3
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	e7ee      	b.n	800b4ac <__libc_init_array+0xc>
 800b4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4d2:	4798      	blx	r3
 800b4d4:	3601      	adds	r6, #1
 800b4d6:	e7f2      	b.n	800b4be <__libc_init_array+0x1e>
 800b4d8:	0800be20 	.word	0x0800be20
 800b4dc:	0800be20 	.word	0x0800be20
 800b4e0:	0800be20 	.word	0x0800be20
 800b4e4:	0800be24 	.word	0x0800be24

0800b4e8 <__retarget_lock_acquire_recursive>:
 800b4e8:	4770      	bx	lr

0800b4ea <__retarget_lock_release_recursive>:
 800b4ea:	4770      	bx	lr

0800b4ec <_free_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	2900      	cmp	r1, #0
 800b4f2:	d041      	beq.n	800b578 <_free_r+0x8c>
 800b4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f8:	1f0c      	subs	r4, r1, #4
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bfb8      	it	lt
 800b4fe:	18e4      	addlt	r4, r4, r3
 800b500:	f000 f8e0 	bl	800b6c4 <__malloc_lock>
 800b504:	4a1d      	ldr	r2, [pc, #116]	@ (800b57c <_free_r+0x90>)
 800b506:	6813      	ldr	r3, [r2, #0]
 800b508:	b933      	cbnz	r3, 800b518 <_free_r+0x2c>
 800b50a:	6063      	str	r3, [r4, #4]
 800b50c:	6014      	str	r4, [r2, #0]
 800b50e:	4628      	mov	r0, r5
 800b510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b514:	f000 b8dc 	b.w	800b6d0 <__malloc_unlock>
 800b518:	42a3      	cmp	r3, r4
 800b51a:	d908      	bls.n	800b52e <_free_r+0x42>
 800b51c:	6820      	ldr	r0, [r4, #0]
 800b51e:	1821      	adds	r1, r4, r0
 800b520:	428b      	cmp	r3, r1
 800b522:	bf01      	itttt	eq
 800b524:	6819      	ldreq	r1, [r3, #0]
 800b526:	685b      	ldreq	r3, [r3, #4]
 800b528:	1809      	addeq	r1, r1, r0
 800b52a:	6021      	streq	r1, [r4, #0]
 800b52c:	e7ed      	b.n	800b50a <_free_r+0x1e>
 800b52e:	461a      	mov	r2, r3
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	b10b      	cbz	r3, 800b538 <_free_r+0x4c>
 800b534:	42a3      	cmp	r3, r4
 800b536:	d9fa      	bls.n	800b52e <_free_r+0x42>
 800b538:	6811      	ldr	r1, [r2, #0]
 800b53a:	1850      	adds	r0, r2, r1
 800b53c:	42a0      	cmp	r0, r4
 800b53e:	d10b      	bne.n	800b558 <_free_r+0x6c>
 800b540:	6820      	ldr	r0, [r4, #0]
 800b542:	4401      	add	r1, r0
 800b544:	1850      	adds	r0, r2, r1
 800b546:	4283      	cmp	r3, r0
 800b548:	6011      	str	r1, [r2, #0]
 800b54a:	d1e0      	bne.n	800b50e <_free_r+0x22>
 800b54c:	6818      	ldr	r0, [r3, #0]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	6053      	str	r3, [r2, #4]
 800b552:	4408      	add	r0, r1
 800b554:	6010      	str	r0, [r2, #0]
 800b556:	e7da      	b.n	800b50e <_free_r+0x22>
 800b558:	d902      	bls.n	800b560 <_free_r+0x74>
 800b55a:	230c      	movs	r3, #12
 800b55c:	602b      	str	r3, [r5, #0]
 800b55e:	e7d6      	b.n	800b50e <_free_r+0x22>
 800b560:	6820      	ldr	r0, [r4, #0]
 800b562:	1821      	adds	r1, r4, r0
 800b564:	428b      	cmp	r3, r1
 800b566:	bf04      	itt	eq
 800b568:	6819      	ldreq	r1, [r3, #0]
 800b56a:	685b      	ldreq	r3, [r3, #4]
 800b56c:	6063      	str	r3, [r4, #4]
 800b56e:	bf04      	itt	eq
 800b570:	1809      	addeq	r1, r1, r0
 800b572:	6021      	streq	r1, [r4, #0]
 800b574:	6054      	str	r4, [r2, #4]
 800b576:	e7ca      	b.n	800b50e <_free_r+0x22>
 800b578:	bd38      	pop	{r3, r4, r5, pc}
 800b57a:	bf00      	nop
 800b57c:	24000a00 	.word	0x24000a00

0800b580 <sbrk_aligned>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	4e0f      	ldr	r6, [pc, #60]	@ (800b5c0 <sbrk_aligned+0x40>)
 800b584:	460c      	mov	r4, r1
 800b586:	6831      	ldr	r1, [r6, #0]
 800b588:	4605      	mov	r5, r0
 800b58a:	b911      	cbnz	r1, 800b592 <sbrk_aligned+0x12>
 800b58c:	f000 fba6 	bl	800bcdc <_sbrk_r>
 800b590:	6030      	str	r0, [r6, #0]
 800b592:	4621      	mov	r1, r4
 800b594:	4628      	mov	r0, r5
 800b596:	f000 fba1 	bl	800bcdc <_sbrk_r>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	d103      	bne.n	800b5a6 <sbrk_aligned+0x26>
 800b59e:	f04f 34ff 	mov.w	r4, #4294967295
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	1cc4      	adds	r4, r0, #3
 800b5a8:	f024 0403 	bic.w	r4, r4, #3
 800b5ac:	42a0      	cmp	r0, r4
 800b5ae:	d0f8      	beq.n	800b5a2 <sbrk_aligned+0x22>
 800b5b0:	1a21      	subs	r1, r4, r0
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f000 fb92 	bl	800bcdc <_sbrk_r>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d1f2      	bne.n	800b5a2 <sbrk_aligned+0x22>
 800b5bc:	e7ef      	b.n	800b59e <sbrk_aligned+0x1e>
 800b5be:	bf00      	nop
 800b5c0:	240009fc 	.word	0x240009fc

0800b5c4 <_malloc_r>:
 800b5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c8:	1ccd      	adds	r5, r1, #3
 800b5ca:	f025 0503 	bic.w	r5, r5, #3
 800b5ce:	3508      	adds	r5, #8
 800b5d0:	2d0c      	cmp	r5, #12
 800b5d2:	bf38      	it	cc
 800b5d4:	250c      	movcc	r5, #12
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	4606      	mov	r6, r0
 800b5da:	db01      	blt.n	800b5e0 <_malloc_r+0x1c>
 800b5dc:	42a9      	cmp	r1, r5
 800b5de:	d904      	bls.n	800b5ea <_malloc_r+0x26>
 800b5e0:	230c      	movs	r3, #12
 800b5e2:	6033      	str	r3, [r6, #0]
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6c0 <_malloc_r+0xfc>
 800b5ee:	f000 f869 	bl	800b6c4 <__malloc_lock>
 800b5f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f6:	461c      	mov	r4, r3
 800b5f8:	bb44      	cbnz	r4, 800b64c <_malloc_r+0x88>
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7ff ffbf 	bl	800b580 <sbrk_aligned>
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	4604      	mov	r4, r0
 800b606:	d158      	bne.n	800b6ba <_malloc_r+0xf6>
 800b608:	f8d8 4000 	ldr.w	r4, [r8]
 800b60c:	4627      	mov	r7, r4
 800b60e:	2f00      	cmp	r7, #0
 800b610:	d143      	bne.n	800b69a <_malloc_r+0xd6>
 800b612:	2c00      	cmp	r4, #0
 800b614:	d04b      	beq.n	800b6ae <_malloc_r+0xea>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	4639      	mov	r1, r7
 800b61a:	4630      	mov	r0, r6
 800b61c:	eb04 0903 	add.w	r9, r4, r3
 800b620:	f000 fb5c 	bl	800bcdc <_sbrk_r>
 800b624:	4581      	cmp	r9, r0
 800b626:	d142      	bne.n	800b6ae <_malloc_r+0xea>
 800b628:	6821      	ldr	r1, [r4, #0]
 800b62a:	1a6d      	subs	r5, r5, r1
 800b62c:	4629      	mov	r1, r5
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ffa6 	bl	800b580 <sbrk_aligned>
 800b634:	3001      	adds	r0, #1
 800b636:	d03a      	beq.n	800b6ae <_malloc_r+0xea>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	442b      	add	r3, r5
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	f8d8 3000 	ldr.w	r3, [r8]
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	bb62      	cbnz	r2, 800b6a0 <_malloc_r+0xdc>
 800b646:	f8c8 7000 	str.w	r7, [r8]
 800b64a:	e00f      	b.n	800b66c <_malloc_r+0xa8>
 800b64c:	6822      	ldr	r2, [r4, #0]
 800b64e:	1b52      	subs	r2, r2, r5
 800b650:	d420      	bmi.n	800b694 <_malloc_r+0xd0>
 800b652:	2a0b      	cmp	r2, #11
 800b654:	d917      	bls.n	800b686 <_malloc_r+0xc2>
 800b656:	1961      	adds	r1, r4, r5
 800b658:	42a3      	cmp	r3, r4
 800b65a:	6025      	str	r5, [r4, #0]
 800b65c:	bf18      	it	ne
 800b65e:	6059      	strne	r1, [r3, #4]
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	bf08      	it	eq
 800b664:	f8c8 1000 	streq.w	r1, [r8]
 800b668:	5162      	str	r2, [r4, r5]
 800b66a:	604b      	str	r3, [r1, #4]
 800b66c:	4630      	mov	r0, r6
 800b66e:	f000 f82f 	bl	800b6d0 <__malloc_unlock>
 800b672:	f104 000b 	add.w	r0, r4, #11
 800b676:	1d23      	adds	r3, r4, #4
 800b678:	f020 0007 	bic.w	r0, r0, #7
 800b67c:	1ac2      	subs	r2, r0, r3
 800b67e:	bf1c      	itt	ne
 800b680:	1a1b      	subne	r3, r3, r0
 800b682:	50a3      	strne	r3, [r4, r2]
 800b684:	e7af      	b.n	800b5e6 <_malloc_r+0x22>
 800b686:	6862      	ldr	r2, [r4, #4]
 800b688:	42a3      	cmp	r3, r4
 800b68a:	bf0c      	ite	eq
 800b68c:	f8c8 2000 	streq.w	r2, [r8]
 800b690:	605a      	strne	r2, [r3, #4]
 800b692:	e7eb      	b.n	800b66c <_malloc_r+0xa8>
 800b694:	4623      	mov	r3, r4
 800b696:	6864      	ldr	r4, [r4, #4]
 800b698:	e7ae      	b.n	800b5f8 <_malloc_r+0x34>
 800b69a:	463c      	mov	r4, r7
 800b69c:	687f      	ldr	r7, [r7, #4]
 800b69e:	e7b6      	b.n	800b60e <_malloc_r+0x4a>
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	d1fb      	bne.n	800b6a0 <_malloc_r+0xdc>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	6053      	str	r3, [r2, #4]
 800b6ac:	e7de      	b.n	800b66c <_malloc_r+0xa8>
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	6033      	str	r3, [r6, #0]
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f000 f80c 	bl	800b6d0 <__malloc_unlock>
 800b6b8:	e794      	b.n	800b5e4 <_malloc_r+0x20>
 800b6ba:	6005      	str	r5, [r0, #0]
 800b6bc:	e7d6      	b.n	800b66c <_malloc_r+0xa8>
 800b6be:	bf00      	nop
 800b6c0:	24000a00 	.word	0x24000a00

0800b6c4 <__malloc_lock>:
 800b6c4:	4801      	ldr	r0, [pc, #4]	@ (800b6cc <__malloc_lock+0x8>)
 800b6c6:	f7ff bf0f 	b.w	800b4e8 <__retarget_lock_acquire_recursive>
 800b6ca:	bf00      	nop
 800b6cc:	240009f8 	.word	0x240009f8

0800b6d0 <__malloc_unlock>:
 800b6d0:	4801      	ldr	r0, [pc, #4]	@ (800b6d8 <__malloc_unlock+0x8>)
 800b6d2:	f7ff bf0a 	b.w	800b4ea <__retarget_lock_release_recursive>
 800b6d6:	bf00      	nop
 800b6d8:	240009f8 	.word	0x240009f8

0800b6dc <__ssputs_r>:
 800b6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e0:	688e      	ldr	r6, [r1, #8]
 800b6e2:	461f      	mov	r7, r3
 800b6e4:	42be      	cmp	r6, r7
 800b6e6:	680b      	ldr	r3, [r1, #0]
 800b6e8:	4682      	mov	sl, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	4690      	mov	r8, r2
 800b6ee:	d82d      	bhi.n	800b74c <__ssputs_r+0x70>
 800b6f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6f8:	d026      	beq.n	800b748 <__ssputs_r+0x6c>
 800b6fa:	6965      	ldr	r5, [r4, #20]
 800b6fc:	6909      	ldr	r1, [r1, #16]
 800b6fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b702:	eba3 0901 	sub.w	r9, r3, r1
 800b706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b70a:	1c7b      	adds	r3, r7, #1
 800b70c:	444b      	add	r3, r9
 800b70e:	106d      	asrs	r5, r5, #1
 800b710:	429d      	cmp	r5, r3
 800b712:	bf38      	it	cc
 800b714:	461d      	movcc	r5, r3
 800b716:	0553      	lsls	r3, r2, #21
 800b718:	d527      	bpl.n	800b76a <__ssputs_r+0x8e>
 800b71a:	4629      	mov	r1, r5
 800b71c:	f7ff ff52 	bl	800b5c4 <_malloc_r>
 800b720:	4606      	mov	r6, r0
 800b722:	b360      	cbz	r0, 800b77e <__ssputs_r+0xa2>
 800b724:	6921      	ldr	r1, [r4, #16]
 800b726:	464a      	mov	r2, r9
 800b728:	f000 fae8 	bl	800bcfc <memcpy>
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	6126      	str	r6, [r4, #16]
 800b73a:	6165      	str	r5, [r4, #20]
 800b73c:	444e      	add	r6, r9
 800b73e:	eba5 0509 	sub.w	r5, r5, r9
 800b742:	6026      	str	r6, [r4, #0]
 800b744:	60a5      	str	r5, [r4, #8]
 800b746:	463e      	mov	r6, r7
 800b748:	42be      	cmp	r6, r7
 800b74a:	d900      	bls.n	800b74e <__ssputs_r+0x72>
 800b74c:	463e      	mov	r6, r7
 800b74e:	6820      	ldr	r0, [r4, #0]
 800b750:	4632      	mov	r2, r6
 800b752:	4641      	mov	r1, r8
 800b754:	f000 faa8 	bl	800bca8 <memmove>
 800b758:	68a3      	ldr	r3, [r4, #8]
 800b75a:	1b9b      	subs	r3, r3, r6
 800b75c:	60a3      	str	r3, [r4, #8]
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	4433      	add	r3, r6
 800b762:	6023      	str	r3, [r4, #0]
 800b764:	2000      	movs	r0, #0
 800b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76a:	462a      	mov	r2, r5
 800b76c:	f000 fad4 	bl	800bd18 <_realloc_r>
 800b770:	4606      	mov	r6, r0
 800b772:	2800      	cmp	r0, #0
 800b774:	d1e0      	bne.n	800b738 <__ssputs_r+0x5c>
 800b776:	6921      	ldr	r1, [r4, #16]
 800b778:	4650      	mov	r0, sl
 800b77a:	f7ff feb7 	bl	800b4ec <_free_r>
 800b77e:	230c      	movs	r3, #12
 800b780:	f8ca 3000 	str.w	r3, [sl]
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	e7e9      	b.n	800b766 <__ssputs_r+0x8a>
	...

0800b794 <_svfiprintf_r>:
 800b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	4698      	mov	r8, r3
 800b79a:	898b      	ldrh	r3, [r1, #12]
 800b79c:	061b      	lsls	r3, r3, #24
 800b79e:	b09d      	sub	sp, #116	@ 0x74
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	d510      	bpl.n	800b7ca <_svfiprintf_r+0x36>
 800b7a8:	690b      	ldr	r3, [r1, #16]
 800b7aa:	b973      	cbnz	r3, 800b7ca <_svfiprintf_r+0x36>
 800b7ac:	2140      	movs	r1, #64	@ 0x40
 800b7ae:	f7ff ff09 	bl	800b5c4 <_malloc_r>
 800b7b2:	6028      	str	r0, [r5, #0]
 800b7b4:	6128      	str	r0, [r5, #16]
 800b7b6:	b930      	cbnz	r0, 800b7c6 <_svfiprintf_r+0x32>
 800b7b8:	230c      	movs	r3, #12
 800b7ba:	603b      	str	r3, [r7, #0]
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	b01d      	add	sp, #116	@ 0x74
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	2340      	movs	r3, #64	@ 0x40
 800b7c8:	616b      	str	r3, [r5, #20]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ce:	2320      	movs	r3, #32
 800b7d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7d8:	2330      	movs	r3, #48	@ 0x30
 800b7da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b978 <_svfiprintf_r+0x1e4>
 800b7de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7e2:	f04f 0901 	mov.w	r9, #1
 800b7e6:	4623      	mov	r3, r4
 800b7e8:	469a      	mov	sl, r3
 800b7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ee:	b10a      	cbz	r2, 800b7f4 <_svfiprintf_r+0x60>
 800b7f0:	2a25      	cmp	r2, #37	@ 0x25
 800b7f2:	d1f9      	bne.n	800b7e8 <_svfiprintf_r+0x54>
 800b7f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b7f8:	d00b      	beq.n	800b812 <_svfiprintf_r+0x7e>
 800b7fa:	465b      	mov	r3, fp
 800b7fc:	4622      	mov	r2, r4
 800b7fe:	4629      	mov	r1, r5
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff ff6b 	bl	800b6dc <__ssputs_r>
 800b806:	3001      	adds	r0, #1
 800b808:	f000 80a7 	beq.w	800b95a <_svfiprintf_r+0x1c6>
 800b80c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b80e:	445a      	add	r2, fp
 800b810:	9209      	str	r2, [sp, #36]	@ 0x24
 800b812:	f89a 3000 	ldrb.w	r3, [sl]
 800b816:	2b00      	cmp	r3, #0
 800b818:	f000 809f 	beq.w	800b95a <_svfiprintf_r+0x1c6>
 800b81c:	2300      	movs	r3, #0
 800b81e:	f04f 32ff 	mov.w	r2, #4294967295
 800b822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b826:	f10a 0a01 	add.w	sl, sl, #1
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	9307      	str	r3, [sp, #28]
 800b82e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b832:	931a      	str	r3, [sp, #104]	@ 0x68
 800b834:	4654      	mov	r4, sl
 800b836:	2205      	movs	r2, #5
 800b838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83c:	484e      	ldr	r0, [pc, #312]	@ (800b978 <_svfiprintf_r+0x1e4>)
 800b83e:	f7f4 fd57 	bl	80002f0 <memchr>
 800b842:	9a04      	ldr	r2, [sp, #16]
 800b844:	b9d8      	cbnz	r0, 800b87e <_svfiprintf_r+0xea>
 800b846:	06d0      	lsls	r0, r2, #27
 800b848:	bf44      	itt	mi
 800b84a:	2320      	movmi	r3, #32
 800b84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b850:	0711      	lsls	r1, r2, #28
 800b852:	bf44      	itt	mi
 800b854:	232b      	movmi	r3, #43	@ 0x2b
 800b856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b85a:	f89a 3000 	ldrb.w	r3, [sl]
 800b85e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b860:	d015      	beq.n	800b88e <_svfiprintf_r+0xfa>
 800b862:	9a07      	ldr	r2, [sp, #28]
 800b864:	4654      	mov	r4, sl
 800b866:	2000      	movs	r0, #0
 800b868:	f04f 0c0a 	mov.w	ip, #10
 800b86c:	4621      	mov	r1, r4
 800b86e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b872:	3b30      	subs	r3, #48	@ 0x30
 800b874:	2b09      	cmp	r3, #9
 800b876:	d94b      	bls.n	800b910 <_svfiprintf_r+0x17c>
 800b878:	b1b0      	cbz	r0, 800b8a8 <_svfiprintf_r+0x114>
 800b87a:	9207      	str	r2, [sp, #28]
 800b87c:	e014      	b.n	800b8a8 <_svfiprintf_r+0x114>
 800b87e:	eba0 0308 	sub.w	r3, r0, r8
 800b882:	fa09 f303 	lsl.w	r3, r9, r3
 800b886:	4313      	orrs	r3, r2
 800b888:	9304      	str	r3, [sp, #16]
 800b88a:	46a2      	mov	sl, r4
 800b88c:	e7d2      	b.n	800b834 <_svfiprintf_r+0xa0>
 800b88e:	9b03      	ldr	r3, [sp, #12]
 800b890:	1d19      	adds	r1, r3, #4
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	9103      	str	r1, [sp, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	bfbb      	ittet	lt
 800b89a:	425b      	neglt	r3, r3
 800b89c:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a0:	9307      	strge	r3, [sp, #28]
 800b8a2:	9307      	strlt	r3, [sp, #28]
 800b8a4:	bfb8      	it	lt
 800b8a6:	9204      	strlt	r2, [sp, #16]
 800b8a8:	7823      	ldrb	r3, [r4, #0]
 800b8aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ac:	d10a      	bne.n	800b8c4 <_svfiprintf_r+0x130>
 800b8ae:	7863      	ldrb	r3, [r4, #1]
 800b8b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8b2:	d132      	bne.n	800b91a <_svfiprintf_r+0x186>
 800b8b4:	9b03      	ldr	r3, [sp, #12]
 800b8b6:	1d1a      	adds	r2, r3, #4
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	9203      	str	r2, [sp, #12]
 800b8bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8c0:	3402      	adds	r4, #2
 800b8c2:	9305      	str	r3, [sp, #20]
 800b8c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b988 <_svfiprintf_r+0x1f4>
 800b8c8:	7821      	ldrb	r1, [r4, #0]
 800b8ca:	2203      	movs	r2, #3
 800b8cc:	4650      	mov	r0, sl
 800b8ce:	f7f4 fd0f 	bl	80002f0 <memchr>
 800b8d2:	b138      	cbz	r0, 800b8e4 <_svfiprintf_r+0x150>
 800b8d4:	9b04      	ldr	r3, [sp, #16]
 800b8d6:	eba0 000a 	sub.w	r0, r0, sl
 800b8da:	2240      	movs	r2, #64	@ 0x40
 800b8dc:	4082      	lsls	r2, r0
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	3401      	adds	r4, #1
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e8:	4824      	ldr	r0, [pc, #144]	@ (800b97c <_svfiprintf_r+0x1e8>)
 800b8ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8ee:	2206      	movs	r2, #6
 800b8f0:	f7f4 fcfe 	bl	80002f0 <memchr>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d036      	beq.n	800b966 <_svfiprintf_r+0x1d2>
 800b8f8:	4b21      	ldr	r3, [pc, #132]	@ (800b980 <_svfiprintf_r+0x1ec>)
 800b8fa:	bb1b      	cbnz	r3, 800b944 <_svfiprintf_r+0x1b0>
 800b8fc:	9b03      	ldr	r3, [sp, #12]
 800b8fe:	3307      	adds	r3, #7
 800b900:	f023 0307 	bic.w	r3, r3, #7
 800b904:	3308      	adds	r3, #8
 800b906:	9303      	str	r3, [sp, #12]
 800b908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b90a:	4433      	add	r3, r6
 800b90c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b90e:	e76a      	b.n	800b7e6 <_svfiprintf_r+0x52>
 800b910:	fb0c 3202 	mla	r2, ip, r2, r3
 800b914:	460c      	mov	r4, r1
 800b916:	2001      	movs	r0, #1
 800b918:	e7a8      	b.n	800b86c <_svfiprintf_r+0xd8>
 800b91a:	2300      	movs	r3, #0
 800b91c:	3401      	adds	r4, #1
 800b91e:	9305      	str	r3, [sp, #20]
 800b920:	4619      	mov	r1, r3
 800b922:	f04f 0c0a 	mov.w	ip, #10
 800b926:	4620      	mov	r0, r4
 800b928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b92c:	3a30      	subs	r2, #48	@ 0x30
 800b92e:	2a09      	cmp	r2, #9
 800b930:	d903      	bls.n	800b93a <_svfiprintf_r+0x1a6>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d0c6      	beq.n	800b8c4 <_svfiprintf_r+0x130>
 800b936:	9105      	str	r1, [sp, #20]
 800b938:	e7c4      	b.n	800b8c4 <_svfiprintf_r+0x130>
 800b93a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b93e:	4604      	mov	r4, r0
 800b940:	2301      	movs	r3, #1
 800b942:	e7f0      	b.n	800b926 <_svfiprintf_r+0x192>
 800b944:	ab03      	add	r3, sp, #12
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	462a      	mov	r2, r5
 800b94a:	4b0e      	ldr	r3, [pc, #56]	@ (800b984 <_svfiprintf_r+0x1f0>)
 800b94c:	a904      	add	r1, sp, #16
 800b94e:	4638      	mov	r0, r7
 800b950:	f3af 8000 	nop.w
 800b954:	1c42      	adds	r2, r0, #1
 800b956:	4606      	mov	r6, r0
 800b958:	d1d6      	bne.n	800b908 <_svfiprintf_r+0x174>
 800b95a:	89ab      	ldrh	r3, [r5, #12]
 800b95c:	065b      	lsls	r3, r3, #25
 800b95e:	f53f af2d 	bmi.w	800b7bc <_svfiprintf_r+0x28>
 800b962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b964:	e72c      	b.n	800b7c0 <_svfiprintf_r+0x2c>
 800b966:	ab03      	add	r3, sp, #12
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	462a      	mov	r2, r5
 800b96c:	4b05      	ldr	r3, [pc, #20]	@ (800b984 <_svfiprintf_r+0x1f0>)
 800b96e:	a904      	add	r1, sp, #16
 800b970:	4638      	mov	r0, r7
 800b972:	f000 f879 	bl	800ba68 <_printf_i>
 800b976:	e7ed      	b.n	800b954 <_svfiprintf_r+0x1c0>
 800b978:	0800bde4 	.word	0x0800bde4
 800b97c:	0800bdee 	.word	0x0800bdee
 800b980:	00000000 	.word	0x00000000
 800b984:	0800b6dd 	.word	0x0800b6dd
 800b988:	0800bdea 	.word	0x0800bdea

0800b98c <_printf_common>:
 800b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	4616      	mov	r6, r2
 800b992:	4698      	mov	r8, r3
 800b994:	688a      	ldr	r2, [r1, #8]
 800b996:	690b      	ldr	r3, [r1, #16]
 800b998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b99c:	4293      	cmp	r3, r2
 800b99e:	bfb8      	it	lt
 800b9a0:	4613      	movlt	r3, r2
 800b9a2:	6033      	str	r3, [r6, #0]
 800b9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	b10a      	cbz	r2, 800b9b2 <_printf_common+0x26>
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	6033      	str	r3, [r6, #0]
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	0699      	lsls	r1, r3, #26
 800b9b6:	bf42      	ittt	mi
 800b9b8:	6833      	ldrmi	r3, [r6, #0]
 800b9ba:	3302      	addmi	r3, #2
 800b9bc:	6033      	strmi	r3, [r6, #0]
 800b9be:	6825      	ldr	r5, [r4, #0]
 800b9c0:	f015 0506 	ands.w	r5, r5, #6
 800b9c4:	d106      	bne.n	800b9d4 <_printf_common+0x48>
 800b9c6:	f104 0a19 	add.w	sl, r4, #25
 800b9ca:	68e3      	ldr	r3, [r4, #12]
 800b9cc:	6832      	ldr	r2, [r6, #0]
 800b9ce:	1a9b      	subs	r3, r3, r2
 800b9d0:	42ab      	cmp	r3, r5
 800b9d2:	dc26      	bgt.n	800ba22 <_printf_common+0x96>
 800b9d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9d8:	6822      	ldr	r2, [r4, #0]
 800b9da:	3b00      	subs	r3, #0
 800b9dc:	bf18      	it	ne
 800b9de:	2301      	movne	r3, #1
 800b9e0:	0692      	lsls	r2, r2, #26
 800b9e2:	d42b      	bmi.n	800ba3c <_printf_common+0xb0>
 800b9e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9e8:	4641      	mov	r1, r8
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	47c8      	blx	r9
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	d01e      	beq.n	800ba30 <_printf_common+0xa4>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	6922      	ldr	r2, [r4, #16]
 800b9f6:	f003 0306 	and.w	r3, r3, #6
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	bf02      	ittt	eq
 800b9fe:	68e5      	ldreq	r5, [r4, #12]
 800ba00:	6833      	ldreq	r3, [r6, #0]
 800ba02:	1aed      	subeq	r5, r5, r3
 800ba04:	68a3      	ldr	r3, [r4, #8]
 800ba06:	bf0c      	ite	eq
 800ba08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba0c:	2500      	movne	r5, #0
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	bfc4      	itt	gt
 800ba12:	1a9b      	subgt	r3, r3, r2
 800ba14:	18ed      	addgt	r5, r5, r3
 800ba16:	2600      	movs	r6, #0
 800ba18:	341a      	adds	r4, #26
 800ba1a:	42b5      	cmp	r5, r6
 800ba1c:	d11a      	bne.n	800ba54 <_printf_common+0xc8>
 800ba1e:	2000      	movs	r0, #0
 800ba20:	e008      	b.n	800ba34 <_printf_common+0xa8>
 800ba22:	2301      	movs	r3, #1
 800ba24:	4652      	mov	r2, sl
 800ba26:	4641      	mov	r1, r8
 800ba28:	4638      	mov	r0, r7
 800ba2a:	47c8      	blx	r9
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d103      	bne.n	800ba38 <_printf_common+0xac>
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba38:	3501      	adds	r5, #1
 800ba3a:	e7c6      	b.n	800b9ca <_printf_common+0x3e>
 800ba3c:	18e1      	adds	r1, r4, r3
 800ba3e:	1c5a      	adds	r2, r3, #1
 800ba40:	2030      	movs	r0, #48	@ 0x30
 800ba42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba46:	4422      	add	r2, r4
 800ba48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba50:	3302      	adds	r3, #2
 800ba52:	e7c7      	b.n	800b9e4 <_printf_common+0x58>
 800ba54:	2301      	movs	r3, #1
 800ba56:	4622      	mov	r2, r4
 800ba58:	4641      	mov	r1, r8
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	47c8      	blx	r9
 800ba5e:	3001      	adds	r0, #1
 800ba60:	d0e6      	beq.n	800ba30 <_printf_common+0xa4>
 800ba62:	3601      	adds	r6, #1
 800ba64:	e7d9      	b.n	800ba1a <_printf_common+0x8e>
	...

0800ba68 <_printf_i>:
 800ba68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba6c:	7e0f      	ldrb	r7, [r1, #24]
 800ba6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba70:	2f78      	cmp	r7, #120	@ 0x78
 800ba72:	4691      	mov	r9, r2
 800ba74:	4680      	mov	r8, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	469a      	mov	sl, r3
 800ba7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba7e:	d807      	bhi.n	800ba90 <_printf_i+0x28>
 800ba80:	2f62      	cmp	r7, #98	@ 0x62
 800ba82:	d80a      	bhi.n	800ba9a <_printf_i+0x32>
 800ba84:	2f00      	cmp	r7, #0
 800ba86:	f000 80d2 	beq.w	800bc2e <_printf_i+0x1c6>
 800ba8a:	2f58      	cmp	r7, #88	@ 0x58
 800ba8c:	f000 80b9 	beq.w	800bc02 <_printf_i+0x19a>
 800ba90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba98:	e03a      	b.n	800bb10 <_printf_i+0xa8>
 800ba9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba9e:	2b15      	cmp	r3, #21
 800baa0:	d8f6      	bhi.n	800ba90 <_printf_i+0x28>
 800baa2:	a101      	add	r1, pc, #4	@ (adr r1, 800baa8 <_printf_i+0x40>)
 800baa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baa8:	0800bb01 	.word	0x0800bb01
 800baac:	0800bb15 	.word	0x0800bb15
 800bab0:	0800ba91 	.word	0x0800ba91
 800bab4:	0800ba91 	.word	0x0800ba91
 800bab8:	0800ba91 	.word	0x0800ba91
 800babc:	0800ba91 	.word	0x0800ba91
 800bac0:	0800bb15 	.word	0x0800bb15
 800bac4:	0800ba91 	.word	0x0800ba91
 800bac8:	0800ba91 	.word	0x0800ba91
 800bacc:	0800ba91 	.word	0x0800ba91
 800bad0:	0800ba91 	.word	0x0800ba91
 800bad4:	0800bc15 	.word	0x0800bc15
 800bad8:	0800bb3f 	.word	0x0800bb3f
 800badc:	0800bbcf 	.word	0x0800bbcf
 800bae0:	0800ba91 	.word	0x0800ba91
 800bae4:	0800ba91 	.word	0x0800ba91
 800bae8:	0800bc37 	.word	0x0800bc37
 800baec:	0800ba91 	.word	0x0800ba91
 800baf0:	0800bb3f 	.word	0x0800bb3f
 800baf4:	0800ba91 	.word	0x0800ba91
 800baf8:	0800ba91 	.word	0x0800ba91
 800bafc:	0800bbd7 	.word	0x0800bbd7
 800bb00:	6833      	ldr	r3, [r6, #0]
 800bb02:	1d1a      	adds	r2, r3, #4
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	6032      	str	r2, [r6, #0]
 800bb08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb10:	2301      	movs	r3, #1
 800bb12:	e09d      	b.n	800bc50 <_printf_i+0x1e8>
 800bb14:	6833      	ldr	r3, [r6, #0]
 800bb16:	6820      	ldr	r0, [r4, #0]
 800bb18:	1d19      	adds	r1, r3, #4
 800bb1a:	6031      	str	r1, [r6, #0]
 800bb1c:	0606      	lsls	r6, r0, #24
 800bb1e:	d501      	bpl.n	800bb24 <_printf_i+0xbc>
 800bb20:	681d      	ldr	r5, [r3, #0]
 800bb22:	e003      	b.n	800bb2c <_printf_i+0xc4>
 800bb24:	0645      	lsls	r5, r0, #25
 800bb26:	d5fb      	bpl.n	800bb20 <_printf_i+0xb8>
 800bb28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb2c:	2d00      	cmp	r5, #0
 800bb2e:	da03      	bge.n	800bb38 <_printf_i+0xd0>
 800bb30:	232d      	movs	r3, #45	@ 0x2d
 800bb32:	426d      	negs	r5, r5
 800bb34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb38:	4859      	ldr	r0, [pc, #356]	@ (800bca0 <_printf_i+0x238>)
 800bb3a:	230a      	movs	r3, #10
 800bb3c:	e011      	b.n	800bb62 <_printf_i+0xfa>
 800bb3e:	6821      	ldr	r1, [r4, #0]
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	0608      	lsls	r0, r1, #24
 800bb44:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb48:	d402      	bmi.n	800bb50 <_printf_i+0xe8>
 800bb4a:	0649      	lsls	r1, r1, #25
 800bb4c:	bf48      	it	mi
 800bb4e:	b2ad      	uxthmi	r5, r5
 800bb50:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb52:	4853      	ldr	r0, [pc, #332]	@ (800bca0 <_printf_i+0x238>)
 800bb54:	6033      	str	r3, [r6, #0]
 800bb56:	bf14      	ite	ne
 800bb58:	230a      	movne	r3, #10
 800bb5a:	2308      	moveq	r3, #8
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb62:	6866      	ldr	r6, [r4, #4]
 800bb64:	60a6      	str	r6, [r4, #8]
 800bb66:	2e00      	cmp	r6, #0
 800bb68:	bfa2      	ittt	ge
 800bb6a:	6821      	ldrge	r1, [r4, #0]
 800bb6c:	f021 0104 	bicge.w	r1, r1, #4
 800bb70:	6021      	strge	r1, [r4, #0]
 800bb72:	b90d      	cbnz	r5, 800bb78 <_printf_i+0x110>
 800bb74:	2e00      	cmp	r6, #0
 800bb76:	d04b      	beq.n	800bc10 <_printf_i+0x1a8>
 800bb78:	4616      	mov	r6, r2
 800bb7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb7e:	fb03 5711 	mls	r7, r3, r1, r5
 800bb82:	5dc7      	ldrb	r7, [r0, r7]
 800bb84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb88:	462f      	mov	r7, r5
 800bb8a:	42bb      	cmp	r3, r7
 800bb8c:	460d      	mov	r5, r1
 800bb8e:	d9f4      	bls.n	800bb7a <_printf_i+0x112>
 800bb90:	2b08      	cmp	r3, #8
 800bb92:	d10b      	bne.n	800bbac <_printf_i+0x144>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	07df      	lsls	r7, r3, #31
 800bb98:	d508      	bpl.n	800bbac <_printf_i+0x144>
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	6861      	ldr	r1, [r4, #4]
 800bb9e:	4299      	cmp	r1, r3
 800bba0:	bfde      	ittt	le
 800bba2:	2330      	movle	r3, #48	@ 0x30
 800bba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbac:	1b92      	subs	r2, r2, r6
 800bbae:	6122      	str	r2, [r4, #16]
 800bbb0:	f8cd a000 	str.w	sl, [sp]
 800bbb4:	464b      	mov	r3, r9
 800bbb6:	aa03      	add	r2, sp, #12
 800bbb8:	4621      	mov	r1, r4
 800bbba:	4640      	mov	r0, r8
 800bbbc:	f7ff fee6 	bl	800b98c <_printf_common>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	d14a      	bne.n	800bc5a <_printf_i+0x1f2>
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	b004      	add	sp, #16
 800bbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	f043 0320 	orr.w	r3, r3, #32
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	4833      	ldr	r0, [pc, #204]	@ (800bca4 <_printf_i+0x23c>)
 800bbd8:	2778      	movs	r7, #120	@ 0x78
 800bbda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	6831      	ldr	r1, [r6, #0]
 800bbe2:	061f      	lsls	r7, r3, #24
 800bbe4:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbe8:	d402      	bmi.n	800bbf0 <_printf_i+0x188>
 800bbea:	065f      	lsls	r7, r3, #25
 800bbec:	bf48      	it	mi
 800bbee:	b2ad      	uxthmi	r5, r5
 800bbf0:	6031      	str	r1, [r6, #0]
 800bbf2:	07d9      	lsls	r1, r3, #31
 800bbf4:	bf44      	itt	mi
 800bbf6:	f043 0320 	orrmi.w	r3, r3, #32
 800bbfa:	6023      	strmi	r3, [r4, #0]
 800bbfc:	b11d      	cbz	r5, 800bc06 <_printf_i+0x19e>
 800bbfe:	2310      	movs	r3, #16
 800bc00:	e7ac      	b.n	800bb5c <_printf_i+0xf4>
 800bc02:	4827      	ldr	r0, [pc, #156]	@ (800bca0 <_printf_i+0x238>)
 800bc04:	e7e9      	b.n	800bbda <_printf_i+0x172>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	f023 0320 	bic.w	r3, r3, #32
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	e7f6      	b.n	800bbfe <_printf_i+0x196>
 800bc10:	4616      	mov	r6, r2
 800bc12:	e7bd      	b.n	800bb90 <_printf_i+0x128>
 800bc14:	6833      	ldr	r3, [r6, #0]
 800bc16:	6825      	ldr	r5, [r4, #0]
 800bc18:	6961      	ldr	r1, [r4, #20]
 800bc1a:	1d18      	adds	r0, r3, #4
 800bc1c:	6030      	str	r0, [r6, #0]
 800bc1e:	062e      	lsls	r6, r5, #24
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	d501      	bpl.n	800bc28 <_printf_i+0x1c0>
 800bc24:	6019      	str	r1, [r3, #0]
 800bc26:	e002      	b.n	800bc2e <_printf_i+0x1c6>
 800bc28:	0668      	lsls	r0, r5, #25
 800bc2a:	d5fb      	bpl.n	800bc24 <_printf_i+0x1bc>
 800bc2c:	8019      	strh	r1, [r3, #0]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	6123      	str	r3, [r4, #16]
 800bc32:	4616      	mov	r6, r2
 800bc34:	e7bc      	b.n	800bbb0 <_printf_i+0x148>
 800bc36:	6833      	ldr	r3, [r6, #0]
 800bc38:	1d1a      	adds	r2, r3, #4
 800bc3a:	6032      	str	r2, [r6, #0]
 800bc3c:	681e      	ldr	r6, [r3, #0]
 800bc3e:	6862      	ldr	r2, [r4, #4]
 800bc40:	2100      	movs	r1, #0
 800bc42:	4630      	mov	r0, r6
 800bc44:	f7f4 fb54 	bl	80002f0 <memchr>
 800bc48:	b108      	cbz	r0, 800bc4e <_printf_i+0x1e6>
 800bc4a:	1b80      	subs	r0, r0, r6
 800bc4c:	6060      	str	r0, [r4, #4]
 800bc4e:	6863      	ldr	r3, [r4, #4]
 800bc50:	6123      	str	r3, [r4, #16]
 800bc52:	2300      	movs	r3, #0
 800bc54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc58:	e7aa      	b.n	800bbb0 <_printf_i+0x148>
 800bc5a:	6923      	ldr	r3, [r4, #16]
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	4649      	mov	r1, r9
 800bc60:	4640      	mov	r0, r8
 800bc62:	47d0      	blx	sl
 800bc64:	3001      	adds	r0, #1
 800bc66:	d0ad      	beq.n	800bbc4 <_printf_i+0x15c>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	079b      	lsls	r3, r3, #30
 800bc6c:	d413      	bmi.n	800bc96 <_printf_i+0x22e>
 800bc6e:	68e0      	ldr	r0, [r4, #12]
 800bc70:	9b03      	ldr	r3, [sp, #12]
 800bc72:	4298      	cmp	r0, r3
 800bc74:	bfb8      	it	lt
 800bc76:	4618      	movlt	r0, r3
 800bc78:	e7a6      	b.n	800bbc8 <_printf_i+0x160>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	4632      	mov	r2, r6
 800bc7e:	4649      	mov	r1, r9
 800bc80:	4640      	mov	r0, r8
 800bc82:	47d0      	blx	sl
 800bc84:	3001      	adds	r0, #1
 800bc86:	d09d      	beq.n	800bbc4 <_printf_i+0x15c>
 800bc88:	3501      	adds	r5, #1
 800bc8a:	68e3      	ldr	r3, [r4, #12]
 800bc8c:	9903      	ldr	r1, [sp, #12]
 800bc8e:	1a5b      	subs	r3, r3, r1
 800bc90:	42ab      	cmp	r3, r5
 800bc92:	dcf2      	bgt.n	800bc7a <_printf_i+0x212>
 800bc94:	e7eb      	b.n	800bc6e <_printf_i+0x206>
 800bc96:	2500      	movs	r5, #0
 800bc98:	f104 0619 	add.w	r6, r4, #25
 800bc9c:	e7f5      	b.n	800bc8a <_printf_i+0x222>
 800bc9e:	bf00      	nop
 800bca0:	0800bdf5 	.word	0x0800bdf5
 800bca4:	0800be06 	.word	0x0800be06

0800bca8 <memmove>:
 800bca8:	4288      	cmp	r0, r1
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	eb01 0402 	add.w	r4, r1, r2
 800bcb0:	d902      	bls.n	800bcb8 <memmove+0x10>
 800bcb2:	4284      	cmp	r4, r0
 800bcb4:	4623      	mov	r3, r4
 800bcb6:	d807      	bhi.n	800bcc8 <memmove+0x20>
 800bcb8:	1e43      	subs	r3, r0, #1
 800bcba:	42a1      	cmp	r1, r4
 800bcbc:	d008      	beq.n	800bcd0 <memmove+0x28>
 800bcbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcc6:	e7f8      	b.n	800bcba <memmove+0x12>
 800bcc8:	4402      	add	r2, r0
 800bcca:	4601      	mov	r1, r0
 800bccc:	428a      	cmp	r2, r1
 800bcce:	d100      	bne.n	800bcd2 <memmove+0x2a>
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcda:	e7f7      	b.n	800bccc <memmove+0x24>

0800bcdc <_sbrk_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d06      	ldr	r5, [pc, #24]	@ (800bcf8 <_sbrk_r+0x1c>)
 800bce0:	2300      	movs	r3, #0
 800bce2:	4604      	mov	r4, r0
 800bce4:	4608      	mov	r0, r1
 800bce6:	602b      	str	r3, [r5, #0]
 800bce8:	f7f5 fb28 	bl	800133c <_sbrk>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d102      	bne.n	800bcf6 <_sbrk_r+0x1a>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	b103      	cbz	r3, 800bcf6 <_sbrk_r+0x1a>
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	240009f4 	.word	0x240009f4

0800bcfc <memcpy>:
 800bcfc:	440a      	add	r2, r1
 800bcfe:	4291      	cmp	r1, r2
 800bd00:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd04:	d100      	bne.n	800bd08 <memcpy+0xc>
 800bd06:	4770      	bx	lr
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd12:	4291      	cmp	r1, r2
 800bd14:	d1f9      	bne.n	800bd0a <memcpy+0xe>
 800bd16:	bd10      	pop	{r4, pc}

0800bd18 <_realloc_r>:
 800bd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4615      	mov	r5, r2
 800bd20:	460c      	mov	r4, r1
 800bd22:	b921      	cbnz	r1, 800bd2e <_realloc_r+0x16>
 800bd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd28:	4611      	mov	r1, r2
 800bd2a:	f7ff bc4b 	b.w	800b5c4 <_malloc_r>
 800bd2e:	b92a      	cbnz	r2, 800bd3c <_realloc_r+0x24>
 800bd30:	f7ff fbdc 	bl	800b4ec <_free_r>
 800bd34:	2400      	movs	r4, #0
 800bd36:	4620      	mov	r0, r4
 800bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd3c:	f000 f81a 	bl	800bd74 <_malloc_usable_size_r>
 800bd40:	4285      	cmp	r5, r0
 800bd42:	4606      	mov	r6, r0
 800bd44:	d802      	bhi.n	800bd4c <_realloc_r+0x34>
 800bd46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd4a:	d8f4      	bhi.n	800bd36 <_realloc_r+0x1e>
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f7ff fc38 	bl	800b5c4 <_malloc_r>
 800bd54:	4607      	mov	r7, r0
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d0ec      	beq.n	800bd34 <_realloc_r+0x1c>
 800bd5a:	42b5      	cmp	r5, r6
 800bd5c:	462a      	mov	r2, r5
 800bd5e:	4621      	mov	r1, r4
 800bd60:	bf28      	it	cs
 800bd62:	4632      	movcs	r2, r6
 800bd64:	f7ff ffca 	bl	800bcfc <memcpy>
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	f7ff fbbe 	bl	800b4ec <_free_r>
 800bd70:	463c      	mov	r4, r7
 800bd72:	e7e0      	b.n	800bd36 <_realloc_r+0x1e>

0800bd74 <_malloc_usable_size_r>:
 800bd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd78:	1f18      	subs	r0, r3, #4
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	bfbc      	itt	lt
 800bd7e:	580b      	ldrlt	r3, [r1, r0]
 800bd80:	18c0      	addlt	r0, r0, r3
 800bd82:	4770      	bx	lr

0800bd84 <_init>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	bf00      	nop
 800bd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd8a:	bc08      	pop	{r3}
 800bd8c:	469e      	mov	lr, r3
 800bd8e:	4770      	bx	lr

0800bd90 <_fini>:
 800bd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd92:	bf00      	nop
 800bd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd96:	bc08      	pop	{r3}
 800bd98:	469e      	mov	lr, r3
 800bd9a:	4770      	bx	lr
